extern void __VERIFIER_error() __attribute__ ((__noreturn__)); /* Generated by CIL v. 1.3.7 */
/* print_CIL_Input is true */

typedef signed char __s8;
typedef unsigned char __u8;
typedef short __s16;
typedef unsigned short __u16;
typedef int __s32;
typedef unsigned int __u32;
typedef long long __s64;
typedef unsigned long long __u64;
typedef unsigned char u8;
typedef short s16;
typedef unsigned short u16;
typedef int s32;
typedef unsigned int u32;
typedef long long s64;
typedef unsigned long long u64;
typedef long __kernel_long_t;
typedef unsigned long __kernel_ulong_t;
typedef int __kernel_pid_t;
typedef unsigned int __kernel_uid32_t;
typedef unsigned int __kernel_gid32_t;
typedef __kernel_ulong_t __kernel_size_t;
typedef __kernel_long_t __kernel_ssize_t;
typedef long long __kernel_loff_t;
typedef __kernel_long_t __kernel_time_t;
typedef __kernel_long_t __kernel_clock_t;
typedef int __kernel_timer_t;
typedef int __kernel_clockid_t;
typedef __u32 __kernel_dev_t;
typedef __kernel_dev_t dev_t;
typedef unsigned short umode_t;
typedef __kernel_pid_t pid_t;
typedef __kernel_clockid_t clockid_t;
typedef _Bool bool;
typedef __kernel_uid32_t uid_t;
typedef __kernel_gid32_t gid_t;
typedef __kernel_loff_t loff_t;
typedef __kernel_size_t size_t;
typedef __kernel_ssize_t ssize_t;
typedef __kernel_time_t time_t;
typedef __s32 int32_t;
typedef __u32 uint32_t;
typedef __u64 uint64_t;
typedef unsigned long sector_t;
typedef unsigned long blkcnt_t;
typedef u64 dma_addr_t;
typedef unsigned int gfp_t;
typedef unsigned int fmode_t;
typedef unsigned int oom_flags_t;
typedef u64 phys_addr_t;
typedef phys_addr_t resource_size_t;
struct __anonstruct_atomic_t_6 {
   int counter ;
};
typedef struct __anonstruct_atomic_t_6 atomic_t;
struct __anonstruct_atomic64_t_7 {
   long counter ;
};
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
struct hlist_node;
struct hlist_node;
struct hlist_head {
   struct hlist_node *first ;
};
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head * ) ;
};
struct module;
struct module;
typedef void (*ctor_fn_t)(void);
struct file_operations;
struct file_operations;
struct device;
struct device;
struct completion;
struct completion;
struct pt_regs;
struct pt_regs;
struct pid;
struct pid;
typedef u16 __ticket_t;
typedef u32 __ticketpair_t;
struct __raw_tickets {
   __ticket_t head ;
   __ticket_t tail ;
};
union __anonunion_ldv_2024_8 {
   __ticketpair_t head_tail ;
   struct __raw_tickets tickets ;
};
struct arch_spinlock {
   union __anonunion_ldv_2024_8 ldv_2024 ;
};
typedef struct arch_spinlock arch_spinlock_t;
struct __anonstruct_ldv_2031_10 {
   u32 read ;
   s32 write ;
};
union __anonunion_arch_rwlock_t_9 {
   s64 lock ;
   struct __anonstruct_ldv_2031_10 ldv_2031 ;
};
typedef union __anonunion_arch_rwlock_t_9 arch_rwlock_t;
struct task_struct;
struct task_struct;
struct lockdep_map;
struct lockdep_map;
struct mm_struct;
struct mm_struct;
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
struct __anonstruct_ldv_2096_12 {
   unsigned int a ;
   unsigned int b ;
};
struct __anonstruct_ldv_2111_13 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
union __anonunion_ldv_2112_11 {
   struct __anonstruct_ldv_2096_12 ldv_2096 ;
   struct __anonstruct_ldv_2111_13 ldv_2111 ;
};
struct desc_struct {
   union __anonunion_ldv_2112_11 ldv_2112 ;
};
typedef unsigned long pgdval_t;
typedef unsigned long pgprotval_t;
struct pgprot {
   pgprotval_t pgprot ;
};
typedef struct pgprot pgprot_t;
struct __anonstruct_pgd_t_15 {
   pgdval_t pgd ;
};
typedef struct __anonstruct_pgd_t_15 pgd_t;
struct page;
struct page;
typedef struct page *pgtable_t;
struct file;
struct file;
struct seq_file;
struct seq_file;
struct thread_struct;
struct thread_struct;
struct cpumask;
struct cpumask;
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
union __anonunion_ldv_2767_18 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_ldv_2767_18 ldv_2767 ;
};
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
struct cpumask {
   unsigned long bits[64U] ;
};
typedef struct cpumask cpumask_t;
typedef struct cpumask *cpumask_var_t;
struct static_key;
struct static_key;
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
struct __anonstruct_ldv_5125_23 {
   u64 rip ;
   u64 rdp ;
};
struct __anonstruct_ldv_5131_24 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
union __anonunion_ldv_5132_22 {
   struct __anonstruct_ldv_5125_23 ldv_5125 ;
   struct __anonstruct_ldv_5131_24 ldv_5131 ;
};
union __anonunion_ldv_5141_25 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_5132_22 ldv_5132 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_5141_25 ldv_5141 ;
};
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
};
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
struct fpu {
   unsigned int last_cpu ;
   unsigned int has_fpu ;
   union thread_xstate *state ;
};
struct kmem_cache;
struct kmem_cache;
struct perf_event;
struct perf_event;
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct fpu fpu ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
};
typedef atomic64_t atomic_long_t;
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__)) ;
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
   unsigned short references : 11 ;
};
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
typedef struct raw_spinlock raw_spinlock_t;
struct __anonstruct_ldv_5960_29 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
union __anonunion_ldv_5961_28 {
   struct raw_spinlock rlock ;
   struct __anonstruct_ldv_5960_29 ldv_5960 ;
};
struct spinlock {
   union __anonunion_ldv_5961_28 ldv_5961 ;
};
typedef struct spinlock spinlock_t;
struct __anonstruct_rwlock_t_30 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
typedef struct __anonstruct_rwlock_t_30 rwlock_t;
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct task_struct *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
struct timespec;
struct timespec;
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
} ;
typedef enum irqreturn irqreturn_t;
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char const   *name ;
   unsigned long flags ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
struct pci_dev;
struct pci_dev;
struct seqcount {
   unsigned int sequence ;
};
typedef struct seqcount seqcount_t;
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
union ktime {
   s64 tv64 ;
};
typedef union ktime ktime_t;
struct tvec_base;
struct tvec_base;
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   struct tvec_base *base ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};
struct hrtimer;
struct hrtimer;
enum hrtimer_restart;
enum hrtimer_restart;
struct work_struct;
struct work_struct;
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   int cpu ;
};
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
typedef struct __wait_queue_head wait_queue_head_t;
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
struct pm_message {
   int event ;
};
typedef struct pm_message pm_message_t;
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_late)(struct device * ) ;
   int (*resume_early)(struct device * ) ;
   int (*freeze_late)(struct device * ) ;
   int (*thaw_early)(struct device * ) ;
   int (*poweroff_late)(struct device * ) ;
   int (*restore_early)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
} ;
struct wakeup_source;
struct wakeup_source;
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
};
struct dev_pm_qos;
struct dev_pm_qos;
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char async_suspend : 1 ;
   bool is_prepared ;
   bool is_suspended ;
   bool ignore_children ;
   bool early_init ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path ;
   bool syscore ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned char disable_depth : 3 ;
   unsigned char idle_notification : 1 ;
   unsigned char request_pending : 1 ;
   unsigned char deferred_resume : 1 ;
   unsigned char run_wake : 1 ;
   unsigned char runtime_auto : 1 ;
   unsigned char no_callbacks : 1 ;
   unsigned char irq_safe : 1 ;
   unsigned char use_autosuspend : 1 ;
   unsigned char timer_autosuspends : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   struct dev_pm_qos *qos ;
};
struct dev_pm_domain {
   struct dev_pm_ops ops ;
};
struct __anonstruct_nodemask_t_100 {
   unsigned long bits[16U] ;
};
typedef struct __anonstruct_nodemask_t_100 nodemask_t;
struct pci_bus;
struct pci_bus;
struct __anonstruct_mm_context_t_101 {
   void *ldt ;
   int size ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
};
typedef struct __anonstruct_mm_context_t_101 mm_context_t;
struct vm_area_struct;
struct vm_area_struct;
struct rw_semaphore;
struct rw_semaphore;
struct rw_semaphore {
   long count ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
struct proc_dir_entry;
struct proc_dir_entry;
struct exception_table_entry {
   int insn ;
   int fixup ;
};
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
struct rb_root {
   struct rb_node *rb_node ;
};
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
struct timerqueue_head {
   struct rb_root head ;
   struct timerqueue_node *next ;
};
struct hrtimer_clock_base;
struct hrtimer_clock_base;
struct hrtimer_cpu_base;
struct hrtimer_cpu_base;
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   int index ;
   clockid_t clockid ;
   struct timerqueue_head active ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int active_bases ;
   unsigned int clock_was_set ;
   ktime_t expires_next ;
   int hres_active ;
   int hang_detected ;
   unsigned long nr_events ;
   unsigned long nr_retries ;
   unsigned long nr_hangs ;
   ktime_t max_hang_time ;
   struct hrtimer_clock_base clock_base[3U] ;
};
struct kref {
   atomic_t refcount ;
};
struct user_namespace;
struct user_namespace;
typedef uid_t kuid_t;
typedef gid_t kgid_t;
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   kuid_t uid ;
   kgid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
struct nsproxy;
struct nsproxy;
struct cred;
struct cred;
typedef __u64 Elf64_Addr;
typedef __u16 Elf64_Half;
typedef __u32 Elf64_Word;
typedef __u64 Elf64_Xword;
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
typedef struct elf64_sym Elf64_Sym;
struct sock;
struct sock;
struct kobject;
struct kobject;
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
} ;
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   void *(*grab_current_ns)(void) ;
   void const   *(*netlink_ns)(struct sock * ) ;
   void const   *(*initial_ns)(void) ;
   void (*drop_ns)(void * ) ;
};
struct attribute {
   char const   *name ;
   umode_t mode ;
   bool ignore_lockdep ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
struct attribute_group {
   char const   *name ;
   umode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                   loff_t  , size_t  ) ;
   ssize_t (*write)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                    loff_t  , size_t  ) ;
   int (*mmap)(struct file * , struct kobject * , struct bin_attribute * , struct vm_area_struct * ) ;
};
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
   void const   *(*namespace)(struct kobject * , struct attribute  const  * ) ;
};
struct sysfs_dirent;
struct sysfs_dirent;
struct kset;
struct kset;
struct kobj_type;
struct kobj_type;
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops  const  *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations  const  *(*child_ns_type)(struct kobject * ) ;
   void const   *(*namespace)(struct kobject * ) ;
};
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
struct kset_uevent_ops {
   int (* const  filter)(struct kset * , struct kobject * ) ;
   char const   *(* const  name)(struct kset * , struct kobject * ) ;
   int (* const  uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops  const  *uevent_ops ;
};
struct kernel_param;
struct kernel_param;
struct kernel_param_ops {
   int (*set)(char const   * , struct kernel_param  const  * ) ;
   int (*get)(char * , struct kernel_param  const  * ) ;
   void (*free)(void * ) ;
};
struct kparam_string;
struct kparam_string;
struct kparam_array;
struct kparam_array;
union __anonunion_ldv_15527_135 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
struct kernel_param {
   char const   *name ;
   struct kernel_param_ops  const  *ops ;
   u16 perm ;
   s16 level ;
   union __anonunion_ldv_15527_135 ldv_15527 ;
};
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops  const  *ops ;
   void *elem ;
};
struct static_key {
   atomic_t enabled ;
};
struct tracepoint;
struct tracepoint;
struct tracepoint_func {
   void *func ;
   void *data ;
};
struct tracepoint {
   char const   *name ;
   struct static_key key ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
struct mod_arch_specific {

};
struct module_param_attrs;
struct module_param_attrs;
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module_kobject * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module_kobject * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
struct module_ref {
   unsigned long incs ;
   unsigned long decs ;
};
struct module_sect_attrs;
struct module_sect_attrs;
struct module_notes_attrs;
struct module_notes_attrs;
struct ftrace_event_call;
struct ftrace_event_call;
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   bool sig_ok ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   struct tracepoint * const  *tracepoints_ptrs ;
   unsigned int num_trace_bprintk_fmt ;
   char const   **trace_bprintk_fmt_start ;
   struct ftrace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct list_head source_list ;
   struct list_head target_list ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
struct mem_cgroup;
struct mem_cgroup;
struct __anonstruct_ldv_16088_137 {
   struct mem_cgroup *memcg ;
   struct list_head list ;
   struct kmem_cache *root_cache ;
   bool dead ;
   atomic_t nr_pages ;
   struct work_struct destroy ;
};
union __anonunion_ldv_16089_136 {
   struct kmem_cache *memcg_caches[0U] ;
   struct __anonstruct_ldv_16088_137 ldv_16088 ;
};
struct memcg_cache_params {
   bool is_root_cache ;
   union __anonunion_ldv_16089_136 ldv_16089 ;
};
struct kmem_cache_cpu {
   void **freelist ;
   unsigned long tid ;
   struct page *page ;
   struct page *partial ;
   unsigned int stat[26U] ;
};
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
struct kmem_cache_order_objects {
   unsigned long x ;
};
struct kmem_cache {
   struct kmem_cache_cpu *cpu_slab ;
   unsigned long flags ;
   unsigned long min_partial ;
   int size ;
   int object_size ;
   int offset ;
   int cpu_partial ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   int reserved ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   struct memcg_cache_params *memcg_params ;
   int max_attr_size ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1024U] ;
};
struct inode;
struct inode;
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
} ;
struct uprobe;
struct uprobe;
struct uprobe_task {
   enum uprobe_task_state state ;
   struct arch_uprobe_task autask ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   unsigned long vaddr ;
};
struct xol_area {
   wait_queue_head_t wq ;
   atomic_t slot_count ;
   unsigned long *bitmap ;
   struct page *page ;
   unsigned long vaddr ;
};
struct uprobes_state {
   struct xol_area *xol_area ;
};
struct address_space;
struct address_space;
union __anonunion_ldv_16466_139 {
   unsigned long index ;
   void *freelist ;
   bool pfmemalloc ;
};
struct __anonstruct_ldv_16476_143 {
   unsigned short inuse ;
   unsigned short objects : 15 ;
   unsigned char frozen : 1 ;
};
union __anonunion_ldv_16478_142 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_16476_143 ldv_16476 ;
   int units ;
};
struct __anonstruct_ldv_16480_141 {
   union __anonunion_ldv_16478_142 ldv_16478 ;
   atomic_t _count ;
};
union __anonunion_ldv_16481_140 {
   unsigned long counters ;
   struct __anonstruct_ldv_16480_141 ldv_16480 ;
};
struct __anonstruct_ldv_16482_138 {
   union __anonunion_ldv_16466_139 ldv_16466 ;
   union __anonunion_ldv_16481_140 ldv_16481 ;
};
struct __anonstruct_ldv_16489_145 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
struct slab;
struct slab;
union __anonunion_ldv_16493_144 {
   struct list_head lru ;
   struct __anonstruct_ldv_16489_145 ldv_16489 ;
   struct list_head list ;
   struct slab *slab_page ;
};
union __anonunion_ldv_16498_146 {
   unsigned long private ;
   struct kmem_cache *slab_cache ;
   struct page *first_page ;
};
struct page {
   unsigned long flags ;
   struct address_space *mapping ;
   struct __anonstruct_ldv_16482_138 ldv_16482 ;
   union __anonunion_ldv_16493_144 ldv_16493 ;
   union __anonunion_ldv_16498_146 ldv_16498 ;
   unsigned long debug_flags ;
   int _last_nid ;
};
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
struct __anonstruct_linear_148 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
union __anonunion_shared_147 {
   struct __anonstruct_linear_148 linear ;
   struct list_head nonlinear ;
};
struct anon_vma;
struct anon_vma;
struct vm_operations_struct;
struct vm_operations_struct;
struct mempolicy;
struct mempolicy;
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   union __anonunion_shared_147 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   struct mempolicy *vm_policy ;
};
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
struct mm_rss_stat {
   atomic_long_t count[3U] ;
};
struct linux_binfmt;
struct linux_binfmt;
struct mmu_notifier_mm;
struct mmu_notifier_mm;
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long pinned_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[44U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_var_t cpu_vm_mask_var ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   pgtable_t pmd_huge_pte ;
   struct cpumask cpumask_allocation ;
   unsigned long numa_next_scan ;
   unsigned long numa_next_reset ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   int first_nid ;
   struct uprobes_state uprobes_state ;
};
struct shrink_control {
   gfp_t gfp_mask ;
   unsigned long nr_to_scan ;
};
struct shrinker {
   int (*shrink)(struct shrinker * , struct shrink_control * ) ;
   int seeks ;
   long batch ;
   struct list_head list ;
   atomic_long_t nr_in_batch ;
};
struct file_ra_state;
struct file_ra_state;
struct user_struct;
struct user_struct;
struct writeback_control;
struct writeback_control;
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
   int (*remap_pages)(struct vm_area_struct * , unsigned long  , unsigned long  ,
                      unsigned long  ) ;
};
struct klist_node;
struct klist_node;
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
struct dma_map_ops;
struct dma_map_ops;
struct dev_archdata {
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
struct device_private;
struct device_private;
struct device_driver;
struct device_driver;
struct driver_private;
struct driver_private;
struct class;
struct class;
struct subsys_private;
struct subsys_private;
struct bus_type;
struct bus_type;
struct device_node;
struct device_node;
struct iommu_ops;
struct iommu_ops;
struct iommu_group;
struct iommu_group;
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
struct device_attribute;
struct device_attribute;
struct driver_attribute;
struct driver_attribute;
struct bus_type {
   char const   *name ;
   char const   *dev_name ;
   struct device *dev_root ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
};
struct device_type;
struct device_type;
struct of_device_id;
struct of_device_id;
struct acpi_device_id;
struct acpi_device_id;
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   struct of_device_id  const  *of_match_table ;
   struct acpi_device_id  const  *acpi_match_table ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
struct class_attribute;
struct class_attribute;
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct bin_attribute *dev_bin_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct kobj_ns_type_operations  const  *ns_type ;
   void const   *(*namespace)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct subsys_private *p ;
};
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , struct class_attribute * , char * ) ;
   ssize_t (*store)(struct class * , struct class_attribute * , char const   * , size_t  ) ;
   void const   *(*namespace)(struct class * , struct class_attribute  const  * ) ;
};
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
struct acpi_dev_node {
   void *handle ;
};
struct dma_coherent_mem;
struct dma_coherent_mem;
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type  const  *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct acpi_dev_node acpi_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
   struct iommu_group *iommu_group ;
};
struct wakeup_source {
   char const   *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   bool active ;
   bool autosleep_enabled ;
};
struct dma_attrs {
   unsigned long flags[1U] ;
};
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
} ;
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
struct dma_map_ops {
   void *(*alloc)(struct device * , size_t  , dma_addr_t * , gfp_t  , struct dma_attrs * ) ;
   void (*free)(struct device * , size_t  , void * , dma_addr_t  , struct dma_attrs * ) ;
   int (*mmap)(struct device * , struct vm_area_struct * , void * , dma_addr_t  ,
               size_t  , struct dma_attrs * ) ;
   int (*get_sgtable)(struct device * , struct sg_table * , void * , dma_addr_t  ,
                      size_t  , struct dma_attrs * ) ;
   dma_addr_t (*map_page)(struct device * , struct page * , unsigned long  , size_t  ,
                          enum dma_data_direction  , struct dma_attrs * ) ;
   void (*unmap_page)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ,
                      struct dma_attrs * ) ;
   int (*map_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                 struct dma_attrs * ) ;
   void (*unmap_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                    struct dma_attrs * ) ;
   void (*sync_single_for_cpu)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_single_for_device)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_sg_for_cpu)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   void (*sync_sg_for_device)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   int (*mapping_error)(struct device * , dma_addr_t  ) ;
   int (*dma_supported)(struct device * , u64  ) ;
   int (*set_dma_mask)(struct device * , u64  ) ;
   int is_phys ;
};
typedef unsigned long kernel_ulong_t;
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
struct acpi_device_id {
   __u8 id[16U] ;
   kernel_ulong_t driver_data ;
};
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void const   *data ;
};
struct hotplug_slot;
struct hotplug_slot;
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
typedef int pci_power_t;
typedef unsigned int pci_channel_state_t;
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
} ;
typedef unsigned short pci_dev_flags_t;
typedef unsigned short pci_bus_flags_t;
struct pcie_link_state;
struct pcie_link_state;
struct pci_vpd;
struct pci_vpd;
struct pci_sriov;
struct pci_sriov;
struct pci_ats;
struct pci_ats;
struct pci_driver;
struct pci_driver;
union __anonunion_ldv_21297_150 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u8 pcie_cap ;
   unsigned char pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   int pm_cap ;
   unsigned char pme_support : 5 ;
   unsigned char pme_interrupt : 1 ;
   unsigned char pme_poll : 1 ;
   unsigned char d1_support : 1 ;
   unsigned char d2_support : 1 ;
   unsigned char no_d1d2 : 1 ;
   unsigned char no_d3cold : 1 ;
   unsigned char d3cold_allowed : 1 ;
   unsigned char mmio_always_on : 1 ;
   unsigned char wakeup_prepared : 1 ;
   unsigned char runtime_d3cold : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   unsigned char transparent : 1 ;
   unsigned char multifunction : 1 ;
   unsigned char is_added : 1 ;
   unsigned char is_busmaster : 1 ;
   unsigned char no_msi : 1 ;
   unsigned char block_cfg_access : 1 ;
   unsigned char broken_parity_status : 1 ;
   unsigned char irq_reroute_variant : 2 ;
   unsigned char msi_enabled : 1 ;
   unsigned char msix_enabled : 1 ;
   unsigned char ari_enabled : 1 ;
   unsigned char is_managed : 1 ;
   unsigned char is_pcie : 1 ;
   unsigned char needs_freset : 1 ;
   unsigned char state_saved : 1 ;
   unsigned char is_physfn : 1 ;
   unsigned char is_virtfn : 1 ;
   unsigned char reset_fn : 1 ;
   unsigned char is_hotplug_bridge : 1 ;
   unsigned char __aer_firmware_first_valid : 1 ;
   unsigned char __aer_firmware_first : 1 ;
   unsigned char broken_intx_masking : 1 ;
   unsigned char io_window_1k : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   struct list_head msi_list ;
   struct kset *msi_kset ;
   struct pci_vpd *vpd ;
   union __anonunion_ldv_21297_150 ldv_21297 ;
   struct pci_ats *ats ;
   phys_addr_t rom ;
   size_t romlen ;
};
struct pci_ops;
struct pci_ops;
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned char is_added : 1 ;
};
struct pci_ops {
   int (*read)(struct pci_bus * , unsigned int  , int  , int  , u32 * ) ;
   int (*write)(struct pci_bus * , unsigned int  , int  , int  , u32  ) ;
};
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
typedef unsigned int pci_ers_result_t;
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev * , enum pci_channel_state  ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev * ) ;
   pci_ers_result_t (*link_reset)(struct pci_dev * ) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev * ) ;
   void (*resume)(struct pci_dev * ) ;
};
struct pci_driver {
   struct list_head node ;
   char const   *name ;
   struct pci_device_id  const  *id_table ;
   int (*probe)(struct pci_dev * , struct pci_device_id  const  * ) ;
   void (*remove)(struct pci_dev * ) ;
   int (*suspend)(struct pci_dev * , pm_message_t  ) ;
   int (*suspend_late)(struct pci_dev * , pm_message_t  ) ;
   int (*resume_early)(struct pci_dev * ) ;
   int (*resume)(struct pci_dev * ) ;
   void (*shutdown)(struct pci_dev * ) ;
   int (*sriov_configure)(struct pci_dev * , int  ) ;
   struct pci_error_handlers  const  *err_handler ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
struct hlist_bl_node;
struct hlist_bl_node;
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
struct nameidata;
struct nameidata;
struct path;
struct path;
struct vfsmount;
struct vfsmount;
struct __anonstruct_ldv_22961_152 {
   u32 hash ;
   u32 len ;
};
union __anonunion_ldv_22963_151 {
   struct __anonstruct_ldv_22961_152 ldv_22961 ;
   u64 hash_len ;
};
struct qstr {
   union __anonunion_ldv_22963_151 ldv_22963 ;
   unsigned char const   *name ;
};
struct dentry_operations;
struct dentry_operations;
struct super_block;
struct super_block;
union __anonunion_d_u_153 {
   struct list_head d_child ;
   struct callback_head d_rcu ;
};
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   unsigned int d_count ;
   spinlock_t d_lock ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   struct list_head d_lru ;
   union __anonunion_d_u_153 d_u ;
   struct list_head d_subdirs ;
   struct hlist_node d_alias ;
};
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , unsigned int  ) ;
   int (*d_hash)(struct dentry  const  * , struct inode  const  * , struct qstr * ) ;
   int (*d_compare)(struct dentry  const  * , struct inode  const  * , struct dentry  const  * ,
                    struct inode  const  * , unsigned int  , char const   * , struct qstr  const  * ) ;
   int (*d_delete)(struct dentry  const  * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_prune)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
   struct vfsmount *(*d_automount)(struct path * ) ;
   int (*d_manage)(struct dentry * , bool  ) ;
};
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
struct radix_tree_node;
struct radix_tree_node;
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
struct pid_namespace;
struct pid_namespace;
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
typedef struct kernel_cap_struct kernel_cap_t;
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2
} ;
struct block_device;
struct block_device;
struct io_context;
struct io_context;
struct export_operations;
struct export_operations;
struct iovec;
struct iovec;
struct kiocb;
struct kiocb;
struct pipe_inode_info;
struct pipe_inode_info;
struct poll_table_struct;
struct poll_table_struct;
struct kstatfs;
struct kstatfs;
struct swap_info_struct;
struct swap_info_struct;
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
typedef struct fs_qfilestat fs_qfilestat_t;
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
struct dquot;
struct dquot;
typedef __kernel_uid32_t projid_t;
typedef projid_t kprojid_t;
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
} ;
typedef long long qsize_t;
union __anonunion_ldv_23967_155 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
struct kqid {
   union __anonunion_ldv_23967_155 ldv_23967 ;
   enum quota_type type ;
};
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
struct quota_format_type;
struct quota_format_type;
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
struct dquot_operations {
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   qsize_t *(*get_reserved_space)(struct inode * ) ;
};
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , struct path * ) ;
   int (*quota_on_meta)(struct super_block * , int  , int  ) ;
   int (*quota_off)(struct super_block * , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , struct kqid  , struct fs_disk_quota * ) ;
   int (*set_dqblk)(struct super_block * , struct kqid  , struct fs_disk_quota * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
};
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops  const  *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops  const  *ops[2U] ;
};
union __anonunion_arg_157 {
   char *buf ;
   void *data ;
};
struct __anonstruct_read_descriptor_t_156 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_157 arg ;
   int error ;
};
typedef struct __anonstruct_read_descriptor_t_156 read_descriptor_t;
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   void (*freepage)(struct page * ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * , enum migrate_mode  ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
   int (*error_remove_page)(struct address_space * , struct page * ) ;
   int (*swap_activate)(struct swap_info_struct * , struct file * , sector_t * ) ;
   void (*swap_deactivate)(struct file * ) ;
};
struct backing_dev_info;
struct backing_dev_info;
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct rb_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   struct mutex i_mmap_mutex ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
};
struct request_queue;
struct request_queue;
struct hd_struct;
struct hd_struct;
struct gendisk;
struct gendisk;
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
struct posix_acl;
struct posix_acl;
struct inode_operations;
struct inode_operations;
union __anonunion_ldv_24401_158 {
   unsigned int const   i_nlink ;
   unsigned int __i_nlink ;
};
union __anonunion_ldv_24421_159 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
struct file_lock;
struct file_lock;
struct cdev;
struct cdev;
union __anonunion_ldv_24437_160 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations  const  *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_ldv_24401_158 ldv_24401 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct mutex i_mutex ;
   unsigned long dirtied_when ;
   struct hlist_node i_hash ;
   struct list_head i_wb_list ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   union __anonunion_ldv_24421_159 ldv_24421 ;
   u64 i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   struct file_operations  const  *i_fop ;
   struct file_lock *i_flock ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_24437_160 ldv_24437 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   atomic_t i_readcount ;
   void *i_private ;
};
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
union __anonunion_f_u_161 {
   struct list_head fu_list ;
   struct callback_head fu_rcuhead ;
};
struct file {
   union __anonunion_f_u_161 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   int f_sb_list_cpu ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
struct files_struct;
struct files_struct;
typedef struct files_struct *fl_owner_t;
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
struct lock_manager_operations {
   int (*lm_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*lm_notify)(struct file_lock * ) ;
   int (*lm_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*lm_break)(struct file_lock * ) ;
   int (*lm_change)(struct file_lock ** , int  ) ;
};
struct nlm_lockowner;
struct nlm_lockowner;
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
struct nfs4_lock_state;
struct nfs4_lock_state;
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
struct fasync_struct;
struct fasync_struct;
struct __anonstruct_afs_163 {
   struct list_head link ;
   int state ;
};
union __anonunion_fl_u_162 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_163 afs ;
};
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations  const  *fl_ops ;
   struct lock_manager_operations  const  *fl_lmops ;
   union __anonunion_fl_u_162 fl_u ;
};
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
struct sb_writers {
   struct percpu_counter counter[3U] ;
   wait_queue_head_t wait ;
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct lockdep_map lock_map[3U] ;
};
struct file_system_type;
struct file_system_type;
struct super_operations;
struct super_operations;
struct xattr_handler;
struct xattr_handler;
struct mtd_info;
struct mtd_info;
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations  const  *dq_op ;
   struct quotactl_ops  const  *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler  const  **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_bl_head s_anon ;
   struct list_head *s_files ;
   struct list_head s_mounts ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   spinlock_t s_inode_lru_lock ;
   struct list_head s_inode_lru ;
   int s_nr_inodes_unused ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   char s_id[32U] ;
   u8 s_uuid[16U] ;
   void *s_fs_info ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
   struct dentry_operations  const  *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   int s_readonly_remount ;
};
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , loff_t  , loff_t  , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
   long (*fallocate)(struct file * , int  , loff_t  , loff_t  ) ;
   int (*show_fdinfo)(struct seq_file * , struct file * ) ;
};
struct inode_operations {
   struct dentry *(*lookup)(struct inode * , struct dentry * , unsigned int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   int (*permission)(struct inode * , int  ) ;
   struct posix_acl *(*get_acl)(struct inode * , int  ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   int (*create)(struct inode * , struct dentry * , umode_t  , bool  ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , umode_t  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , umode_t  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
   int (*update_time)(struct inode * , struct timespec * , int  ) ;
   int (*atomic_open)(struct inode * , struct dentry * , struct file * , unsigned int  ,
                      umode_t  , int * ) ;
};
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * , int  ) ;
   int (*write_inode)(struct inode * , struct writeback_control * ) ;
   int (*drop_inode)(struct inode * ) ;
   void (*evict_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct dentry * ) ;
   int (*show_devname)(struct seq_file * , struct dentry * ) ;
   int (*show_path)(struct seq_file * , struct dentry * ) ;
   int (*show_stats)(struct seq_file * , struct dentry * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
   int (*nr_cached_objects)(struct super_block * ) ;
   void (*free_cached_objects)(struct super_block * , int  ) ;
};
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   struct dentry *(*mount)(struct file_system_type * , int  , char const   * , void * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
typedef unsigned long cputime_t;
struct sem_undo_list;
struct sem_undo_list;
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
struct __anonstruct_sigset_t_164 {
   unsigned long sig[1U] ;
};
typedef struct __anonstruct_sigset_t_164 sigset_t;
struct siginfo;
struct siginfo;
typedef void __signalfn_t(int  );
typedef __signalfn_t *__sighandler_t;
typedef void __restorefn_t(void);
typedef __restorefn_t *__sigrestore_t;
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
struct k_sigaction {
   struct sigaction sa ;
};
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
typedef union sigval sigval_t;
struct __anonstruct__kill_166 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
struct __anonstruct__timer_167 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
struct __anonstruct__rt_168 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
struct __anonstruct__sigchld_169 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
struct __anonstruct__sigfault_170 {
   void *_addr ;
   short _addr_lsb ;
};
struct __anonstruct__sigpoll_171 {
   long _band ;
   int _fd ;
};
struct __anonstruct__sigsys_172 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
union __anonunion__sifields_165 {
   int _pad[28U] ;
   struct __anonstruct__kill_166 _kill ;
   struct __anonstruct__timer_167 _timer ;
   struct __anonstruct__rt_168 _rt ;
   struct __anonstruct__sigchld_169 _sigchld ;
   struct __anonstruct__sigfault_170 _sigfault ;
   struct __anonstruct__sigpoll_171 _sigpoll ;
   struct __anonstruct__sigsys_172 _sigsys ;
};
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_165 _sifields ;
};
typedef struct siginfo siginfo_t;
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
struct seccomp_filter;
struct seccomp_filter;
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
struct plist_head {
   struct list_head node_list ;
};
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
struct rt_mutex_waiter;
struct rt_mutex_waiter;
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
typedef int32_t key_serial_t;
typedef uint32_t key_perm_t;
struct key;
struct key;
struct signal_struct;
struct signal_struct;
struct key_type;
struct key_type;
struct keyring_list;
struct keyring_list;
union __anonunion_ldv_27109_175 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
struct key_user;
struct key_user;
union __anonunion_ldv_27118_176 {
   time_t expiry ;
   time_t revoked_at ;
};
union __anonunion_type_data_177 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
   int reject_error ;
};
union __anonunion_payload_178 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   struct keyring_list *subscriptions ;
};
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   union __anonunion_ldv_27109_175 ldv_27109 ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_ldv_27118_176 ldv_27118 ;
   time_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_177 type_data ;
   union __anonunion_payload_178 payload ;
};
struct audit_context;
struct audit_context;
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   kgid_t small_block[32U] ;
   kgid_t *blocks[0U] ;
};
struct thread_group_cred;
struct thread_group_cred;
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   struct callback_head rcu ;
};
struct llist_node;
struct llist_node;
struct llist_node {
   struct llist_node *next ;
};
struct futex_pi_state;
struct futex_pi_state;
struct robust_list_head;
struct robust_list_head;
struct bio_list;
struct bio_list;
struct fs_struct;
struct fs_struct;
struct perf_event_context;
struct perf_event_context;
struct blk_plug;
struct blk_plug;
struct cfs_rq;
struct cfs_rq;
struct task_group;
struct task_group;
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
struct kioctx;
struct kioctx;
union __anonunion_ki_obj_179 {
   void *user ;
   struct task_struct *tsk ;
};
struct eventfd_ctx;
struct eventfd_ctx;
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_179 ki_obj ;
   __u64 ki_user_data ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct list_head ki_batch ;
   struct eventfd_ctx *ki_eventfd ;
};
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct hlist_node list ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
   struct callback_head callback_head ;
};
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
struct cputime {
   cputime_t utime ;
   cputime_t stime ;
};
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   raw_spinlock_t lock ;
};
struct autogroup;
struct autogroup;
struct tty_struct;
struct tty_struct;
struct taskstats;
struct taskstats;
struct tty_audit_buf;
struct tty_audit_buf;
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned char is_child_subreaper : 1 ;
   unsigned char has_child_subreaper : 1 ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   struct rw_semaphore group_rwsem ;
   oom_flags_t oom_flags ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mutex cred_guard_mutex ;
};
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
};
struct reclaim_state;
struct reclaim_state;
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
struct rq;
struct rq;
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   bool (*yield_to_task)(struct rq * , struct task_struct * , bool  ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct task_struct * , int  , int  ) ;
   void (*migrate_task_rq)(struct task_struct * , int  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_waking)(struct task_struct * ) ;
   void (*task_woken)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , struct cpumask  const  * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_fork)(struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * ) ;
   void (*switched_to)(struct rq * , struct task_struct * ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  ) ;
   unsigned int (*get_rr_interval)(struct rq * , struct task_struct * ) ;
   void (*task_move_group)(struct task_struct * , int  ) ;
};
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
struct sched_avg {
   u32 runnable_avg_sum ;
   u32 runnable_avg_period ;
   u64 last_runnable_update ;
   s64 decay_count ;
   unsigned long load_avg_contrib ;
};
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
struct rt_rq;
struct rt_rq;
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
struct memcg_batch_info {
   int do_batch ;
   struct mem_cgroup *memcg ;
   unsigned long nr_pages ;
   unsigned long memsw_nr_pages ;
};
struct css_set;
struct css_set;
struct compat_robust_list_head;
struct compat_robust_list_head;
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   unsigned char brk_randomized : 1 ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int jobctl ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   unsigned char in_execve : 1 ;
   unsigned char in_iowait : 1 ;
   unsigned char no_new_privs : 1 ;
   unsigned char sched_reset_on_fork : 1 ;
   unsigned char sched_contributes_to_load : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   short pref_node_fork ;
   int numa_scan_seq ;
   int numa_migrate_seq ;
   unsigned int numa_scan_period ;
   u64 node_stamp ;
   struct callback_head numa_work ;
   struct callback_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_batch_info memcg_batch ;
   unsigned int memcg_kmem_skip_account ;
   atomic_t ptrace_bp_refcnt ;
   struct uprobe_task *utask ;
};
enum comedi_io_direction {
    COMEDI_INPUT = 0,
    COMEDI_OUTPUT = 1,
    COMEDI_OPENDRAIN = 2
} ;
struct comedi_insn {
   unsigned int insn ;
   unsigned int n ;
   unsigned int *data ;
   unsigned int subdev ;
   unsigned int chanspec ;
   unsigned int unused[3U] ;
};
struct comedi_cmd {
   unsigned int subdev ;
   unsigned int flags ;
   unsigned int start_src ;
   unsigned int start_arg ;
   unsigned int scan_begin_src ;
   unsigned int scan_begin_arg ;
   unsigned int convert_src ;
   unsigned int convert_arg ;
   unsigned int scan_end_src ;
   unsigned int scan_end_arg ;
   unsigned int stop_src ;
   unsigned int stop_arg ;
   unsigned int *chanlist ;
   unsigned int chanlist_len ;
   short *data ;
   unsigned int data_len ;
};
struct comedi_krange {
   int min ;
   int max ;
   unsigned int flags ;
};
struct comedi_devconfig {
   char board_name[20U] ;
   int options[32U] ;
};
struct comedi_device;
struct comedi_device;
struct comedi_async;
struct comedi_async;
struct comedi_lrange;
struct comedi_lrange;
struct comedi_subdevice {
   struct comedi_device *device ;
   int type ;
   int n_chan ;
   int subdev_flags ;
   int len_chanlist ;
   void *private ;
   struct comedi_async *async ;
   void *lock ;
   void *busy ;
   unsigned int runflags ;
   spinlock_t spin_lock ;
   unsigned int io_bits ;
   unsigned int maxdata ;
   unsigned int const   *maxdata_list ;
   unsigned int flags ;
   unsigned int const   *flaglist ;
   unsigned int settling_time_0 ;
   struct comedi_lrange  const  *range_table ;
   struct comedi_lrange  const  * const  *range_table_list ;
   unsigned int *chanlist ;
   int (*insn_read)(struct comedi_device * , struct comedi_subdevice * , struct comedi_insn * ,
                    unsigned int * ) ;
   int (*insn_write)(struct comedi_device * , struct comedi_subdevice * , struct comedi_insn * ,
                     unsigned int * ) ;
   int (*insn_bits)(struct comedi_device * , struct comedi_subdevice * , struct comedi_insn * ,
                    unsigned int * ) ;
   int (*insn_config)(struct comedi_device * , struct comedi_subdevice * , struct comedi_insn * ,
                      unsigned int * ) ;
   int (*do_cmd)(struct comedi_device * , struct comedi_subdevice * ) ;
   int (*do_cmdtest)(struct comedi_device * , struct comedi_subdevice * , struct comedi_cmd * ) ;
   int (*poll)(struct comedi_device * , struct comedi_subdevice * ) ;
   int (*cancel)(struct comedi_device * , struct comedi_subdevice * ) ;
   int (*buf_change)(struct comedi_device * , struct comedi_subdevice * , unsigned long  ) ;
   void (*munge)(struct comedi_device * , struct comedi_subdevice * , void * , unsigned int  ,
                 unsigned int  ) ;
   enum dma_data_direction async_dma_dir ;
   unsigned int state ;
   struct device *class_dev ;
   int minor ;
};
struct comedi_buf_page {
   void *virt_addr ;
   dma_addr_t dma_addr ;
};
struct comedi_async {
   struct comedi_subdevice *subdevice ;
   void *prealloc_buf ;
   unsigned int prealloc_bufsz ;
   struct comedi_buf_page *buf_page_list ;
   unsigned int n_buf_pages ;
   unsigned int max_bufsize ;
   unsigned int mmap_count ;
   unsigned int buf_write_count ;
   unsigned int buf_write_alloc_count ;
   unsigned int buf_read_count ;
   unsigned int buf_read_alloc_count ;
   unsigned int buf_write_ptr ;
   unsigned int buf_read_ptr ;
   unsigned int cur_chan ;
   unsigned int scan_progress ;
   unsigned int munge_chan ;
   unsigned int munge_count ;
   unsigned int munge_ptr ;
   unsigned int events ;
   struct comedi_cmd cmd ;
   wait_queue_head_t wait_head ;
   unsigned int cb_mask ;
   int (*cb_func)(unsigned int  , void * ) ;
   void *cb_arg ;
   int (*inttrig)(struct comedi_device * , struct comedi_subdevice * , unsigned int  ) ;
};
struct comedi_driver {
   struct comedi_driver *next ;
   char const   *driver_name ;
   struct module *module ;
   int (*attach)(struct comedi_device * , struct comedi_devconfig * ) ;
   void (*detach)(struct comedi_device * ) ;
   int (*auto_attach)(struct comedi_device * , unsigned long  ) ;
   unsigned int num_names ;
   char const   * const  *board_name ;
   int offset ;
};
struct comedi_device {
   int use_count ;
   struct comedi_driver *driver ;
   void *private ;
   struct device *class_dev ;
   int minor ;
   struct device *hw_dev ;
   char const   *board_name ;
   void const   *board_ptr ;
   int attached ;
   spinlock_t spinlock ;
   struct mutex mutex ;
   int in_request_module ;
   int n_subdevices ;
   struct comedi_subdevice *subdevices ;
   unsigned long iobase ;
   unsigned int irq ;
   struct comedi_subdevice *read_subdev ;
   struct comedi_subdevice *write_subdev ;
   struct fasync_struct *async_queue ;
   int (*open)(struct comedi_device * ) ;
   void (*close)(struct comedi_device * ) ;
};
struct comedi_lrange {
   int length ;
   struct comedi_krange range[] ;
};
struct mite_dma_descriptor {
   u32 count ;
   u32 addr ;
   u32 next ;
   u32 dar ;
};
struct mite_dma_descriptor_ring {
   struct device *hw_dev ;
   unsigned int n_links ;
   struct mite_dma_descriptor *descriptors ;
   dma_addr_t descriptors_dma_addr ;
};
struct mite_struct;
struct mite_struct;
struct mite_channel {
   struct mite_struct *mite ;
   unsigned int channel ;
   int dir ;
   int done ;
   struct mite_dma_descriptor_ring *ring ;
};
struct mite_struct {
   struct pci_dev *pcidev ;
   resource_size_t mite_phys_addr ;
   void *mite_io_addr ;
   resource_size_t daq_phys_addr ;
   void *daq_io_addr ;
   struct mite_channel channels[8U] ;
   short channel_allocated[8U] ;
   int num_channels ;
   unsigned int fifo_size ;
   spinlock_t lock ;
};
struct ni_gpct_device;
struct ni_gpct_device;
enum ni_gpct_register {
    NITIO_G0_Autoincrement_Reg = 0,
    NITIO_G1_Autoincrement_Reg = 1,
    NITIO_G2_Autoincrement_Reg = 2,
    NITIO_G3_Autoincrement_Reg = 3,
    NITIO_G0_Command_Reg = 4,
    NITIO_G1_Command_Reg = 5,
    NITIO_G2_Command_Reg = 6,
    NITIO_G3_Command_Reg = 7,
    NITIO_G0_HW_Save_Reg = 8,
    NITIO_G1_HW_Save_Reg = 9,
    NITIO_G2_HW_Save_Reg = 10,
    NITIO_G3_HW_Save_Reg = 11,
    NITIO_G0_SW_Save_Reg = 12,
    NITIO_G1_SW_Save_Reg = 13,
    NITIO_G2_SW_Save_Reg = 14,
    NITIO_G3_SW_Save_Reg = 15,
    NITIO_G0_Mode_Reg = 16,
    NITIO_G1_Mode_Reg = 17,
    NITIO_G2_Mode_Reg = 18,
    NITIO_G3_Mode_Reg = 19,
    NITIO_G0_LoadA_Reg = 20,
    NITIO_G1_LoadA_Reg = 21,
    NITIO_G2_LoadA_Reg = 22,
    NITIO_G3_LoadA_Reg = 23,
    NITIO_G0_LoadB_Reg = 24,
    NITIO_G1_LoadB_Reg = 25,
    NITIO_G2_LoadB_Reg = 26,
    NITIO_G3_LoadB_Reg = 27,
    NITIO_G0_Input_Select_Reg = 28,
    NITIO_G1_Input_Select_Reg = 29,
    NITIO_G2_Input_Select_Reg = 30,
    NITIO_G3_Input_Select_Reg = 31,
    NITIO_G0_Counting_Mode_Reg = 32,
    NITIO_G1_Counting_Mode_Reg = 33,
    NITIO_G2_Counting_Mode_Reg = 34,
    NITIO_G3_Counting_Mode_Reg = 35,
    NITIO_G0_Second_Gate_Reg = 36,
    NITIO_G1_Second_Gate_Reg = 37,
    NITIO_G2_Second_Gate_Reg = 38,
    NITIO_G3_Second_Gate_Reg = 39,
    NITIO_G01_Status_Reg = 40,
    NITIO_G23_Status_Reg = 41,
    NITIO_G01_Joint_Reset_Reg = 42,
    NITIO_G23_Joint_Reset_Reg = 43,
    NITIO_G01_Joint_Status1_Reg = 44,
    NITIO_G23_Joint_Status1_Reg = 45,
    NITIO_G01_Joint_Status2_Reg = 46,
    NITIO_G23_Joint_Status2_Reg = 47,
    NITIO_G0_DMA_Config_Reg = 48,
    NITIO_G1_DMA_Config_Reg = 49,
    NITIO_G2_DMA_Config_Reg = 50,
    NITIO_G3_DMA_Config_Reg = 51,
    NITIO_G0_DMA_Status_Reg = 52,
    NITIO_G1_DMA_Status_Reg = 53,
    NITIO_G2_DMA_Status_Reg = 54,
    NITIO_G3_DMA_Status_Reg = 55,
    NITIO_G0_ABZ_Reg = 56,
    NITIO_G1_ABZ_Reg = 57,
    NITIO_G0_Interrupt_Acknowledge_Reg = 58,
    NITIO_G1_Interrupt_Acknowledge_Reg = 59,
    NITIO_G2_Interrupt_Acknowledge_Reg = 60,
    NITIO_G3_Interrupt_Acknowledge_Reg = 61,
    NITIO_G0_Status_Reg = 62,
    NITIO_G1_Status_Reg = 63,
    NITIO_G2_Status_Reg = 64,
    NITIO_G3_Status_Reg = 65,
    NITIO_G0_Interrupt_Enable_Reg = 66,
    NITIO_G1_Interrupt_Enable_Reg = 67,
    NITIO_G2_Interrupt_Enable_Reg = 68,
    NITIO_G3_Interrupt_Enable_Reg = 69,
    NITIO_Num_Registers = 70
} ;
enum ni_gpct_variant {
    ni_gpct_variant_e_series = 0,
    ni_gpct_variant_m_series = 1,
    ni_gpct_variant_660x = 2
} ;
struct ni_gpct {
   struct ni_gpct_device *counter_dev ;
   unsigned int counter_index ;
   unsigned int chip_index ;
   uint64_t clock_period_ps ;
   struct mite_channel *mite_chan ;
   spinlock_t lock ;
};
struct ni_gpct_device {
   struct comedi_device *dev ;
   void (*write_register)(struct ni_gpct * , unsigned int  , enum ni_gpct_register  ) ;
   unsigned int (*read_register)(struct ni_gpct * , enum ni_gpct_register  ) ;
   enum ni_gpct_variant variant ;
   struct ni_gpct *counters ;
   unsigned int num_counters ;
   unsigned int regs[70U] ;
   spinlock_t regs_lock ;
};
enum NI_660x_Register {
    G0InterruptAcknowledge = 0,
    G0StatusRegister = 1,
    G1InterruptAcknowledge = 2,
    G1StatusRegister = 3,
    G01StatusRegister = 4,
    G0CommandRegister = 5,
    STCDIOParallelInput = 6,
    G1CommandRegister = 7,
    G0HWSaveRegister = 8,
    G1HWSaveRegister = 9,
    STCDIOOutput = 10,
    STCDIOControl = 11,
    G0SWSaveRegister = 12,
    G1SWSaveRegister = 13,
    G0ModeRegister = 14,
    G01JointStatus1Register = 15,
    G1ModeRegister = 16,
    STCDIOSerialInput = 17,
    G0LoadARegister = 18,
    G01JointStatus2Register = 19,
    G0LoadBRegister = 20,
    G1LoadARegister = 21,
    G1LoadBRegister = 22,
    G0InputSelectRegister = 23,
    G1InputSelectRegister = 24,
    G0AutoincrementRegister = 25,
    G1AutoincrementRegister = 26,
    G01JointResetRegister = 27,
    G0InterruptEnable = 28,
    G1InterruptEnable = 29,
    G0CountingModeRegister = 30,
    G1CountingModeRegister = 31,
    G0SecondGateRegister = 32,
    G1SecondGateRegister = 33,
    G0DMAConfigRegister = 34,
    G0DMAStatusRegister = 35,
    G1DMAConfigRegister = 36,
    G1DMAStatusRegister = 37,
    G2InterruptAcknowledge = 38,
    G2StatusRegister = 39,
    G3InterruptAcknowledge = 40,
    G3StatusRegister = 41,
    G23StatusRegister = 42,
    G2CommandRegister = 43,
    G3CommandRegister = 44,
    G2HWSaveRegister = 45,
    G3HWSaveRegister = 46,
    G2SWSaveRegister = 47,
    G3SWSaveRegister = 48,
    G2ModeRegister = 49,
    G23JointStatus1Register = 50,
    G3ModeRegister = 51,
    G2LoadARegister = 52,
    G23JointStatus2Register = 53,
    G2LoadBRegister = 54,
    G3LoadARegister = 55,
    G3LoadBRegister = 56,
    G2InputSelectRegister = 57,
    G3InputSelectRegister = 58,
    G2AutoincrementRegister = 59,
    G3AutoincrementRegister = 60,
    G23JointResetRegister = 61,
    G2InterruptEnable = 62,
    G3InterruptEnable = 63,
    G2CountingModeRegister = 64,
    G3CountingModeRegister = 65,
    G3SecondGateRegister = 66,
    G2SecondGateRegister = 67,
    G2DMAConfigRegister = 68,
    G2DMAStatusRegister = 69,
    G3DMAConfigRegister = 70,
    G3DMAStatusRegister = 71,
    DIO32Input = 72,
    DIO32Output = 73,
    ClockConfigRegister = 74,
    GlobalInterruptStatusRegister = 75,
    DMAConfigRegister = 76,
    GlobalInterruptConfigRegister = 77,
    IOConfigReg0_1 = 78,
    IOConfigReg2_3 = 79,
    IOConfigReg4_5 = 80,
    IOConfigReg6_7 = 81,
    IOConfigReg8_9 = 82,
    IOConfigReg10_11 = 83,
    IOConfigReg12_13 = 84,
    IOConfigReg14_15 = 85,
    IOConfigReg16_17 = 86,
    IOConfigReg18_19 = 87,
    IOConfigReg20_21 = 88,
    IOConfigReg22_23 = 89,
    IOConfigReg24_25 = 90,
    IOConfigReg26_27 = 91,
    IOConfigReg28_29 = 92,
    IOConfigReg30_31 = 93,
    IOConfigReg32_33 = 94,
    IOConfigReg34_35 = 95,
    IOConfigReg36_37 = 96,
    IOConfigReg38_39 = 97,
    NumRegisters = 98
} ;
enum ni_660x_register_width {
    DATA_1B = 0,
    DATA_2B = 1,
    DATA_4B = 2
} ;
enum ni_660x_register_direction {
    NI_660x_READ = 0,
    NI_660x_WRITE = 1,
    NI_660x_READ_WRITE = 2
} ;
struct NI_660xRegisterData {
   char const   *name ;
   int offset ;
   enum ni_660x_register_direction direction ;
   enum ni_660x_register_width size ;
};
struct ni_660x_board {
   unsigned short dev_id ;
   char const   *name ;
   unsigned int n_chips ;
};
struct ni_660x_private {
   struct mite_struct *mite ;
   struct ni_gpct_device *counter_dev ;
   uint64_t pfi_direction_bits ;
   struct mite_dma_descriptor_ring *mite_rings[2U][4U] ;
   spinlock_t mite_channel_lock ;
   spinlock_t interrupt_lock ;
   unsigned int dma_configuration_soft_copies[2U] ;
   spinlock_t soft_reg_copy_lock ;
   unsigned short pfi_output_selects[40U] ;
};
typedef int ldv_func_ret_type___2;
long ldv__builtin_expect(long exp , long c ) ;
extern int mutex_trylock(struct mutex * ) ;
int ldv_mutex_trylock_4(struct mutex *ldv_func_arg1 ) ;
extern void mutex_unlock(struct mutex * ) ;
void ldv_mutex_unlock_2(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_5(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_7(struct mutex *ldv_func_arg1 ) ;
extern void mutex_lock(struct mutex * ) ;
void ldv_mutex_lock_1(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_3(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_6(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) ;
void ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) ;
void ldv_mutex_lock_lock(struct mutex *lock ) ;
void ldv_mutex_unlock_lock(struct mutex *lock ) ;
void ldv_mutex_lock_mutex_of_device(struct mutex *lock ) ;
int ldv_mutex_trylock_mutex_of_device(struct mutex *lock ) ;
void ldv_mutex_unlock_mutex_of_device(struct mutex *lock ) ;
int ldv_state_variable_1  ;
int ldv_state_variable_2  ;
int ref_cnt  ;
int ldv_state_variable_0  ;
extern int __VERIFIER_nondet_int(void) ;
extern void __raw_spin_lock_init(raw_spinlock_t * , char const   * , struct lock_class_key * ) ;
extern unsigned long _raw_spin_lock_irqsave(raw_spinlock_t * ) ;
extern void _raw_spin_unlock_irqrestore(raw_spinlock_t * , unsigned long  ) ;
 static raw_spinlock_t *spinlock_check(spinlock_t *lock ) 
{ 

  {
  return (& lock->ldv_5961.rlock);
}
}
 static void spin_unlock_irqrestore(spinlock_t *lock , unsigned long flags ) 
{ 

  {
  _raw_spin_unlock_irqrestore(& lock->ldv_5961.rlock, flags);
  return;
}
}
 static unsigned short readw(void const volatile   *addr ) 
{ unsigned short ret ;

  {
  __asm__  volatile   ("movw %1,%0": "=r" (ret): "m" (*((unsigned short volatile   *)addr)): "memory");
  return (ret);
}
}
 static unsigned int readl(void const volatile   *addr ) 
{ unsigned int ret ;

  {
  __asm__  volatile   ("movl %1,%0": "=r" (ret): "m" (*((unsigned int volatile   *)addr)): "memory");
  return (ret);
}
}
 static void writew(unsigned short val , void volatile   *addr ) 
{ 

  {
  __asm__  volatile   ("movw %0,%1": : "r" (val), "m" (*((unsigned short volatile   *)addr)): "memory");
  return;
}
}
 static void writel(unsigned int val , void volatile   *addr ) 
{ 

  {
  __asm__  volatile   ("movl %0,%1": : "r" (val), "m" (*((unsigned int volatile   *)addr)): "memory");
  return;
}
}
extern int request_threaded_irq(unsigned int  , irqreturn_t (*)(int  , void * ) ,
                                irqreturn_t (*)(int  , void * ) , unsigned long  ,
                                char const   * , void * ) ;
 static int request_irq(unsigned int irq , irqreturn_t (*handler)(int  , void * ) ,
                                unsigned long flags , char const   *name , void *dev ) 
{ int tmp ;

  {
  tmp = request_threaded_irq(irq, handler, 0, flags, name, dev);
  return (tmp);
}
}
extern void free_irq(unsigned int  , void * ) ;
extern struct module __this_module ;
extern void kfree(void const   * ) ;
extern void *__kmalloc(size_t  , gfp_t  ) ;
 static void *kmalloc(size_t size , gfp_t flags ) 
{ void *tmp___2 ;

  {
  tmp___2 = __kmalloc(size, flags);
  return (tmp___2);
}
}
 static void *kzalloc(size_t size , gfp_t flags ) 
{ void *tmp ;

  {
  tmp = kmalloc(size, flags | 32768U);
  return (tmp);
}
}
extern int dev_warn(struct device  const  * , char const   *  , ...) ;
extern int _dev_info(struct device  const  * , char const   *  , ...) ;
 static void const   *comedi_board(struct comedi_device  const  *dev ) 
{ 

  {
  return ((void const   *)dev->board_ptr);
}
}
extern void comedi_event(struct comedi_device * , struct comedi_subdevice * ) ;
extern void comedi_error(struct comedi_device  const  * , char const   * ) ;
extern int comedi_alloc_subdevices(struct comedi_device * , int  ) ;
extern int comedi_pci_driver_register(struct comedi_driver * , struct pci_driver * ) ;
extern void comedi_pci_driver_unregister(struct comedi_driver * , struct pci_driver * ) ;
extern struct comedi_lrange  const  range_unipolar5 ;
 static struct pci_dev *comedi_to_pci_dev(struct comedi_device *dev ) 
{ struct device  const  *__mptr ;
  struct pci_dev *tmp ;

  {
  if ((unsigned long )dev->hw_dev != (unsigned long )((struct device *)0)) {
    __mptr = (struct device  const  *)dev->hw_dev;
    tmp = (struct pci_dev *)__mptr + 0xffffffffffffff68UL;
  } else {
    tmp = 0;
  }
  return (tmp);
}
}
extern unsigned int comedi_buf_read_n_available(struct comedi_async * ) ;
extern int comedi_auto_config(struct device * , struct comedi_driver * , unsigned long  ) ;
extern void comedi_auto_unconfig(struct device * ) ;
 static int comedi_pci_auto_config(struct pci_dev *pcidev , struct comedi_driver *driver ) 
{ int tmp ;

  {
  tmp = comedi_auto_config(& pcidev->dev, driver, 0UL);
  return (tmp);
}
}
 static void comedi_pci_auto_unconfig(struct pci_dev *pcidev ) 
{ 

  {
  comedi_auto_unconfig(& pcidev->dev);
  return;
}
}
extern struct mite_struct *mite_alloc(struct pci_dev * ) ;
 static void mite_free(struct mite_struct *mite ) 
{ 

  {
  kfree((void const   *)mite);
  return;
}
}
 static unsigned int mite_irq(struct mite_struct *mite ) 
{ 

  {
  return ((mite->pcidev)->irq);
}
}
extern int mite_setup2(struct mite_struct * , unsigned int  ) ;
extern void mite_unsetup(struct mite_struct * ) ;
extern struct mite_dma_descriptor_ring *mite_alloc_ring(struct mite_struct * ) ;
extern void mite_free_ring(struct mite_dma_descriptor_ring * ) ;
extern struct mite_channel *mite_request_channel_in_range(struct mite_struct * , struct mite_dma_descriptor_ring * ,
                                                          unsigned int  , unsigned int  ) ;
 static struct mite_channel *mite_request_channel(struct mite_struct *mite ,
                                                          struct mite_dma_descriptor_ring *ring ) 
{ struct mite_channel *tmp ;

  {
  tmp = mite_request_channel_in_range(mite, ring, 0U, (unsigned int )(mite->num_channels + -1));
  return (tmp);
}
}
extern void mite_release_channel(struct mite_channel * ) ;
extern int mite_sync_input_dma(struct mite_channel * , struct comedi_async * ) ;
extern int mite_buf_change(struct mite_dma_descriptor_ring * , struct comedi_async * ) ;
extern struct ni_gpct_device *ni_gpct_device_construct(struct comedi_device * , void (*)(struct ni_gpct * ,
                                                                                         unsigned int  ,
                                                                                         enum ni_gpct_register  ) ,
                                                       unsigned int (*)(struct ni_gpct * ,
                                                                        enum ni_gpct_register  ) ,
                                                       enum ni_gpct_variant  , unsigned int  ) ;
extern void ni_gpct_device_destroy(struct ni_gpct_device * ) ;
extern void ni_tio_init_counter(struct ni_gpct * ) ;
extern int ni_tio_rinsn(struct ni_gpct * , struct comedi_insn * , unsigned int * ) ;
extern int ni_tio_insn_config(struct ni_gpct * , struct comedi_insn * , unsigned int * ) ;
extern int ni_tio_winsn(struct ni_gpct * , struct comedi_insn * , unsigned int * ) ;
extern int ni_tio_cmd(struct ni_gpct * , struct comedi_async * ) ;
extern int ni_tio_cmdtest(struct ni_gpct * , struct comedi_cmd * ) ;
extern int ni_tio_cancel(struct ni_gpct * ) ;
extern void ni_tio_handle_interrupt(struct ni_gpct * , struct comedi_subdevice * ) ;
extern void ni_tio_set_mite_channel(struct ni_gpct * , struct mite_channel * ) ;
extern void ni_tio_acknowledge_and_confirm(struct ni_gpct * , int * , int * , int * ,
                                           int * ) ;
 static struct ni_gpct *subdev_to_counter(struct comedi_subdevice *s ) 
{ 

  {
  return ((struct ni_gpct *)s->private);
}
}
 static unsigned int IOConfigReg(unsigned int pfi_channel ) 
{ unsigned int reg ;
  long tmp ;

  {
  reg = pfi_channel / 2U + 78U;
  tmp = ldv__builtin_expect(reg > 97U, 0L);
  if (tmp != 0L) {
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/zakharov_benchmarks/bench/cpa/work/current--X--drivers/staging/comedi/drivers/ni_660x.ko--X--x1linux-3.8-rc1--X--32_7a--X--cpachecker/linux-3.8-rc1/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/staging/comedi/drivers/ni_660x.c.prepared"),
                         "i" (203), "i" (12UL));
    ldv_31056: ;
    goto ldv_31056;
  }
  return (reg);
}
}
 static unsigned int NI_660X_GPCT_SUBDEV(unsigned int index ) 
{ 

  {
  return (index + 2U);
}
}
static struct NI_660xRegisterData  const  registerData[98U]  = 
  {      {"G0 Interrupt Acknowledge", 4, 1, 1}, 
        {"G0 Status Register", 4, 0, 1}, 
        {"G1 Interrupt Acknowledge", 6, 1, 1}, 
        {"G1 Status Register", 6, 0, 1}, 
        {"G01 Status Register ", 8, 0, 1}, 
        {"G0 Command Register", 12, 1, 1}, 
        {"STC DIO Parallel Input", 14, 0, 1}, 
        {"G1 Command Register", 14, 1, 1}, 
        {"G0 HW Save Register", 16, 0, 2}, 
        {"G1 HW Save Register", 20, 0, 2}, 
        {"STC DIO Output", 20, 1, 1}, 
        {"STC DIO Control", 22, 1, 1}, 
        {"G0 SW Save Register", 24, 0, 2}, 
        {"G1 SW Save Register", 28, 0, 2}, 
        {"G0 Mode Register", 52, 1, 1}, 
        {"G01 Joint Status 1 Register", 54, 0, 1}, 
        {"G1 Mode Register", 54, 1, 1}, 
        {"STC DIO Serial Input", 56, 0, 1}, 
        {"G0 Load A Register", 56, 1, 2}, 
        {"G01 Joint Status 2 Register", 58, 0, 1}, 
        {"G0 Load B Register", 60, 1, 2}, 
        {"G1 Load A Register", 64, 1, 2}, 
        {"G1 Load B Register", 68, 1, 2}, 
        {"G0 Input Select Register", 72, 1, 1}, 
        {"G1 Input Select Register", 74, 1, 1}, 
        {"G0 Autoincrement Register", 136, 1, 1}, 
        {"G1 Autoincrement Register", 138, 1, 1}, 
        {"G01 Joint Reset Register", 144, 1, 1}, 
        {"G0 Interrupt Enable", 146, 1, 1}, 
        {"G1 Interrupt Enable", 150, 1, 1}, 
        {"G0 Counting Mode Register", 176, 1, 1}, 
        {"G1 Counting Mode Register", 178, 1, 1}, 
        {"G0 Second Gate Register", 180, 1, 1}, 
        {"G1 Second Gate Register", 182, 1, 1}, 
        {"G0 DMA Config Register", 184, 1, 1}, 
        {"G0 DMA Status Register", 184, 0, 1}, 
        {"G1 DMA Config Register", 186, 1, 1}, 
        {"G1 DMA Status Register", 186, 0, 1}, 
        {"G2 Interrupt Acknowledge", 260, 1, 1}, 
        {"G2 Status Register", 260, 0, 1}, 
        {"G3 Interrupt Acknowledge", 262, 1, 1}, 
        {"G3 Status Register", 262, 0, 1}, 
        {"G23 Status Register", 264, 0, 1}, 
        {"G2 Command Register", 268, 1, 1}, 
        {"G3 Command Register", 270, 1, 1}, 
        {"G2 HW Save Register", 272, 0, 2}, 
        {"G3 HW Save Register", 276, 0, 2}, 
        {"G2 SW Save Register", 280, 0, 2}, 
        {"G3 SW Save Register", 284, 0, 2}, 
        {"G2 Mode Register", 308, 1, 1}, 
        {"G23 Joint Status 1 Register", 310, 0, 1}, 
        {"G3 Mode Register", 310, 1, 1}, 
        {"G2 Load A Register", 312, 1, 2}, 
        {"G23 Joint Status 2 Register", 314, 0, 1}, 
        {"G2 Load B Register", 316, 1, 2}, 
        {"G3 Load A Register", 320, 1, 2}, 
        {"G3 Load B Register", 324, 1, 2}, 
        {"G2 Input Select Register", 328, 1, 1}, 
        {"G3 Input Select Register", 330, 1, 1}, 
        {"G2 Autoincrement Register", 392, 1, 1}, 
        {"G3 Autoincrement Register", 394, 1, 1}, 
        {"G23 Joint Reset Register", 400, 1, 1}, 
        {"G2 Interrupt Enable", 402, 1, 1}, 
        {"G3 Interrupt Enable", 406, 1, 1}, 
        {"G2 Counting Mode Register", 432, 1, 1}, 
        {"G3 Counting Mode Register", 434, 1, 1}, 
        {"G3 Second Gate Register", 438, 1, 1}, 
        {"G2 Second Gate Register", 436, 1, 1}, 
        {"G2 DMA Config Register", 440, 1, 1}, 
        {"G2 DMA Status Register", 440, 0, 1}, 
        {"G3 DMA Config Register", 442, 1, 1}, 
        {"G3 DMA Status Register", 442, 0, 1}, 
        {"32 bit Digital Input", 1044, 0, 2}, 
        {"32 bit Digital Output", 1296, 1, 2}, 
        {"Clock Config Register", 1852, 1, 2}, 
        {"Global Interrupt Status Register", 1876, 0, 2}, 
        {"DMA Configuration Register", 1900, 1, 2}, 
        {"Global Interrupt Config Register", 1904, 1, 2}, 
        {"IO Config Register 0-1", 1916, 2, 1}, 
        {"IO Config Register 2-3", 1918, 2, 1}, 
        {"IO Config Register 4-5", 1920, 2, 1}, 
        {"IO Config Register 6-7", 1922, 2, 1}, 
        {"IO Config Register 8-9", 1924, 2, 1}, 
        {"IO Config Register 10-11", 1926, 2, 1}, 
        {"IO Config Register 12-13", 1928, 2, 1}, 
        {"IO Config Register 14-15", 1930, 2, 1}, 
        {"IO Config Register 16-17", 1932, 2, 1}, 
        {"IO Config Register 18-19", 1934, 2, 1}, 
        {"IO Config Register 20-21", 1936, 2, 1}, 
        {"IO Config Register 22-23", 1938, 2, 1}, 
        {"IO Config Register 24-25", 1940, 2, 1}, 
        {"IO Config Register 26-27", 1942, 2, 1}, 
        {"IO Config Register 28-29", 1944, 2, 1}, 
        {"IO Config Register 30-31", 1946, 2, 1}, 
        {"IO Config Register 32-33", 1948, 2, 1}, 
        {"IO Config Register 34-35", 1950, 2, 1}, 
        {"IO Config Register 36-37", 1952, 2, 1}, 
        {"IO Config Register 38-39", 1954, 2, 1}};
 static unsigned int ioconfig_bitshift(unsigned int pfi_channel ) 
{ 

  {
  if ((int )pfi_channel & 1) {
    return (0U);
  } else {
    return (8U);
  }
}
}
 static unsigned int pfi_output_select_mask(unsigned int pfi_channel ) 
{ unsigned int tmp ;

  {
  tmp = ioconfig_bitshift(pfi_channel);
  return ((unsigned int )(3 << (int )tmp));
}
}
 static unsigned int pfi_output_select_bits(unsigned int pfi_channel , unsigned int output_select ) 
{ unsigned int tmp ;

  {
  tmp = ioconfig_bitshift(pfi_channel);
  return ((output_select & 3U) << (int )tmp);
}
}
 static unsigned int pfi_input_select_mask(unsigned int pfi_channel ) 
{ unsigned int tmp ;

  {
  tmp = ioconfig_bitshift(pfi_channel);
  return ((unsigned int )(7 << (int )(tmp + 4U)));
}
}
 static unsigned int pfi_input_select_bits(unsigned int pfi_channel , unsigned int input_select ) 
{ unsigned int tmp ;

  {
  tmp = ioconfig_bitshift(pfi_channel);
  return ((input_select & 7U) << (int )(tmp + 4U));
}
}
 static unsigned int dma_select_mask(unsigned int dma_channel ) 
{ long tmp ;

  {
  tmp = ldv__builtin_expect(dma_channel > 3U, 0L);
  if (tmp != 0L) {
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/zakharov_benchmarks/bench/cpa/work/current--X--drivers/staging/comedi/drivers/ni_660x.ko--X--x1linux-3.8-rc1--X--32_7a--X--cpachecker/linux-3.8-rc1/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/staging/comedi/drivers/ni_660x.c.prepared"),
                         "i" (383), "i" (12UL));
    ldv_31104: ;
    goto ldv_31104;
  }
  return ((unsigned int )(31 << (int )(dma_channel * 8U)));
}
}
 static unsigned int dma_selection_counter(unsigned int counter_index ) 
{ long tmp ;

  {
  tmp = ldv__builtin_expect(counter_index > 3U, 0L);
  if (tmp != 0L) {
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/zakharov_benchmarks/bench/cpa/work/current--X--drivers/staging/comedi/drivers/ni_660x.ko--X--x1linux-3.8-rc1--X--32_7a--X--cpachecker/linux-3.8-rc1/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/staging/comedi/drivers/ni_660x.c.prepared"),
                         "i" (392), "i" (12UL));
    ldv_31110: ;
    goto ldv_31110;
  }
  return (counter_index);
}
}
 static unsigned int dma_select_bits(unsigned int dma_channel , unsigned int selection ) 
{ long tmp ;
  unsigned int tmp___0 ;

  {
  tmp = ldv__builtin_expect(dma_channel > 3U, 0L);
  if (tmp != 0L) {
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/zakharov_benchmarks/bench/cpa/work/current--X--drivers/staging/comedi/drivers/ni_660x.ko--X--x1linux-3.8-rc1--X--32_7a--X--cpachecker/linux-3.8-rc1/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/staging/comedi/drivers/ni_660x.c.prepared"),
                         "i" (398), "i" (12UL));
    ldv_31115: ;
    goto ldv_31115;
  }
  tmp___0 = dma_select_mask(dma_channel);
  return ((selection << (int )(dma_channel * 8U)) & tmp___0);
}
}
 static unsigned int dma_reset_bit(unsigned int dma_channel ) 
{ long tmp ;

  {
  tmp = ldv__builtin_expect(dma_channel > 3U, 0L);
  if (tmp != 0L) {
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/zakharov_benchmarks/bench/cpa/work/current--X--drivers/staging/comedi/drivers/ni_660x.ko--X--x1linux-3.8-rc1--X--32_7a--X--cpachecker/linux-3.8-rc1/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/staging/comedi/drivers/ni_660x.c.prepared"),
                         "i" (404), "i" (12UL));
    ldv_31119: ;
    goto ldv_31119;
  }
  return ((unsigned int )(128 << (int )(dma_channel * 8U)));
}
}
static unsigned int const   GPCT_OFFSET[2U]  = {      0U,      2048U};
static struct ni_660x_board  const  ni_660x_boards[4U]  = {      {11360U, "PCI-6601", 1U}, 
        {4880U, "PCI-6602", 2U}, 
        {4960U, "PXI-6602", 2U}, 
        {11456U, "PXI-6608", 2U}};
 static unsigned int ni_660x_num_counters(struct comedi_device *dev ) 
{ struct ni_660x_board  const  *board ;
  void const   *tmp ;

  {
  tmp = comedi_board((struct comedi_device  const  *)dev);
  board = (struct ni_660x_board  const  *)tmp;
  return ((unsigned int )board->n_chips * 4U);
}
}
static enum NI_660x_Register ni_gpct_to_660x_register(enum ni_gpct_register reg ) 
{ enum NI_660x_Register ni_660x_register ;

  {
  switch ((unsigned int )reg) {
  case 0: 
  ni_660x_register = 25;
  goto ldv_31156;
  case 1: 
  ni_660x_register = 26;
  goto ldv_31156;
  case 2: 
  ni_660x_register = 59;
  goto ldv_31156;
  case 3: 
  ni_660x_register = 60;
  goto ldv_31156;
  case 4: 
  ni_660x_register = 5;
  goto ldv_31156;
  case 5: 
  ni_660x_register = 7;
  goto ldv_31156;
  case 6: 
  ni_660x_register = 43;
  goto ldv_31156;
  case 7: 
  ni_660x_register = 44;
  goto ldv_31156;
  case 8: 
  ni_660x_register = 8;
  goto ldv_31156;
  case 9: 
  ni_660x_register = 9;
  goto ldv_31156;
  case 10: 
  ni_660x_register = 45;
  goto ldv_31156;
  case 11: 
  ni_660x_register = 46;
  goto ldv_31156;
  case 12: 
  ni_660x_register = 12;
  goto ldv_31156;
  case 13: 
  ni_660x_register = 13;
  goto ldv_31156;
  case 14: 
  ni_660x_register = 47;
  goto ldv_31156;
  case 15: 
  ni_660x_register = 48;
  goto ldv_31156;
  case 16: 
  ni_660x_register = 14;
  goto ldv_31156;
  case 17: 
  ni_660x_register = 16;
  goto ldv_31156;
  case 18: 
  ni_660x_register = 49;
  goto ldv_31156;
  case 19: 
  ni_660x_register = 51;
  goto ldv_31156;
  case 20: 
  ni_660x_register = 18;
  goto ldv_31156;
  case 21: 
  ni_660x_register = 21;
  goto ldv_31156;
  case 22: 
  ni_660x_register = 52;
  goto ldv_31156;
  case 23: 
  ni_660x_register = 55;
  goto ldv_31156;
  case 24: 
  ni_660x_register = 20;
  goto ldv_31156;
  case 25: 
  ni_660x_register = 22;
  goto ldv_31156;
  case 26: 
  ni_660x_register = 54;
  goto ldv_31156;
  case 27: 
  ni_660x_register = 56;
  goto ldv_31156;
  case 28: 
  ni_660x_register = 23;
  goto ldv_31156;
  case 29: 
  ni_660x_register = 24;
  goto ldv_31156;
  case 30: 
  ni_660x_register = 57;
  goto ldv_31156;
  case 31: 
  ni_660x_register = 58;
  goto ldv_31156;
  case 40: 
  ni_660x_register = 4;
  goto ldv_31156;
  case 41: 
  ni_660x_register = 42;
  goto ldv_31156;
  case 42: 
  ni_660x_register = 27;
  goto ldv_31156;
  case 43: 
  ni_660x_register = 61;
  goto ldv_31156;
  case 44: 
  ni_660x_register = 15;
  goto ldv_31156;
  case 45: 
  ni_660x_register = 50;
  goto ldv_31156;
  case 46: 
  ni_660x_register = 19;
  goto ldv_31156;
  case 47: 
  ni_660x_register = 53;
  goto ldv_31156;
  case 32: 
  ni_660x_register = 30;
  goto ldv_31156;
  case 33: 
  ni_660x_register = 31;
  goto ldv_31156;
  case 34: 
  ni_660x_register = 64;
  goto ldv_31156;
  case 35: 
  ni_660x_register = 65;
  goto ldv_31156;
  case 36: 
  ni_660x_register = 32;
  goto ldv_31156;
  case 37: 
  ni_660x_register = 33;
  goto ldv_31156;
  case 38: 
  ni_660x_register = 67;
  goto ldv_31156;
  case 39: 
  ni_660x_register = 66;
  goto ldv_31156;
  case 48: 
  ni_660x_register = 34;
  goto ldv_31156;
  case 52: 
  ni_660x_register = 35;
  goto ldv_31156;
  case 49: 
  ni_660x_register = 36;
  goto ldv_31156;
  case 53: 
  ni_660x_register = 37;
  goto ldv_31156;
  case 50: 
  ni_660x_register = 68;
  goto ldv_31156;
  case 54: 
  ni_660x_register = 69;
  goto ldv_31156;
  case 51: 
  ni_660x_register = 70;
  goto ldv_31156;
  case 55: 
  ni_660x_register = 71;
  goto ldv_31156;
  case 58: 
  ni_660x_register = 0;
  goto ldv_31156;
  case 59: 
  ni_660x_register = 2;
  goto ldv_31156;
  case 60: 
  ni_660x_register = 38;
  goto ldv_31156;
  case 61: 
  ni_660x_register = 40;
  goto ldv_31156;
  case 62: 
  ni_660x_register = 1;
  goto ldv_31156;
  case 63: 
  ni_660x_register = 3;
  goto ldv_31156;
  case 64: 
  ni_660x_register = 39;
  goto ldv_31156;
  case 65: 
  ni_660x_register = 41;
  goto ldv_31156;
  case 66: 
  ni_660x_register = 28;
  goto ldv_31156;
  case 67: 
  ni_660x_register = 29;
  goto ldv_31156;
  case 68: 
  ni_660x_register = 62;
  goto ldv_31156;
  case 69: 
  ni_660x_register = 63;
  goto ldv_31156;
  default: 
  __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/zakharov_benchmarks/bench/cpa/work/current--X--drivers/staging/comedi/drivers/ni_660x.ko--X--x1linux-3.8-rc1--X--32_7a--X--cpachecker/linux-3.8-rc1/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/staging/comedi/drivers/ni_660x.c.prepared"),
                       "i" (690), "i" (12UL));
  ldv_31225: ;
  goto ldv_31225;
  return (0);
  }
  ldv_31156: ;
  return (ni_660x_register);
}
}
 static void ni_660x_write_register(struct comedi_device *dev , unsigned int chip_index ,
                                            unsigned int bits , enum NI_660x_Register reg ) 
{ struct ni_660x_private *devpriv ;
  void *write_address ;

  {
  devpriv = (struct ni_660x_private *)dev->private;
  write_address = (devpriv->mite)->daq_io_addr + ((unsigned long )GPCT_OFFSET[chip_index] + (unsigned long )registerData[(unsigned int )reg].offset);
  switch ((unsigned int )registerData[(unsigned int )reg].size) {
  case 1: 
  writew((int )((unsigned short )bits), (void volatile   *)write_address);
  goto ldv_31235;
  case 2: 
  writel(bits, (void volatile   *)write_address);
  goto ldv_31235;
  default: 
  __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/zakharov_benchmarks/bench/cpa/work/current--X--drivers/staging/comedi/drivers/ni_660x.ko--X--x1linux-3.8-rc1--X--32_7a--X--cpachecker/linux-3.8-rc1/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/staging/comedi/drivers/ni_660x.c.prepared"),
                       "i" (714), "i" (12UL));
  ldv_31238: ;
  goto ldv_31238;
  }
  ldv_31235: ;
  return;
}
}
 static unsigned int ni_660x_read_register(struct comedi_device *dev , unsigned int chip_index ,
                                                   enum NI_660x_Register reg ) 
{ struct ni_660x_private *devpriv ;
  void *read_address ;
  unsigned short tmp ;
  unsigned int tmp___0 ;

  {
  devpriv = (struct ni_660x_private *)dev->private;
  read_address = (devpriv->mite)->daq_io_addr + ((unsigned long )GPCT_OFFSET[chip_index] + (unsigned long )registerData[(unsigned int )reg].offset);
  switch ((unsigned int )registerData[(unsigned int )reg].size) {
  case 1: 
  tmp = readw((void const volatile   *)read_address);
  return ((unsigned int )tmp);
  case 2: 
  tmp___0 = readl((void const volatile   *)read_address);
  return (tmp___0);
  default: 
  __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/zakharov_benchmarks/bench/cpa/work/current--X--drivers/staging/comedi/drivers/ni_660x.ko--X--x1linux-3.8-rc1--X--32_7a--X--cpachecker/linux-3.8-rc1/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/staging/comedi/drivers/ni_660x.c.prepared"),
                       "i" (736), "i" (12UL));
  ldv_31249: ;
  goto ldv_31249;
  }
  return (0U);
}
}
static void ni_gpct_write_register(struct ni_gpct *counter , unsigned int bits , enum ni_gpct_register reg ) 
{ struct comedi_device *dev ;
  enum NI_660x_Register ni_660x_register ;
  enum NI_660x_Register tmp ;

  {
  dev = (counter->counter_dev)->dev;
  tmp = ni_gpct_to_660x_register(reg);
  ni_660x_register = tmp;
  ni_660x_write_register(dev, counter->chip_index, bits, ni_660x_register);
  return;
}
}
static unsigned int ni_gpct_read_register(struct ni_gpct *counter , enum ni_gpct_register reg ) 
{ struct comedi_device *dev ;
  enum NI_660x_Register ni_660x_register ;
  enum NI_660x_Register tmp ;
  unsigned int tmp___0 ;

  {
  dev = (counter->counter_dev)->dev;
  tmp = ni_gpct_to_660x_register(reg);
  ni_660x_register = tmp;
  tmp___0 = ni_660x_read_register(dev, counter->chip_index, ni_660x_register);
  return (tmp___0);
}
}
 static struct mite_dma_descriptor_ring *mite_ring(struct ni_660x_private *priv ,
                                                           struct ni_gpct *counter ) 
{ 

  {
  return (priv->mite_rings[counter->chip_index][counter->counter_index]);
}
}
 static void ni_660x_set_dma_channel(struct comedi_device *dev , unsigned int mite_channel ,
                                             struct ni_gpct *counter ) 
{ struct ni_660x_private *devpriv ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;
  unsigned int tmp___2 ;
  unsigned int tmp___3 ;

  {
  devpriv = (struct ni_660x_private *)dev->private;
  tmp = spinlock_check(& devpriv->soft_reg_copy_lock);
  flags = _raw_spin_lock_irqsave(tmp);
  tmp___0 = dma_select_mask(mite_channel);
  devpriv->dma_configuration_soft_copies[counter->chip_index] &= ~ tmp___0;
  tmp___1 = dma_selection_counter(counter->counter_index);
  tmp___2 = dma_select_bits(mite_channel, tmp___1);
  devpriv->dma_configuration_soft_copies[counter->chip_index] |= tmp___2;
  tmp___3 = dma_reset_bit(mite_channel);
  ni_660x_write_register(dev, counter->chip_index, devpriv->dma_configuration_soft_copies[counter->chip_index] | tmp___3,
                         76);
  __asm__  volatile   ("": : : "memory");
  spin_unlock_irqrestore(& devpriv->soft_reg_copy_lock, flags);
  return;
}
}
 static void ni_660x_unset_dma_channel(struct comedi_device *dev , unsigned int mite_channel ,
                                               struct ni_gpct *counter ) 
{ struct ni_660x_private *devpriv ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;

  {
  devpriv = (struct ni_660x_private *)dev->private;
  tmp = spinlock_check(& devpriv->soft_reg_copy_lock);
  flags = _raw_spin_lock_irqsave(tmp);
  tmp___0 = dma_select_mask(mite_channel);
  devpriv->dma_configuration_soft_copies[counter->chip_index] &= ~ tmp___0;
  tmp___1 = dma_select_bits(mite_channel, 31U);
  devpriv->dma_configuration_soft_copies[counter->chip_index] |= tmp___1;
  ni_660x_write_register(dev, counter->chip_index, devpriv->dma_configuration_soft_copies[counter->chip_index],
                         76);
  __asm__  volatile   ("": : : "memory");
  spin_unlock_irqrestore(& devpriv->soft_reg_copy_lock, flags);
  return;
}
}
static int ni_660x_request_mite_channel(struct comedi_device *dev , struct ni_gpct *counter ,
                                        enum comedi_io_direction direction ) 
{ struct ni_660x_private *devpriv ;
  unsigned long flags ;
  struct mite_channel *mite_chan ;
  raw_spinlock_t *tmp ;
  long tmp___0 ;
  struct mite_dma_descriptor_ring *tmp___1 ;

  {
  devpriv = (struct ni_660x_private *)dev->private;
  tmp = spinlock_check(& devpriv->mite_channel_lock);
  flags = _raw_spin_lock_irqsave(tmp);
  tmp___0 = ldv__builtin_expect((unsigned long )counter->mite_chan != (unsigned long )((struct mite_channel *)0),
                                0L);
  if (tmp___0 != 0L) {
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/zakharov_benchmarks/bench/cpa/work/current--X--drivers/staging/comedi/drivers/ni_660x.ko--X--x1linux-3.8-rc1--X--32_7a--X--cpachecker/linux-3.8-rc1/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/staging/comedi/drivers/ni_660x.c.prepared"),
                         "i" (817), "i" (12UL));
    ldv_31298: ;
    goto ldv_31298;
  }
  tmp___1 = mite_ring(devpriv, counter);
  mite_chan = mite_request_channel(devpriv->mite, tmp___1);
  if ((unsigned long )mite_chan == (unsigned long )((struct mite_channel *)0)) {
    spin_unlock_irqrestore(& devpriv->mite_channel_lock, flags);
    comedi_error((struct comedi_device  const  *)dev, "failed to reserve mite dma channel for counter.");
    return (-16);
  }
  mite_chan->dir = (int )direction;
  ni_tio_set_mite_channel(counter, mite_chan);
  ni_660x_set_dma_channel(dev, mite_chan->channel, counter);
  spin_unlock_irqrestore(& devpriv->mite_channel_lock, flags);
  return (0);
}
}
static void ni_660x_release_mite_channel(struct comedi_device *dev , struct ni_gpct *counter ) 
{ struct ni_660x_private *devpriv ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  struct mite_channel *mite_chan ;

  {
  devpriv = (struct ni_660x_private *)dev->private;
  tmp = spinlock_check(& devpriv->mite_channel_lock);
  flags = _raw_spin_lock_irqsave(tmp);
  if ((unsigned long )counter->mite_chan != (unsigned long )((struct mite_channel *)0)) {
    mite_chan = counter->mite_chan;
    ni_660x_unset_dma_channel(dev, mite_chan->channel, counter);
    ni_tio_set_mite_channel(counter, 0);
    mite_release_channel(mite_chan);
  }
  spin_unlock_irqrestore(& devpriv->mite_channel_lock, flags);
  return;
}
}
static int ni_660x_cmd(struct comedi_device *dev , struct comedi_subdevice *s ) 
{ int retval ;
  struct ni_gpct *counter ;
  struct ni_gpct *tmp ;

  {
  tmp = subdev_to_counter(s);
  counter = tmp;
  retval = ni_660x_request_mite_channel(dev, counter, 0);
  if (retval != 0) {
    comedi_error((struct comedi_device  const  *)dev, "no dma channel available for use by counter");
    return (retval);
  }
  ni_tio_acknowledge_and_confirm(counter, 0, 0, 0, 0);
  retval = ni_tio_cmd(counter, s->async);
  return (retval);
}
}
static int ni_660x_cmdtest(struct comedi_device *dev , struct comedi_subdevice *s ,
                           struct comedi_cmd *cmd ) 
{ struct ni_gpct *counter ;
  struct ni_gpct *tmp ;
  int tmp___0 ;

  {
  tmp = subdev_to_counter(s);
  counter = tmp;
  tmp___0 = ni_tio_cmdtest(counter, cmd);
  return (tmp___0);
}
}
static int ni_660x_cancel(struct comedi_device *dev , struct comedi_subdevice *s ) 
{ struct ni_gpct *counter ;
  struct ni_gpct *tmp ;
  int retval ;

  {
  tmp = subdev_to_counter(s);
  counter = tmp;
  retval = ni_tio_cancel(counter);
  ni_660x_release_mite_channel(dev, counter);
  return (retval);
}
}
static void set_tio_counterswap(struct comedi_device *dev , int chipset ) 
{ 

  {
  if (chipset != 0) {
    ni_660x_write_register(dev, (unsigned int )chipset, 2097152U, 74);
  } else {
    ni_660x_write_register(dev, (unsigned int )chipset, 0U, 74);
  }
  return;
}
}
static void ni_660x_handle_gpct_interrupt(struct comedi_device *dev , struct comedi_subdevice *s ) 
{ struct ni_gpct *tmp ;

  {
  tmp = subdev_to_counter(s);
  ni_tio_handle_interrupt(tmp, s);
  if ((s->async)->events != 0U) {
    if (((s->async)->events & 50U) != 0U) {
      ni_660x_cancel(dev, s);
    }
    comedi_event(dev, s);
  }
  return;
}
}
static irqreturn_t ni_660x_interrupt(int irq , void *d ) 
{ struct comedi_device *dev ;
  struct ni_660x_private *devpriv ;
  struct comedi_subdevice *s ;
  unsigned int i ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;

  {
  dev = (struct comedi_device *)d;
  devpriv = (struct ni_660x_private *)dev->private;
  if (dev->attached == 0) {
    return (0);
  }
  tmp = spinlock_check(& devpriv->interrupt_lock);
  flags = _raw_spin_lock_irqsave(tmp);
  __asm__  volatile   ("mfence": : : "memory");
  i = 0U;
  goto ldv_31348;
  ldv_31347: 
  tmp___0 = NI_660X_GPCT_SUBDEV(i);
  s = dev->subdevices + (unsigned long )tmp___0;
  ni_660x_handle_gpct_interrupt(dev, s);
  i ++;
  ldv_31348: 
  tmp___1 = ni_660x_num_counters(dev);
  if (tmp___1 > i) {
    goto ldv_31347;
  }
  ldv_31349: 
  spin_unlock_irqrestore(& devpriv->interrupt_lock, flags);
  return (1);
}
}
static int ni_660x_input_poll(struct comedi_device *dev , struct comedi_subdevice *s ) 
{ struct ni_660x_private *devpriv ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  struct ni_gpct *tmp___0 ;
  unsigned int tmp___1 ;

  {
  devpriv = (struct ni_660x_private *)dev->private;
  tmp = spinlock_check(& devpriv->interrupt_lock);
  flags = _raw_spin_lock_irqsave(tmp);
  tmp___0 = subdev_to_counter(s);
  mite_sync_input_dma(tmp___0->mite_chan, s->async);
  spin_unlock_irqrestore(& devpriv->interrupt_lock, flags);
  tmp___1 = comedi_buf_read_n_available(s->async);
  return ((int )tmp___1);
}
}
static int ni_660x_buf_change(struct comedi_device *dev , struct comedi_subdevice *s ,
                              unsigned long new_size ) 
{ struct ni_660x_private *devpriv ;
  int ret ;
  struct ni_gpct *tmp ;
  struct mite_dma_descriptor_ring *tmp___0 ;

  {
  devpriv = (struct ni_660x_private *)dev->private;
  tmp = subdev_to_counter(s);
  tmp___0 = mite_ring(devpriv, tmp);
  ret = mite_buf_change(tmp___0, s->async);
  if (ret < 0) {
    return (ret);
  }
  return (0);
}
}
static int ni_660x_allocate_private(struct comedi_device *dev ) 
{ struct ni_660x_private *devpriv ;
  unsigned int i ;
  void *tmp ;
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;

  {
  tmp = kzalloc(392UL, 208U);
  devpriv = (struct ni_660x_private *)tmp;
  if ((unsigned long )devpriv == (unsigned long )((struct ni_660x_private *)0)) {
    return (-12);
  }
  dev->private = (void *)devpriv;
  spinlock_check(& devpriv->mite_channel_lock);
  __raw_spin_lock_init(& devpriv->mite_channel_lock.ldv_5961.rlock, "&(&devpriv->mite_channel_lock)->rlock",
                       & __key);
  spinlock_check(& devpriv->interrupt_lock);
  __raw_spin_lock_init(& devpriv->interrupt_lock.ldv_5961.rlock, "&(&devpriv->interrupt_lock)->rlock",
                       & __key___0);
  spinlock_check(& devpriv->soft_reg_copy_lock);
  __raw_spin_lock_init(& devpriv->soft_reg_copy_lock.ldv_5961.rlock, "&(&devpriv->soft_reg_copy_lock)->rlock",
                       & __key___1);
  i = 0U;
  goto ldv_31375;
  ldv_31374: 
  devpriv->pfi_output_selects[i] = 1U;
  i ++;
  ldv_31375: ;
  if (i <= 39U) {
    goto ldv_31374;
  }
  ldv_31376: ;
  return (0);
}
}
static int ni_660x_alloc_mite_rings(struct comedi_device *dev ) 
{ struct ni_660x_board  const  *board ;
  void const   *tmp ;
  struct ni_660x_private *devpriv ;
  unsigned int i ;
  unsigned int j ;

  {
  tmp = comedi_board((struct comedi_device  const  *)dev);
  board = (struct ni_660x_board  const  *)tmp;
  devpriv = (struct ni_660x_private *)dev->private;
  i = 0U;
  goto ldv_31388;
  ldv_31387: 
  j = 0U;
  goto ldv_31385;
  ldv_31384: 
  devpriv->mite_rings[i][j] = mite_alloc_ring(devpriv->mite);
  if ((unsigned long )devpriv->mite_rings[i][j] == (unsigned long )((struct mite_dma_descriptor_ring *)0)) {
    return (-12);
  }
  j ++;
  ldv_31385: ;
  if (j <= 3U) {
    goto ldv_31384;
  }
  ldv_31386: 
  i ++;
  ldv_31388: ;
  if ((unsigned int )board->n_chips > i) {
    goto ldv_31387;
  }
  ldv_31389: ;
  return (0);
}
}
static void ni_660x_free_mite_rings(struct comedi_device *dev ) 
{ struct ni_660x_board  const  *board ;
  void const   *tmp ;
  struct ni_660x_private *devpriv ;
  unsigned int i ;
  unsigned int j ;

  {
  tmp = comedi_board((struct comedi_device  const  *)dev);
  board = (struct ni_660x_board  const  *)tmp;
  devpriv = (struct ni_660x_private *)dev->private;
  i = 0U;
  goto ldv_31401;
  ldv_31400: 
  j = 0U;
  goto ldv_31398;
  ldv_31397: 
  mite_free_ring(devpriv->mite_rings[i][j]);
  j ++;
  ldv_31398: ;
  if (j <= 3U) {
    goto ldv_31397;
  }
  ldv_31399: 
  i ++;
  ldv_31401: ;
  if ((unsigned int )board->n_chips > i) {
    goto ldv_31400;
  }
  ldv_31402: ;
  return;
}
}
static struct ni_660x_board  const  *ni_660x_find_boardinfo(struct pci_dev *pcidev ) 
{ unsigned int dev_id ;
  unsigned int n ;
  struct ni_660x_board  const  *board ;

  {
  dev_id = (unsigned int )pcidev->device;
  n = 0U;
  goto ldv_31412;
  ldv_31411: 
  board = (struct ni_660x_board  const  *)(& ni_660x_boards) + (unsigned long )n;
  if ((unsigned int )board->dev_id == dev_id) {
    return (board);
  }
  n ++;
  ldv_31412: ;
  if (n <= 3U) {
    goto ldv_31411;
  }
  ldv_31413: ;
  return (0);
}
}
static int ni_660x_GPCT_rinsn(struct comedi_device *dev , struct comedi_subdevice *s ,
                              struct comedi_insn *insn , unsigned int *data ) 
{ struct ni_gpct *tmp ;
  int tmp___0 ;

  {
  tmp = subdev_to_counter(s);
  tmp___0 = ni_tio_rinsn(tmp, insn, data);
  return (tmp___0);
}
}
static void init_tio_chip(struct comedi_device *dev , int chipset ) 
{ struct ni_660x_private *devpriv ;
  unsigned int i ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;

  {
  devpriv = (struct ni_660x_private *)dev->private;
  devpriv->dma_configuration_soft_copies[chipset] = 0U;
  i = 0U;
  goto ldv_31427;
  ldv_31426: 
  tmp = dma_select_bits(i, 31U);
  tmp___0 = dma_select_mask(i);
  devpriv->dma_configuration_soft_copies[chipset] |= tmp & tmp___0;
  i ++;
  ldv_31427: ;
  if (i <= 3U) {
    goto ldv_31426;
  }
  ldv_31428: 
  ni_660x_write_register(dev, (unsigned int )chipset, devpriv->dma_configuration_soft_copies[chipset],
                         76);
  i = 0U;
  goto ldv_31430;
  ldv_31429: 
  tmp___1 = IOConfigReg(i);
  ni_660x_write_register(dev, (unsigned int )chipset, 0U, (enum NI_660x_Register )tmp___1);
  i ++;
  ldv_31430: ;
  if (i <= 39U) {
    goto ldv_31429;
  }
  ldv_31431: ;
  return;
}
}
static int ni_660x_GPCT_insn_config(struct comedi_device *dev , struct comedi_subdevice *s ,
                                    struct comedi_insn *insn , unsigned int *data ) 
{ struct ni_gpct *tmp ;
  int tmp___0 ;

  {
  tmp = subdev_to_counter(s);
  tmp___0 = ni_tio_insn_config(tmp, insn, data);
  return (tmp___0);
}
}
static int ni_660x_GPCT_winsn(struct comedi_device *dev , struct comedi_subdevice *s ,
                              struct comedi_insn *insn , unsigned int *data ) 
{ struct ni_gpct *tmp ;
  int tmp___0 ;

  {
  tmp = subdev_to_counter(s);
  tmp___0 = ni_tio_winsn(tmp, insn, data);
  return (tmp___0);
}
}
static int ni_660x_dio_insn_bits(struct comedi_device *dev , struct comedi_subdevice *s ,
                                 struct comedi_insn *insn , unsigned int *data ) 
{ unsigned int base_bitfield_channel ;
  unsigned int tmp ;

  {
  base_bitfield_channel = insn->chanspec & 65535U;
  if (*data != 0U) {
    s->state &= ~ (*data << (int )base_bitfield_channel);
    s->state |= (*data & *(data + 1UL)) << (int )base_bitfield_channel;
    ni_660x_write_register(dev, 0U, s->state, 73);
  }
  tmp = ni_660x_read_register(dev, 0U, 72);
  *(data + 1UL) = tmp >> (int )base_bitfield_channel;
  return ((int )insn->n);
}
}
static void ni_660x_select_pfi_output(struct comedi_device *dev , unsigned int pfi_channel ,
                                      unsigned int output_select ) 
{ struct ni_660x_board  const  *board ;
  void const   *tmp ;
  unsigned int counter_4_7_first_pfi ;
  unsigned int counter_4_7_last_pfi ;
  unsigned int active_chipset ;
  unsigned int idle_chipset ;
  unsigned int active_bits ;
  unsigned int idle_bits ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;
  unsigned int tmp___2 ;
  unsigned int tmp___3 ;
  unsigned int tmp___4 ;
  unsigned int tmp___5 ;
  unsigned int tmp___6 ;
  unsigned int tmp___7 ;

  {
  tmp = comedi_board((struct comedi_device  const  *)dev);
  board = (struct ni_660x_board  const  *)tmp;
  counter_4_7_first_pfi = 8U;
  counter_4_7_last_pfi = 23U;
  active_chipset = 0U;
  idle_chipset = 0U;
  if ((unsigned int )board->n_chips > 1U) {
    if ((output_select == 1U && pfi_channel >= counter_4_7_first_pfi) && pfi_channel <= counter_4_7_last_pfi) {
      active_chipset = 1U;
      idle_chipset = 0U;
    } else {
      active_chipset = 0U;
      idle_chipset = 1U;
    }
  }
  if (idle_chipset != active_chipset) {
    tmp___0 = IOConfigReg(pfi_channel);
    idle_bits = ni_660x_read_register(dev, idle_chipset, (enum NI_660x_Register )tmp___0);
    tmp___1 = pfi_output_select_mask(pfi_channel);
    idle_bits = ~ tmp___1 & idle_bits;
    tmp___2 = pfi_output_select_bits(pfi_channel, 0U);
    idle_bits = tmp___2 | idle_bits;
    tmp___3 = IOConfigReg(pfi_channel);
    ni_660x_write_register(dev, idle_chipset, idle_bits, (enum NI_660x_Register )tmp___3);
  }
  tmp___4 = IOConfigReg(pfi_channel);
  active_bits = ni_660x_read_register(dev, active_chipset, (enum NI_660x_Register )tmp___4);
  tmp___5 = pfi_output_select_mask(pfi_channel);
  active_bits = ~ tmp___5 & active_bits;
  tmp___6 = pfi_output_select_bits(pfi_channel, output_select);
  active_bits = tmp___6 | active_bits;
  tmp___7 = IOConfigReg(pfi_channel);
  ni_660x_write_register(dev, active_chipset, active_bits, (enum NI_660x_Register )tmp___7);
  return;
}
}
static int ni_660x_set_pfi_routing(struct comedi_device *dev , unsigned int chan ,
                                   unsigned int source ) 
{ struct ni_660x_private *devpriv ;

  {
  devpriv = (struct ni_660x_private *)dev->private;
  if (source > 3U) {
    return (-22);
  }
  if (source == 0U) {
    return (-22);
  }
  if (chan <= 7U) {
    if (source == 1U) {
      return (-22);
    } else
    if (chan > 31U) {
      if (source == 2U) {
        return (-22);
      }
    }
  }
  devpriv->pfi_output_selects[chan] = (unsigned short )source;
  if ((int )(devpriv->pfi_direction_bits >> (int )chan) & 1) {
    ni_660x_select_pfi_output(dev, chan, (unsigned int )devpriv->pfi_output_selects[chan]);
  }
  return (0);
}
}
static int ni_660x_dio_insn_config(struct comedi_device *dev , struct comedi_subdevice *s ,
                                   struct comedi_insn *insn , unsigned int *data ) 
{ struct ni_660x_private *devpriv ;
  unsigned int chan ;
  uint64_t bit ;
  unsigned int val ;
  int ret ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;
  unsigned int tmp___2 ;

  {
  devpriv = (struct ni_660x_private *)dev->private;
  chan = insn->chanspec & 65535U;
  bit = 1ULL << (int )chan;
  switch (*data) {
  case 1: 
  devpriv->pfi_direction_bits |= bit;
  ni_660x_select_pfi_output(dev, chan, (unsigned int )devpriv->pfi_output_selects[chan]);
  goto ldv_31481;
  case 0: 
  devpriv->pfi_direction_bits &= ~ bit;
  ni_660x_select_pfi_output(dev, chan, 0U);
  goto ldv_31481;
  case 28: 
  *(data + 1UL) = (devpriv->pfi_direction_bits & bit) != 0ULL;
  goto ldv_31481;
  case 4099: 
  ret = ni_660x_set_pfi_routing(dev, chan, *(data + 1UL));
  if (ret != 0) {
    return (ret);
  }
  goto ldv_31481;
  case 4109: 
  *(data + 1UL) = (unsigned int )devpriv->pfi_output_selects[chan];
  goto ldv_31481;
  case 24: 
  tmp = IOConfigReg(chan);
  val = ni_660x_read_register(dev, 0U, (enum NI_660x_Register )tmp);
  tmp___0 = pfi_input_select_mask(chan);
  val = ~ tmp___0 & val;
  tmp___1 = pfi_input_select_bits(chan, *(data + 1UL));
  val = tmp___1 | val;
  tmp___2 = IOConfigReg(chan);
  ni_660x_write_register(dev, 0U, val, (enum NI_660x_Register )tmp___2);
  goto ldv_31481;
  default: ;
  return (-22);
  }
  ldv_31481: ;
  return ((int )insn->n);
}
}
static int ni_660x_auto_attach(struct comedi_device *dev , unsigned long context_unused ) 
{ struct pci_dev *pcidev ;
  struct pci_dev *tmp ;
  struct ni_660x_board  const  *board ;
  struct ni_660x_private *devpriv ;
  struct comedi_subdevice *s ;
  int ret ;
  unsigned int i ;
  unsigned int global_interrupt_config_bits ;
  struct ni_660x_board  const  *tmp___0 ;
  void const   *tmp___1 ;
  unsigned int tmp___2 ;
  unsigned int tmp___3 ;
  unsigned int tmp___4 ;
  unsigned int tmp___5 ;
  unsigned int tmp___6 ;

  {
  tmp = comedi_to_pci_dev(dev);
  pcidev = tmp;
  ret = ni_660x_allocate_private(dev);
  if (ret < 0) {
    return (ret);
  }
  devpriv = (struct ni_660x_private *)dev->private;
  tmp___0 = ni_660x_find_boardinfo(pcidev);
  dev->board_ptr = (void const   *)tmp___0;
  if ((unsigned long )dev->board_ptr == (unsigned long )((void const   *)0)) {
    return (-19);
  }
  tmp___1 = comedi_board((struct comedi_device  const  *)dev);
  board = (struct ni_660x_board  const  *)tmp___1;
  devpriv->mite = mite_alloc(pcidev);
  if ((unsigned long )devpriv->mite == (unsigned long )((struct mite_struct *)0)) {
    return (-12);
  }
  dev->board_name = board->name;
  ret = mite_setup2(devpriv->mite, 1U);
  if (ret < 0) {
    dev_warn((struct device  const  *)dev->class_dev, "error setting up mite\n");
    return (ret);
  }
  ret = ni_660x_alloc_mite_rings(dev);
  if (ret < 0) {
    return (ret);
  }
  ret = comedi_alloc_subdevices(dev, 10);
  if (ret != 0) {
    return (ret);
  }
  s = dev->subdevices;
  s->type = 0;
  s = dev->subdevices + 1UL;
  s->type = 5;
  s->subdev_flags = 196608;
  s->n_chan = 40;
  s->maxdata = 1U;
  s->range_table = & range_unipolar5;
  s->insn_bits = & ni_660x_dio_insn_bits;
  s->insn_config = & ni_660x_dio_insn_config;
  s->io_bits = 0U;
  ni_660x_write_register(dev, 0U, 0U, 11);
  tmp___2 = ni_660x_num_counters(dev);
  devpriv->counter_dev = ni_gpct_device_construct(dev, & ni_gpct_write_register, & ni_gpct_read_register,
                                                  2, tmp___2);
  if ((unsigned long )devpriv->counter_dev == (unsigned long )((struct ni_gpct_device *)0)) {
    return (-12);
  }
  i = 0U;
  goto ldv_31500;
  ldv_31499: 
  tmp___3 = NI_660X_GPCT_SUBDEV(i);
  s = dev->subdevices + (unsigned long )tmp___3;
  tmp___4 = ni_660x_num_counters(dev);
  if (tmp___4 > i) {
    s->type = 6;
    s->subdev_flags = 268664832;
    s->n_chan = 3;
    s->maxdata = 4294967295U;
    s->insn_read = & ni_660x_GPCT_rinsn;
    s->insn_write = & ni_660x_GPCT_winsn;
    s->insn_config = & ni_660x_GPCT_insn_config;
    s->do_cmd = & ni_660x_cmd;
    s->len_chanlist = 1;
    s->do_cmdtest = & ni_660x_cmdtest;
    s->cancel = & ni_660x_cancel;
    s->poll = & ni_660x_input_poll;
    s->async_dma_dir = 0;
    s->buf_change = & ni_660x_buf_change;
    s->private = (void *)(devpriv->counter_dev)->counters + (unsigned long )i;
    ((devpriv->counter_dev)->counters + (unsigned long )i)->chip_index = i / 4U;
    ((devpriv->counter_dev)->counters + (unsigned long )i)->counter_index = i & 3U;
  } else {
    s->type = 0;
  }
  i ++;
  ldv_31500: ;
  if (i <= 7U) {
    goto ldv_31499;
  }
  ldv_31501: 
  i = 0U;
  goto ldv_31503;
  ldv_31502: 
  init_tio_chip(dev, (int )i);
  i ++;
  ldv_31503: ;
  if ((unsigned int )board->n_chips > i) {
    goto ldv_31502;
  }
  ldv_31504: 
  i = 0U;
  goto ldv_31506;
  ldv_31505: 
  ni_tio_init_counter((devpriv->counter_dev)->counters + (unsigned long )i);
  i ++;
  ldv_31506: 
  tmp___5 = ni_660x_num_counters(dev);
  if (tmp___5 > i) {
    goto ldv_31505;
  }
  ldv_31507: 
  i = 0U;
  goto ldv_31509;
  ldv_31508: ;
  if (i <= 7U) {
    ni_660x_set_pfi_routing(dev, i, 2U);
  } else {
    ni_660x_set_pfi_routing(dev, i, 1U);
  }
  ni_660x_select_pfi_output(dev, i, 0U);
  i ++;
  ldv_31509: ;
  if (i <= 39U) {
    goto ldv_31508;
  }
  ldv_31510: 
  i = 0U;
  goto ldv_31512;
  ldv_31511: 
  set_tio_counterswap(dev, (int )i);
  i ++;
  ldv_31512: ;
  if ((unsigned int )board->n_chips > i) {
    goto ldv_31511;
  }
  ldv_31513: 
  tmp___6 = mite_irq(devpriv->mite);
  ret = request_irq(tmp___6, & ni_660x_interrupt, 128UL, "ni_660x", (void *)dev);
  if (ret < 0) {
    dev_warn((struct device  const  *)dev->class_dev, " irq not available\n");
    return (ret);
  }
  dev->irq = mite_irq(devpriv->mite);
  global_interrupt_config_bits = 2147483648U;
  if ((unsigned int )board->n_chips > 1U) {
    global_interrupt_config_bits |= 536870912U;
  }
  ni_660x_write_register(dev, 0U, global_interrupt_config_bits, 77);
  _dev_info((struct device  const  *)dev->class_dev, "ni_660x: %s attached\n", dev->board_name);
  return (0);
}
}
static void ni_660x_detach(struct comedi_device *dev ) 
{ struct ni_660x_private *devpriv ;

  {
  devpriv = (struct ni_660x_private *)dev->private;
  if (dev->irq != 0U) {
    free_irq(dev->irq, (void *)dev);
  }
  if ((unsigned long )devpriv != (unsigned long )((struct ni_660x_private *)0)) {
    if ((unsigned long )devpriv->counter_dev != (unsigned long )((struct ni_gpct_device *)0)) {
      ni_gpct_device_destroy(devpriv->counter_dev);
    }
    if ((unsigned long )devpriv->mite != (unsigned long )((struct mite_struct *)0)) {
      ni_660x_free_mite_rings(dev);
      mite_unsetup(devpriv->mite);
      mite_free(devpriv->mite);
    }
  }
  return;
}
}
static struct comedi_driver ni_660x_driver  = 
     {0, "ni_660x", & __this_module, 0, & ni_660x_detach, & ni_660x_auto_attach, 0U,
    0, 0};
static int ni_660x_pci_probe(struct pci_dev *dev , struct pci_device_id  const  *ent ) 
{ int tmp ;

  {
  tmp = comedi_pci_auto_config(dev, & ni_660x_driver);
  return (tmp);
}
}
static void ni_660x_pci_remove(struct pci_dev *dev ) 
{ 

  {
  comedi_pci_auto_unconfig(dev);
  return;
}
}
static struct pci_device_id  const  ni_660x_pci_table[5U]  = {      {4243U, 11360U, 4294967295U, 4294967295U, 0U, 0U, 0UL}, 
        {4243U, 4880U, 4294967295U, 4294967295U, 0U, 0U, 0UL}, 
        {4243U, 4960U, 4294967295U, 4294967295U, 0U, 0U, 0UL}, 
        {4243U, 11456U, 4294967295U, 4294967295U, 0U, 0U, 0UL}, 
        {0U, 0U, 0U, 0U, 0U, 0U, 0UL}};
struct pci_device_id  const  __mod_pci_device_table  ;
static struct pci_driver ni_660x_pci_driver  = 
     {{0, 0}, "ni_660x", (struct pci_device_id  const  *)(& ni_660x_pci_table), & ni_660x_pci_probe,
    & ni_660x_pci_remove, 0, 0, 0, 0, 0, 0, 0, {0, 0, 0, 0, (_Bool)0, 0, 0, 0, 0,
                                                0, 0, 0, 0, 0, 0}, {{{{{{0U}}, 0U,
                                                                       0U, 0, {0,
                                                                               {0,
                                                                                0},
                                                                               0,
                                                                               0,
                                                                               0UL}}}},
                                                                    {0, 0}}};
static int ni_660x_driver_init(void) 
{ int tmp ;

  {
  tmp = comedi_pci_driver_register(& ni_660x_driver, & ni_660x_pci_driver);
  return (tmp);
}
}
static void ni_660x_driver_exit(void) 
{ 

  {
  comedi_pci_driver_unregister(& ni_660x_driver, & ni_660x_pci_driver);
  return;
}
}
extern int ldv_ni_660x_driver_probe_2(void) ;
struct pci_device_id *ldvarg0  ;
extern int ldv_ni_660x_driver_release_2(void) ;
unsigned long ldvarg1  ;
int ldv_retval_0  ;
extern int ldv_ni_660x_driver_close_2(void) ;
struct comedi_device *ni_660x_driver_group0  ;
extern int ldv_ni_660x_driver_attach_2(void) ;
struct pci_dev *ni_660x_pci_driver_group0  ;
int ldv_retval_1  ;
void ldv_initialize(void) ;
void ldv_check_final_state(void) ;
extern int ldv_ni_660x_driver_open_2(void) ;
int main(void) 
{ int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
  ldv_initialize();
  ldv_state_variable_1 = 0;
  ref_cnt = 0;
  ldv_state_variable_0 = 1;
  ldv_state_variable_2 = 0;
  ldv_31600: 
  tmp = __VERIFIER_nondet_int();
  switch (tmp) {
  case 0: ;
  if (ldv_state_variable_1 != 0) {
    tmp___0 = __VERIFIER_nondet_int();
    switch (tmp___0) {
    case 0: ;
    if (ldv_state_variable_1 == 1) {
      ldv_retval_0 = ni_660x_pci_probe(ni_660x_pci_driver_group0, (struct pci_device_id  const  *)ldvarg0);
      if (ldv_retval_0 == 0) {
        ldv_state_variable_1 = 2;
        ref_cnt ++;
      }
    }
    goto ldv_31579;
    case 1: ;
    if (ldv_state_variable_1 == 2) {
      ni_660x_pci_remove(ni_660x_pci_driver_group0);
      ldv_state_variable_1 = 1;
      ref_cnt --;
    }
    goto ldv_31579;
    default: ;
    goto ldv_31579;
    }
    ldv_31579: ;
  }
  goto ldv_31582;
  case 1: ;
  if (ldv_state_variable_0 != 0) {
    tmp___1 = __VERIFIER_nondet_int();
    switch (tmp___1) {
    case 0: ;
    if (ldv_state_variable_0 == 3 && ref_cnt == 0) {
      ni_660x_driver_exit();
      ldv_state_variable_0 = 2;
      goto ldv_final;
    }
    goto ldv_31586;
    case 1: ;
    if (ldv_state_variable_0 == 1) {
      ldv_retval_1 = ni_660x_driver_init();
      if (ldv_retval_1 == 0) {
        ldv_state_variable_0 = 3;
        ldv_state_variable_2 = 1;
        ldv_state_variable_1 = 1;
      }
      if (ldv_retval_1 != 0) {
        ldv_state_variable_0 = 2;
        goto ldv_final;
      }
    }
    goto ldv_31586;
    default: ;
    goto ldv_31586;
    }
    ldv_31586: ;
  }
  goto ldv_31582;
  case 2: ;
  if (ldv_state_variable_2 != 0) {
    tmp___2 = __VERIFIER_nondet_int();
    switch (tmp___2) {
    case 0: ;
    if (ldv_state_variable_2 == 4) {
      ni_660x_detach(ni_660x_driver_group0);
      ldv_state_variable_2 = 2;
    }
    if (ldv_state_variable_2 == 3) {
      ni_660x_detach(ni_660x_driver_group0);
      ldv_state_variable_2 = 2;
    }
    goto ldv_31591;
    case 1: ;
    if (ldv_state_variable_2 == 4) {
      ni_660x_auto_attach(ni_660x_driver_group0, ldvarg1);
      ldv_state_variable_2 = 4;
    }
    if (ldv_state_variable_2 == 1) {
      ni_660x_auto_attach(ni_660x_driver_group0, ldvarg1);
      ldv_state_variable_2 = 1;
    }
    if (ldv_state_variable_2 == 3) {
      ni_660x_auto_attach(ni_660x_driver_group0, ldvarg1);
      ldv_state_variable_2 = 3;
    }
    if (ldv_state_variable_2 == 2) {
      ni_660x_auto_attach(ni_660x_driver_group0, ldvarg1);
      ldv_state_variable_2 = 2;
    }
    goto ldv_31591;
    case 2: ;
    if (ldv_state_variable_2 == 2) {
      ldv_ni_660x_driver_release_2();
      ldv_state_variable_2 = 1;
      ref_cnt --;
    }
    goto ldv_31591;
    case 3: ;
    if (ldv_state_variable_2 == 3) {
      ldv_ni_660x_driver_open_2();
      ldv_state_variable_2 = 4;
    }
    goto ldv_31591;
    case 4: ;
    if (ldv_state_variable_2 == 4) {
      ldv_ni_660x_driver_close_2();
      ldv_state_variable_2 = 3;
    }
    goto ldv_31591;
    case 5: ;
    if (ldv_state_variable_2 == 2) {
      ldv_ni_660x_driver_attach_2();
      ldv_state_variable_2 = 3;
    }
    goto ldv_31591;
    case 6: ;
    if (ldv_state_variable_2 == 1) {
      ldv_ni_660x_driver_probe_2();
      ldv_state_variable_2 = 2;
      ref_cnt ++;
    }
    goto ldv_31591;
    default: ;
    goto ldv_31591;
    }
    ldv_31591: ;
  }
  goto ldv_31582;
  default: ;
  goto ldv_31582;
  }
  ldv_31582: ;
  goto ldv_31600;
  ldv_final: 
  ldv_check_final_state();
  return;
}
}
void ldv_mutex_lock_1(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_lock(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_2(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_lock(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_3(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
int ldv_mutex_trylock_4(struct mutex *ldv_func_arg1 ) 
{ ldv_func_ret_type___2 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
  tmp = mutex_trylock(ldv_func_arg1);
  ldv_func_res = tmp;
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
  return (tmp___0);
  return (ldv_func_res);
}
}
void ldv_mutex_unlock_5(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_6(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_7(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
 static void ldv_error(void)  __attribute__((__no_instrument_function__)) ;
 static void ldv_error(void)  __attribute__((__no_instrument_function__)) ;
 static void ldv_error(void) 
{ 

  {
  ERROR: __VERIFIER_error(); 
  goto ERROR;
}
}
long ldv__builtin_expect(long exp , long c ) 
{ 

  {
  return (exp);
}
}
void ldv__builtin_trap(void) 
{ 

  {
  ldv_error();
  return;
}
}
static int ldv_mutex_cred_guard_mutex_of_signal_struct  ;
int ldv_mutex_lock_interruptible_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ int nondetermined ;

  {
  if (! (ldv_mutex_cred_guard_mutex_of_signal_struct == 1)) {
    ldv_error();
  }
  nondetermined = __VERIFIER_nondet_int();
  if (nondetermined) {
    ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
    return (0);
  } else {
    return (-4);
  }
}
}
int ldv_mutex_lock_killable_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ int nondetermined ;

  {
  if (! (ldv_mutex_cred_guard_mutex_of_signal_struct == 1)) {
    ldv_error();
  }
  nondetermined = __VERIFIER_nondet_int();
  if (nondetermined) {
    ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
    return (0);
  } else {
    return (-4);
  }
}
}
void ldv_mutex_lock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 

  {
  if (! (ldv_mutex_cred_guard_mutex_of_signal_struct == 1)) {
    ldv_error();
  }
  ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
  return;
}
}
int ldv_mutex_trylock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ int is_mutex_held_by_another_thread ;

  {
  if (! (ldv_mutex_cred_guard_mutex_of_signal_struct == 1)) {
    ldv_error();
  }
  is_mutex_held_by_another_thread = __VERIFIER_nondet_int();
  if (is_mutex_held_by_another_thread) {
    return (0);
  } else {
    ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
    return (1);
  }
}
}
int ldv_atomic_dec_and_mutex_lock_cred_guard_mutex_of_signal_struct(atomic_t *cnt ,
                                                                    struct mutex *lock ) 
{ int atomic_value_after_dec ;

  {
  if (! (ldv_mutex_cred_guard_mutex_of_signal_struct == 1)) {
    ldv_error();
  }
  atomic_value_after_dec = __VERIFIER_nondet_int();
  if (atomic_value_after_dec == 0) {
    ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
    return (1);
  }
  return (0);
}
}
int ldv_mutex_is_locked_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ int nondetermined ;

  {
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {
    nondetermined = __VERIFIER_nondet_int();
    if (nondetermined) {
      return (0);
    } else {
      return (1);
    }
  } else {
    return (1);
  }
}
}
void ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 

  {
  if (! (ldv_mutex_cred_guard_mutex_of_signal_struct == 2)) {
    ldv_error();
  }
  ldv_mutex_cred_guard_mutex_of_signal_struct = 1;
  return;
}
}
static int ldv_mutex_lock  ;
int ldv_mutex_lock_interruptible_lock(struct mutex *lock ) 
{ int nondetermined ;

  {
  if (! (ldv_mutex_lock == 1)) {
    ldv_error();
  }
  nondetermined = __VERIFIER_nondet_int();
  if (nondetermined) {
    ldv_mutex_lock = 2;
    return (0);
  } else {
    return (-4);
  }
}
}
int ldv_mutex_lock_killable_lock(struct mutex *lock ) 
{ int nondetermined ;

  {
  if (! (ldv_mutex_lock == 1)) {
    ldv_error();
  }
  nondetermined = __VERIFIER_nondet_int();
  if (nondetermined) {
    ldv_mutex_lock = 2;
    return (0);
  } else {
    return (-4);
  }
}
}
void ldv_mutex_lock_lock(struct mutex *lock ) 
{ 

  {
  if (! (ldv_mutex_lock == 1)) {
    ldv_error();
  }
  ldv_mutex_lock = 2;
  return;
}
}
int ldv_mutex_trylock_lock(struct mutex *lock ) 
{ int is_mutex_held_by_another_thread ;

  {
  if (! (ldv_mutex_lock == 1)) {
    ldv_error();
  }
  is_mutex_held_by_another_thread = __VERIFIER_nondet_int();
  if (is_mutex_held_by_another_thread) {
    return (0);
  } else {
    ldv_mutex_lock = 2;
    return (1);
  }
}
}
int ldv_atomic_dec_and_mutex_lock_lock(atomic_t *cnt , struct mutex *lock ) 
{ int atomic_value_after_dec ;

  {
  if (! (ldv_mutex_lock == 1)) {
    ldv_error();
  }
  atomic_value_after_dec = __VERIFIER_nondet_int();
  if (atomic_value_after_dec == 0) {
    ldv_mutex_lock = 2;
    return (1);
  }
  return (0);
}
}
int ldv_mutex_is_locked_lock(struct mutex *lock ) 
{ int nondetermined ;

  {
  if (ldv_mutex_lock == 1) {
    nondetermined = __VERIFIER_nondet_int();
    if (nondetermined) {
      return (0);
    } else {
      return (1);
    }
  } else {
    return (1);
  }
}
}
void ldv_mutex_unlock_lock(struct mutex *lock ) 
{ 

  {
  if (! (ldv_mutex_lock == 2)) {
    ldv_error();
  }
  ldv_mutex_lock = 1;
  return;
}
}
static int ldv_mutex_mutex_of_device  ;
int ldv_mutex_lock_interruptible_mutex_of_device(struct mutex *lock ) 
{ int nondetermined ;

  {
  if (! (ldv_mutex_mutex_of_device == 1)) {
    ldv_error();
  }
  nondetermined = __VERIFIER_nondet_int();
  if (nondetermined) {
    ldv_mutex_mutex_of_device = 2;
    return (0);
  } else {
    return (-4);
  }
}
}
int ldv_mutex_lock_killable_mutex_of_device(struct mutex *lock ) 
{ int nondetermined ;

  {
  if (! (ldv_mutex_mutex_of_device == 1)) {
    ldv_error();
  }
  nondetermined = __VERIFIER_nondet_int();
  if (nondetermined) {
    ldv_mutex_mutex_of_device = 2;
    return (0);
  } else {
    return (-4);
  }
}
}
void ldv_mutex_lock_mutex_of_device(struct mutex *lock ) 
{ 

  {
  if (! (ldv_mutex_mutex_of_device == 1)) {
    ldv_error();
  }
  ldv_mutex_mutex_of_device = 2;
  return;
}
}
int ldv_mutex_trylock_mutex_of_device(struct mutex *lock ) 
{ int is_mutex_held_by_another_thread ;

  {
  if (! (ldv_mutex_mutex_of_device == 1)) {
    ldv_error();
  }
  is_mutex_held_by_another_thread = __VERIFIER_nondet_int();
  if (is_mutex_held_by_another_thread) {
    return (0);
  } else {
    ldv_mutex_mutex_of_device = 2;
    return (1);
  }
}
}
int ldv_atomic_dec_and_mutex_lock_mutex_of_device(atomic_t *cnt , struct mutex *lock ) 
{ int atomic_value_after_dec ;

  {
  if (! (ldv_mutex_mutex_of_device == 1)) {
    ldv_error();
  }
  atomic_value_after_dec = __VERIFIER_nondet_int();
  if (atomic_value_after_dec == 0) {
    ldv_mutex_mutex_of_device = 2;
    return (1);
  }
  return (0);
}
}
int ldv_mutex_is_locked_mutex_of_device(struct mutex *lock ) 
{ int nondetermined ;

  {
  if (ldv_mutex_mutex_of_device == 1) {
    nondetermined = __VERIFIER_nondet_int();
    if (nondetermined) {
      return (0);
    } else {
      return (1);
    }
  } else {
    return (1);
  }
}
}
void ldv_mutex_unlock_mutex_of_device(struct mutex *lock ) 
{ 

  {
  if (! (ldv_mutex_mutex_of_device == 2)) {
    ldv_error();
  }
  ldv_mutex_mutex_of_device = 1;
  return;
}
}
void ldv_initialize(void) 
{ 

  {
  ldv_mutex_cred_guard_mutex_of_signal_struct = 1;
  ldv_mutex_lock = 1;
  ldv_mutex_mutex_of_device = 1;
  return;
}
}
void ldv_check_final_state(void) 
{ 

  {
  if (! (ldv_mutex_cred_guard_mutex_of_signal_struct == 1)) {
    ldv_error();
  }
  if (! (ldv_mutex_lock == 1)) {
    ldv_error();
  }
  if (! (ldv_mutex_mutex_of_device == 1)) {
    ldv_error();
  }
  return;
}
}
