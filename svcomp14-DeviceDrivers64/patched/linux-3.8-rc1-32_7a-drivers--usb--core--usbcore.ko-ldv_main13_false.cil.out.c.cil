extern void __VERIFIER_error() __attribute__ ((__noreturn__)); /* Generated by CIL v. 1.3.7 */
/* print_CIL_Input is true */

struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
struct module;
struct module;
typedef signed char __s8;
typedef unsigned char __u8;
typedef short __s16;
typedef unsigned short __u16;
typedef int __s32;
typedef unsigned int __u32;
typedef unsigned long long __u64;
typedef unsigned char u8;
typedef short s16;
typedef unsigned short u16;
typedef int s32;
typedef unsigned int u32;
typedef long long s64;
typedef unsigned long long u64;
typedef long __kernel_long_t;
typedef unsigned long __kernel_ulong_t;
typedef int __kernel_pid_t;
typedef unsigned int __kernel_uid32_t;
typedef unsigned int __kernel_gid32_t;
typedef __kernel_ulong_t __kernel_size_t;
typedef __kernel_long_t __kernel_ssize_t;
typedef long long __kernel_loff_t;
typedef __kernel_long_t __kernel_time_t;
typedef __kernel_long_t __kernel_clock_t;
typedef int __kernel_timer_t;
typedef int __kernel_clockid_t;
typedef __u16 __le16;
typedef __u32 __le32;
typedef __u32 __kernel_dev_t;
typedef __kernel_dev_t dev_t;
typedef unsigned short umode_t;
typedef __kernel_pid_t pid_t;
typedef __kernel_clockid_t clockid_t;
typedef _Bool bool;
typedef __kernel_uid32_t uid_t;
typedef __kernel_gid32_t gid_t;
typedef __kernel_loff_t loff_t;
typedef __kernel_size_t size_t;
typedef __kernel_ssize_t ssize_t;
typedef __kernel_time_t time_t;
typedef __s32 int32_t;
typedef __u32 uint32_t;
typedef unsigned long sector_t;
typedef unsigned long blkcnt_t;
typedef u64 dma_addr_t;
typedef unsigned int gfp_t;
typedef unsigned int fmode_t;
typedef unsigned int oom_flags_t;
typedef u64 phys_addr_t;
typedef phys_addr_t resource_size_t;
struct __anonstruct_atomic_t_6 {
   int counter ;
};
typedef struct __anonstruct_atomic_t_6 atomic_t;
struct __anonstruct_atomic64_t_7 {
   long counter ;
};
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
struct hlist_node;
struct hlist_node;
struct hlist_head {
   struct hlist_node *first ;
};
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head * ) ;
};
typedef void (*ctor_fn_t)(void);
struct file_operations;
struct file_operations;
struct device;
struct device;
struct completion;
struct completion;
struct pt_regs;
struct pt_regs;
struct pid;
struct pid;
typedef u16 __ticket_t;
typedef u32 __ticketpair_t;
struct __raw_tickets {
   __ticket_t head ;
   __ticket_t tail ;
};
union __anonunion_ldv_2043_8 {
   __ticketpair_t head_tail ;
   struct __raw_tickets tickets ;
};
struct arch_spinlock {
   union __anonunion_ldv_2043_8 ldv_2043 ;
};
typedef struct arch_spinlock arch_spinlock_t;
struct __anonstruct_ldv_2050_10 {
   u32 read ;
   s32 write ;
};
union __anonunion_arch_rwlock_t_9 {
   s64 lock ;
   struct __anonstruct_ldv_2050_10 ldv_2050 ;
};
typedef union __anonunion_arch_rwlock_t_9 arch_rwlock_t;
struct task_struct;
struct task_struct;
struct lockdep_map;
struct lockdep_map;
struct mm_struct;
struct mm_struct;
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
struct __anonstruct_ldv_2103_12 {
   unsigned int a ;
   unsigned int b ;
};
struct __anonstruct_ldv_2118_13 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
union __anonunion_ldv_2119_11 {
   struct __anonstruct_ldv_2103_12 ldv_2103 ;
   struct __anonstruct_ldv_2118_13 ldv_2118 ;
};
struct desc_struct {
   union __anonunion_ldv_2119_11 ldv_2119 ;
};
typedef unsigned long pgdval_t;
typedef unsigned long pgprotval_t;
struct pgprot {
   pgprotval_t pgprot ;
};
typedef struct pgprot pgprot_t;
struct __anonstruct_pgd_t_15 {
   pgdval_t pgd ;
};
typedef struct __anonstruct_pgd_t_15 pgd_t;
struct page;
struct page;
typedef struct page *pgtable_t;
struct file;
struct file;
struct seq_file;
struct seq_file;
struct thread_struct;
struct thread_struct;
struct cpumask;
struct cpumask;
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
union __anonunion_ldv_2775_18 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_ldv_2775_18 ldv_2775 ;
};
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
struct cpumask {
   unsigned long bits[64U] ;
};
typedef struct cpumask cpumask_t;
typedef struct cpumask *cpumask_var_t;
struct static_key;
struct static_key;
struct seq_operations;
struct seq_operations;
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
struct __anonstruct_ldv_5181_23 {
   u64 rip ;
   u64 rdp ;
};
struct __anonstruct_ldv_5187_24 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
union __anonunion_ldv_5188_22 {
   struct __anonstruct_ldv_5181_23 ldv_5181 ;
   struct __anonstruct_ldv_5187_24 ldv_5187 ;
};
union __anonunion_ldv_5197_25 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_5188_22 ldv_5188 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_5197_25 ldv_5197 ;
};
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
};
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
struct fpu {
   unsigned int last_cpu ;
   unsigned int has_fpu ;
   union thread_xstate *state ;
};
struct kmem_cache;
struct kmem_cache;
struct perf_event;
struct perf_event;
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct fpu fpu ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
};
typedef atomic64_t atomic_long_t;
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__)) ;
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
   unsigned short references : 11 ;
};
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
typedef struct raw_spinlock raw_spinlock_t;
struct __anonstruct_ldv_6013_29 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
union __anonunion_ldv_6014_28 {
   struct raw_spinlock rlock ;
   struct __anonstruct_ldv_6013_29 ldv_6013 ;
};
struct spinlock {
   union __anonunion_ldv_6014_28 ldv_6014 ;
};
typedef struct spinlock spinlock_t;
struct __anonstruct_rwlock_t_30 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
typedef struct __anonstruct_rwlock_t_30 rwlock_t;
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct task_struct *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
struct timespec;
struct timespec;
struct seqcount {
   unsigned int sequence ;
};
typedef struct seqcount seqcount_t;
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
struct user_namespace;
struct user_namespace;
typedef uid_t kuid_t;
typedef gid_t kgid_t;
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   kuid_t uid ;
   kgid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
typedef struct __wait_queue_head wait_queue_head_t;
struct __anonstruct_nodemask_t_36 {
   unsigned long bits[16U] ;
};
typedef struct __anonstruct_nodemask_t_36 nodemask_t;
struct rw_semaphore;
struct rw_semaphore;
struct rw_semaphore {
   long count ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
struct notifier_block;
struct notifier_block;
union ktime {
   s64 tv64 ;
};
typedef union ktime ktime_t;
struct tvec_base;
struct tvec_base;
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   struct tvec_base *base ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};
struct hrtimer;
struct hrtimer;
enum hrtimer_restart;
enum hrtimer_restart;
struct work_struct;
struct work_struct;
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
struct pm_message {
   int event ;
};
typedef struct pm_message pm_message_t;
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_late)(struct device * ) ;
   int (*resume_early)(struct device * ) ;
   int (*freeze_late)(struct device * ) ;
   int (*thaw_early)(struct device * ) ;
   int (*poweroff_late)(struct device * ) ;
   int (*restore_early)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
} ;
struct wakeup_source;
struct wakeup_source;
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
};
struct dev_pm_qos;
struct dev_pm_qos;
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char async_suspend : 1 ;
   bool is_prepared ;
   bool is_suspended ;
   bool ignore_children ;
   bool early_init ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path ;
   bool syscore ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned char disable_depth : 3 ;
   unsigned char idle_notification : 1 ;
   unsigned char request_pending : 1 ;
   unsigned char deferred_resume : 1 ;
   unsigned char run_wake : 1 ;
   unsigned char runtime_auto : 1 ;
   unsigned char no_callbacks : 1 ;
   unsigned char irq_safe : 1 ;
   unsigned char use_autosuspend : 1 ;
   unsigned char timer_autosuspends : 1 ;
   unsigned char memalloc_noio : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   struct dev_pm_qos *qos ;
};
struct dev_pm_domain {
   struct dev_pm_ops ops ;
};
struct __anonstruct_mm_context_t_101 {
   void *ldt ;
   int size ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
};
typedef struct __anonstruct_mm_context_t_101 mm_context_t;
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
struct rb_root {
   struct rb_node *rb_node ;
};
struct vm_area_struct;
struct vm_area_struct;
struct device_node;
struct device_node;
struct nsproxy;
struct nsproxy;
struct cred;
struct cred;
typedef __u64 Elf64_Addr;
typedef __u16 Elf64_Half;
typedef __u32 Elf64_Word;
typedef __u64 Elf64_Xword;
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
typedef struct elf64_sym Elf64_Sym;
struct sock;
struct sock;
struct kobject;
struct kobject;
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
} ;
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   void *(*grab_current_ns)(void) ;
   void const   *(*netlink_ns)(struct sock * ) ;
   void const   *(*initial_ns)(void) ;
   void (*drop_ns)(void * ) ;
};
struct attribute {
   char const   *name ;
   umode_t mode ;
   bool ignore_lockdep ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
struct attribute_group {
   char const   *name ;
   umode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                   loff_t  , size_t  ) ;
   ssize_t (*write)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                    loff_t  , size_t  ) ;
   int (*mmap)(struct file * , struct kobject * , struct bin_attribute * , struct vm_area_struct * ) ;
};
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
   void const   *(*namespace)(struct kobject * , struct attribute  const  * ) ;
};
struct sysfs_dirent;
struct sysfs_dirent;
struct kref {
   atomic_t refcount ;
};
struct kset;
struct kset;
struct kobj_type;
struct kobj_type;
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops  const  *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations  const  *(*child_ns_type)(struct kobject * ) ;
   void const   *(*namespace)(struct kobject * ) ;
};
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
struct kset_uevent_ops {
   int (* const  filter)(struct kset * , struct kobject * ) ;
   char const   *(* const  name)(struct kset * , struct kobject * ) ;
   int (* const  uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops  const  *uevent_ops ;
};
struct kernel_param;
struct kernel_param;
struct kernel_param_ops {
   int (*set)(char const   * , struct kernel_param  const  * ) ;
   int (*get)(char * , struct kernel_param  const  * ) ;
   void (*free)(void * ) ;
};
struct kparam_string;
struct kparam_string;
struct kparam_array;
struct kparam_array;
union __anonunion_ldv_14152_134 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
struct kernel_param {
   char const   *name ;
   struct kernel_param_ops  const  *ops ;
   u16 perm ;
   s16 level ;
   union __anonunion_ldv_14152_134 ldv_14152 ;
};
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops  const  *ops ;
   void *elem ;
};
struct static_key {
   atomic_t enabled ;
};
struct tracepoint;
struct tracepoint;
struct tracepoint_func {
   void *func ;
   void *data ;
};
struct tracepoint {
   char const   *name ;
   struct static_key key ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
struct mod_arch_specific {

};
struct module_param_attrs;
struct module_param_attrs;
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module_kobject * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module_kobject * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
struct exception_table_entry;
struct exception_table_entry;
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
} ;
struct module_ref {
   unsigned long incs ;
   unsigned long decs ;
};
struct module_sect_attrs;
struct module_sect_attrs;
struct module_notes_attrs;
struct module_notes_attrs;
struct ftrace_event_call;
struct ftrace_event_call;
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   bool sig_ok ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   struct tracepoint * const  *tracepoints_ptrs ;
   unsigned int num_trace_bprintk_fmt ;
   char const   **trace_bprintk_fmt_start ;
   struct ftrace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct list_head source_list ;
   struct list_head target_list ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
struct mem_cgroup;
struct mem_cgroup;
struct kmem_cache_cpu {
   void **freelist ;
   unsigned long tid ;
   struct page *page ;
   struct page *partial ;
   unsigned int stat[26U] ;
};
struct kmem_cache_order_objects {
   unsigned long x ;
};
struct memcg_cache_params;
struct memcg_cache_params;
struct kmem_cache_node;
struct kmem_cache_node;
struct kmem_cache {
   struct kmem_cache_cpu *cpu_slab ;
   unsigned long flags ;
   unsigned long min_partial ;
   int size ;
   int object_size ;
   int offset ;
   int cpu_partial ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   int reserved ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   struct memcg_cache_params *memcg_params ;
   int max_attr_size ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1024U] ;
};
struct __anonstruct_ldv_14848_136 {
   struct mem_cgroup *memcg ;
   struct list_head list ;
   struct kmem_cache *root_cache ;
   bool dead ;
   atomic_t nr_pages ;
   struct work_struct destroy ;
};
union __anonunion_ldv_14849_135 {
   struct kmem_cache *memcg_caches[0U] ;
   struct __anonstruct_ldv_14848_136 ldv_14848 ;
};
struct memcg_cache_params {
   bool is_root_cache ;
   union __anonunion_ldv_14849_135 ldv_14849 ;
};
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
} ;
typedef enum irqreturn irqreturn_t;
struct exception_table_entry {
   int insn ;
   int fixup ;
};
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
struct timerqueue_head {
   struct rb_root head ;
   struct timerqueue_node *next ;
};
struct hrtimer_clock_base;
struct hrtimer_clock_base;
struct hrtimer_cpu_base;
struct hrtimer_cpu_base;
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   int index ;
   clockid_t clockid ;
   struct timerqueue_head active ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int active_bases ;
   unsigned int clock_was_set ;
   ktime_t expires_next ;
   int hres_active ;
   int hang_detected ;
   unsigned long nr_events ;
   unsigned long nr_retries ;
   unsigned long nr_hangs ;
   ktime_t max_hang_time ;
   struct hrtimer_clock_base clock_base[4U] ;
};
typedef unsigned long kernel_ulong_t;
struct usb_device_id {
   __u16 match_flags ;
   __u16 idVendor ;
   __u16 idProduct ;
   __u16 bcdDevice_lo ;
   __u16 bcdDevice_hi ;
   __u8 bDeviceClass ;
   __u8 bDeviceSubClass ;
   __u8 bDeviceProtocol ;
   __u8 bInterfaceClass ;
   __u8 bInterfaceSubClass ;
   __u8 bInterfaceProtocol ;
   __u8 bInterfaceNumber ;
   kernel_ulong_t driver_info ;
};
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
};
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void const   *data ;
};
struct usb_descriptor_header {
   __u8 bLength ;
   __u8 bDescriptorType ;
};
struct usb_device_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 bcdUSB ;
   __u8 bDeviceClass ;
   __u8 bDeviceSubClass ;
   __u8 bDeviceProtocol ;
   __u8 bMaxPacketSize0 ;
   __le16 idVendor ;
   __le16 idProduct ;
   __le16 bcdDevice ;
   __u8 iManufacturer ;
   __u8 iProduct ;
   __u8 iSerialNumber ;
   __u8 bNumConfigurations ;
};
struct usb_config_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 wTotalLength ;
   __u8 bNumInterfaces ;
   __u8 bConfigurationValue ;
   __u8 iConfiguration ;
   __u8 bmAttributes ;
   __u8 bMaxPower ;
};
struct usb_interface_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bInterfaceNumber ;
   __u8 bAlternateSetting ;
   __u8 bNumEndpoints ;
   __u8 bInterfaceClass ;
   __u8 bInterfaceSubClass ;
   __u8 bInterfaceProtocol ;
   __u8 iInterface ;
};
struct usb_endpoint_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bEndpointAddress ;
   __u8 bmAttributes ;
   __le16 wMaxPacketSize ;
   __u8 bInterval ;
   __u8 bRefresh ;
   __u8 bSynchAddress ;
};
struct usb_ss_ep_comp_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bMaxBurst ;
   __u8 bmAttributes ;
   __le16 wBytesPerInterval ;
};
struct usb_interface_assoc_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bFirstInterface ;
   __u8 bInterfaceCount ;
   __u8 bFunctionClass ;
   __u8 bFunctionSubClass ;
   __u8 bFunctionProtocol ;
   __u8 iFunction ;
};
struct usb_bos_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 wTotalLength ;
   __u8 bNumDeviceCaps ;
};
struct usb_ext_cap_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bDevCapabilityType ;
   __le32 bmAttributes ;
};
struct usb_ss_cap_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bDevCapabilityType ;
   __u8 bmAttributes ;
   __le16 wSpeedSupported ;
   __u8 bFunctionalitySupport ;
   __u8 bU1devExitLat ;
   __le16 bU2DevExitLat ;
};
struct usb_ss_container_id_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bDevCapabilityType ;
   __u8 bReserved ;
   __u8 ContainerID[16U] ;
};
enum usb_device_speed {
    USB_SPEED_UNKNOWN = 0,
    USB_SPEED_LOW = 1,
    USB_SPEED_FULL = 2,
    USB_SPEED_HIGH = 3,
    USB_SPEED_WIRELESS = 4,
    USB_SPEED_SUPER = 5
} ;
enum usb_device_state {
    USB_STATE_NOTATTACHED = 0,
    USB_STATE_ATTACHED = 1,
    USB_STATE_POWERED = 2,
    USB_STATE_RECONNECTING = 3,
    USB_STATE_UNAUTHENTICATED = 4,
    USB_STATE_DEFAULT = 5,
    USB_STATE_ADDRESS = 6,
    USB_STATE_CONFIGURED = 7,
    USB_STATE_SUSPENDED = 8
} ;
enum usb3_link_state {
    USB3_LPM_U0 = 0,
    USB3_LPM_U1 = 1,
    USB3_LPM_U2 = 2,
    USB3_LPM_U3 = 3
} ;
struct klist_node;
struct klist_node;
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
struct dma_map_ops;
struct dma_map_ops;
struct dev_archdata {
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
struct device_private;
struct device_private;
struct device_driver;
struct device_driver;
struct driver_private;
struct driver_private;
struct class;
struct class;
struct subsys_private;
struct subsys_private;
struct bus_type;
struct bus_type;
struct iommu_ops;
struct iommu_ops;
struct iommu_group;
struct iommu_group;
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
struct device_attribute;
struct device_attribute;
struct driver_attribute;
struct driver_attribute;
struct bus_type {
   char const   *name ;
   char const   *dev_name ;
   struct device *dev_root ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
};
struct device_type;
struct device_type;
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   struct of_device_id  const  *of_match_table ;
   struct acpi_device_id  const  *acpi_match_table ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
struct class_attribute;
struct class_attribute;
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct bin_attribute *dev_bin_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct kobj_ns_type_operations  const  *ns_type ;
   void const   *(*namespace)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct subsys_private *p ;
};
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , struct class_attribute * , char * ) ;
   ssize_t (*store)(struct class * , struct class_attribute * , char const   * , size_t  ) ;
   void const   *(*namespace)(struct class * , struct class_attribute  const  * ) ;
};
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * , kuid_t * , kgid_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
struct acpi_dev_node {
   void *handle ;
};
struct dma_coherent_mem;
struct dma_coherent_mem;
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type  const  *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct acpi_dev_node acpi_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
   struct iommu_group *iommu_group ;
};
struct wakeup_source {
   char const   *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   bool active ;
   bool autosleep_enabled ;
};
struct hlist_bl_node;
struct hlist_bl_node;
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
struct nameidata;
struct nameidata;
struct path;
struct path;
struct vfsmount;
struct vfsmount;
struct __anonstruct_ldv_18169_143 {
   u32 hash ;
   u32 len ;
};
union __anonunion_ldv_18171_142 {
   struct __anonstruct_ldv_18169_143 ldv_18169 ;
   u64 hash_len ;
};
struct qstr {
   union __anonunion_ldv_18171_142 ldv_18171 ;
   unsigned char const   *name ;
};
struct inode;
struct inode;
struct dentry_operations;
struct dentry_operations;
struct super_block;
struct super_block;
union __anonunion_d_u_144 {
   struct list_head d_child ;
   struct callback_head d_rcu ;
};
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   unsigned int d_count ;
   spinlock_t d_lock ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   struct list_head d_lru ;
   union __anonunion_d_u_144 d_u ;
   struct list_head d_subdirs ;
   struct hlist_node d_alias ;
};
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , unsigned int  ) ;
   int (*d_weak_revalidate)(struct dentry * , unsigned int  ) ;
   int (*d_hash)(struct dentry  const  * , struct inode  const  * , struct qstr * ) ;
   int (*d_compare)(struct dentry  const  * , struct inode  const  * , struct dentry  const  * ,
                    struct inode  const  * , unsigned int  , char const   * , struct qstr  const  * ) ;
   int (*d_delete)(struct dentry  const  * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_prune)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
   struct vfsmount *(*d_automount)(struct path * ) ;
   int (*d_manage)(struct dentry * , bool  ) ;
};
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
struct radix_tree_node;
struct radix_tree_node;
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
struct pid_namespace;
struct pid_namespace;
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
typedef struct kernel_cap_struct kernel_cap_t;
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
struct shrink_control {
   gfp_t gfp_mask ;
   unsigned long nr_to_scan ;
};
struct shrinker {
   int (*shrink)(struct shrinker * , struct shrink_control * ) ;
   int seeks ;
   long batch ;
   struct list_head list ;
   atomic_long_t nr_in_batch ;
};
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2
} ;
struct block_device;
struct block_device;
struct io_context;
struct io_context;
struct export_operations;
struct export_operations;
struct iovec;
struct iovec;
struct kiocb;
struct kiocb;
struct pipe_inode_info;
struct pipe_inode_info;
struct poll_table_struct;
struct poll_table_struct;
struct kstatfs;
struct kstatfs;
struct swap_info_struct;
struct swap_info_struct;
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
typedef struct fs_qfilestat fs_qfilestat_t;
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
struct dquot;
struct dquot;
typedef __kernel_uid32_t projid_t;
typedef projid_t kprojid_t;
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
} ;
typedef long long qsize_t;
union __anonunion_ldv_19197_146 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
struct kqid {
   union __anonunion_ldv_19197_146 ldv_19197 ;
   enum quota_type type ;
};
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
struct quota_format_type;
struct quota_format_type;
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
struct dquot_operations {
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   qsize_t *(*get_reserved_space)(struct inode * ) ;
};
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , struct path * ) ;
   int (*quota_on_meta)(struct super_block * , int  , int  ) ;
   int (*quota_off)(struct super_block * , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , struct kqid  , struct fs_disk_quota * ) ;
   int (*set_dqblk)(struct super_block * , struct kqid  , struct fs_disk_quota * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
};
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops  const  *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops  const  *ops[2U] ;
};
struct address_space;
struct address_space;
struct writeback_control;
struct writeback_control;
union __anonunion_arg_148 {
   char *buf ;
   void *data ;
};
struct __anonstruct_read_descriptor_t_147 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_148 arg ;
   int error ;
};
typedef struct __anonstruct_read_descriptor_t_147 read_descriptor_t;
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   void (*freepage)(struct page * ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * , enum migrate_mode  ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
   int (*error_remove_page)(struct address_space * , struct page * ) ;
   int (*swap_activate)(struct swap_info_struct * , struct file * , sector_t * ) ;
   void (*swap_deactivate)(struct file * ) ;
};
struct backing_dev_info;
struct backing_dev_info;
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct rb_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   struct mutex i_mmap_mutex ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
};
struct request_queue;
struct request_queue;
struct hd_struct;
struct hd_struct;
struct gendisk;
struct gendisk;
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
struct posix_acl;
struct posix_acl;
struct inode_operations;
struct inode_operations;
union __anonunion_ldv_19633_149 {
   unsigned int const   i_nlink ;
   unsigned int __i_nlink ;
};
union __anonunion_ldv_19653_150 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
struct file_lock;
struct file_lock;
struct cdev;
struct cdev;
union __anonunion_ldv_19669_151 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations  const  *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_ldv_19633_149 ldv_19633 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct mutex i_mutex ;
   unsigned long dirtied_when ;
   struct hlist_node i_hash ;
   struct list_head i_wb_list ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   union __anonunion_ldv_19653_150 ldv_19653 ;
   u64 i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   struct file_operations  const  *i_fop ;
   struct file_lock *i_flock ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_19669_151 ldv_19669 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   atomic_t i_readcount ;
   void *i_private ;
};
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
union __anonunion_f_u_152 {
   struct list_head fu_list ;
   struct callback_head fu_rcuhead ;
};
struct file {
   union __anonunion_f_u_152 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   int f_sb_list_cpu ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
struct files_struct;
struct files_struct;
typedef struct files_struct *fl_owner_t;
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
struct lock_manager_operations {
   int (*lm_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*lm_notify)(struct file_lock * ) ;
   int (*lm_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*lm_break)(struct file_lock * ) ;
   int (*lm_change)(struct file_lock ** , int  ) ;
};
struct nlm_lockowner;
struct nlm_lockowner;
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
struct nfs4_lock_state;
struct nfs4_lock_state;
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
struct fasync_struct;
struct fasync_struct;
struct __anonstruct_afs_154 {
   struct list_head link ;
   int state ;
};
union __anonunion_fl_u_153 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_154 afs ;
};
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations  const  *fl_ops ;
   struct lock_manager_operations  const  *fl_lmops ;
   union __anonunion_fl_u_153 fl_u ;
};
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
struct sb_writers {
   struct percpu_counter counter[3U] ;
   wait_queue_head_t wait ;
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct lockdep_map lock_map[3U] ;
};
struct file_system_type;
struct file_system_type;
struct super_operations;
struct super_operations;
struct xattr_handler;
struct xattr_handler;
struct mtd_info;
struct mtd_info;
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations  const  *dq_op ;
   struct quotactl_ops  const  *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler  const  **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_bl_head s_anon ;
   struct list_head *s_files ;
   struct list_head s_mounts ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   spinlock_t s_inode_lru_lock ;
   struct list_head s_inode_lru ;
   int s_nr_inodes_unused ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   char s_id[32U] ;
   u8 s_uuid[16U] ;
   void *s_fs_info ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
   struct dentry_operations  const  *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   int s_readonly_remount ;
};
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , loff_t  , loff_t  , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
   long (*fallocate)(struct file * , int  , loff_t  , loff_t  ) ;
   int (*show_fdinfo)(struct seq_file * , struct file * ) ;
};
struct inode_operations {
   struct dentry *(*lookup)(struct inode * , struct dentry * , unsigned int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   int (*permission)(struct inode * , int  ) ;
   struct posix_acl *(*get_acl)(struct inode * , int  ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   int (*create)(struct inode * , struct dentry * , umode_t  , bool  ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , umode_t  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , umode_t  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
   int (*update_time)(struct inode * , struct timespec * , int  ) ;
   int (*atomic_open)(struct inode * , struct dentry * , struct file * , unsigned int  ,
                      umode_t  , int * ) ;
};
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * , int  ) ;
   int (*write_inode)(struct inode * , struct writeback_control * ) ;
   int (*drop_inode)(struct inode * ) ;
   void (*evict_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct dentry * ) ;
   int (*show_devname)(struct seq_file * , struct dentry * ) ;
   int (*show_path)(struct seq_file * , struct dentry * ) ;
   int (*show_stats)(struct seq_file * , struct dentry * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
   int (*nr_cached_objects)(struct super_block * ) ;
   void (*free_cached_objects)(struct super_block * , int  ) ;
};
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   struct dentry *(*mount)(struct file_system_type * , int  , char const   * , void * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
} ;
struct return_instance;
struct return_instance;
struct uprobe;
struct uprobe;
struct uprobe_task {
   enum uprobe_task_state state ;
   struct arch_uprobe_task autask ;
   struct return_instance *return_instances ;
   unsigned int depth ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   unsigned long vaddr ;
};
struct xol_area {
   wait_queue_head_t wq ;
   atomic_t slot_count ;
   unsigned long *bitmap ;
   struct page *page ;
   unsigned long vaddr ;
};
struct uprobes_state {
   struct xol_area *xol_area ;
};
union __anonunion_ldv_21794_156 {
   unsigned long index ;
   void *freelist ;
   bool pfmemalloc ;
};
struct __anonstruct_ldv_21804_160 {
   unsigned short inuse ;
   unsigned short objects : 15 ;
   unsigned char frozen : 1 ;
};
union __anonunion_ldv_21806_159 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_21804_160 ldv_21804 ;
   int units ;
};
struct __anonstruct_ldv_21808_158 {
   union __anonunion_ldv_21806_159 ldv_21806 ;
   atomic_t _count ;
};
union __anonunion_ldv_21809_157 {
   unsigned long counters ;
   struct __anonstruct_ldv_21808_158 ldv_21808 ;
};
struct __anonstruct_ldv_21810_155 {
   union __anonunion_ldv_21794_156 ldv_21794 ;
   union __anonunion_ldv_21809_157 ldv_21809 ;
};
struct __anonstruct_ldv_21817_162 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
struct slab;
struct slab;
union __anonunion_ldv_21821_161 {
   struct list_head lru ;
   struct __anonstruct_ldv_21817_162 ldv_21817 ;
   struct list_head list ;
   struct slab *slab_page ;
};
union __anonunion_ldv_21826_163 {
   unsigned long private ;
   struct kmem_cache *slab_cache ;
   struct page *first_page ;
};
struct page {
   unsigned long flags ;
   struct address_space *mapping ;
   struct __anonstruct_ldv_21810_155 ldv_21810 ;
   union __anonunion_ldv_21821_161 ldv_21821 ;
   union __anonunion_ldv_21826_163 ldv_21826 ;
   unsigned long debug_flags ;
};
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
struct __anonstruct_linear_165 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
union __anonunion_shared_164 {
   struct __anonstruct_linear_165 linear ;
   struct list_head nonlinear ;
};
struct anon_vma;
struct anon_vma;
struct vm_operations_struct;
struct vm_operations_struct;
struct mempolicy;
struct mempolicy;
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   union __anonunion_shared_164 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   struct mempolicy *vm_policy ;
};
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
struct mm_rss_stat {
   atomic_long_t count[3U] ;
};
struct linux_binfmt;
struct linux_binfmt;
struct mmu_notifier_mm;
struct mmu_notifier_mm;
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long pinned_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[44U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_var_t cpu_vm_mask_var ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   pgtable_t pmd_huge_pte ;
   struct cpumask cpumask_allocation ;
   unsigned long numa_next_scan ;
   unsigned long numa_next_reset ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   int first_nid ;
   struct uprobes_state uprobes_state ;
};
typedef unsigned long cputime_t;
struct sem_undo_list;
struct sem_undo_list;
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
struct __anonstruct_sigset_t_166 {
   unsigned long sig[1U] ;
};
typedef struct __anonstruct_sigset_t_166 sigset_t;
struct siginfo;
struct siginfo;
typedef void __signalfn_t(int  );
typedef __signalfn_t *__sighandler_t;
typedef void __restorefn_t(void);
typedef __restorefn_t *__sigrestore_t;
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
typedef union sigval sigval_t;
struct __anonstruct__kill_168 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
struct __anonstruct__timer_169 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
struct __anonstruct__rt_170 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
struct __anonstruct__sigchld_171 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
struct __anonstruct__sigfault_172 {
   void *_addr ;
   short _addr_lsb ;
};
struct __anonstruct__sigpoll_173 {
   long _band ;
   int _fd ;
};
struct __anonstruct__sigsys_174 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
union __anonunion__sifields_167 {
   int _pad[28U] ;
   struct __anonstruct__kill_168 _kill ;
   struct __anonstruct__timer_169 _timer ;
   struct __anonstruct__rt_170 _rt ;
   struct __anonstruct__sigchld_171 _sigchld ;
   struct __anonstruct__sigfault_172 _sigfault ;
   struct __anonstruct__sigpoll_173 _sigpoll ;
   struct __anonstruct__sigsys_174 _sigsys ;
};
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_167 _sifields ;
};
typedef struct siginfo siginfo_t;
struct user_struct;
struct user_struct;
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
struct k_sigaction {
   struct sigaction sa ;
};
struct seccomp_filter;
struct seccomp_filter;
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
struct plist_head {
   struct list_head node_list ;
};
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
struct rt_mutex_waiter;
struct rt_mutex_waiter;
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
typedef int32_t key_serial_t;
typedef uint32_t key_perm_t;
struct key;
struct key;
struct signal_struct;
struct signal_struct;
struct key_type;
struct key_type;
struct keyring_list;
struct keyring_list;
union __anonunion_ldv_22660_177 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
struct key_user;
struct key_user;
union __anonunion_ldv_22669_178 {
   time_t expiry ;
   time_t revoked_at ;
};
union __anonunion_type_data_179 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
   int reject_error ;
};
union __anonunion_payload_180 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   struct keyring_list *subscriptions ;
};
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   union __anonunion_ldv_22660_177 ldv_22660 ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_ldv_22669_178 ldv_22669 ;
   time_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_179 type_data ;
   union __anonunion_payload_180 payload ;
};
struct audit_context;
struct audit_context;
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   kgid_t small_block[32U] ;
   kgid_t *blocks[0U] ;
};
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   struct callback_head rcu ;
};
struct llist_node;
struct llist_node;
struct llist_node {
   struct llist_node *next ;
};
struct futex_pi_state;
struct futex_pi_state;
struct robust_list_head;
struct robust_list_head;
struct bio_list;
struct bio_list;
struct fs_struct;
struct fs_struct;
struct perf_event_context;
struct perf_event_context;
struct blk_plug;
struct blk_plug;
struct cfs_rq;
struct cfs_rq;
struct task_group;
struct task_group;
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
struct cputime {
   cputime_t utime ;
   cputime_t stime ;
};
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   raw_spinlock_t lock ;
};
struct autogroup;
struct autogroup;
struct tty_struct;
struct tty_struct;
struct taskstats;
struct taskstats;
struct tty_audit_buf;
struct tty_audit_buf;
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned char is_child_subreaper : 1 ;
   unsigned char has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   unsigned int audit_tty_log_passwd ;
   struct tty_audit_buf *tty_audit_buf ;
   struct rw_semaphore group_rwsem ;
   oom_flags_t oom_flags ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mutex cred_guard_mutex ;
};
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
};
struct reclaim_state;
struct reclaim_state;
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
struct sched_avg {
   u32 runnable_avg_sum ;
   u32 runnable_avg_period ;
   u64 last_runnable_update ;
   s64 decay_count ;
   unsigned long load_avg_contrib ;
};
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
struct rt_rq;
struct rt_rq;
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
struct memcg_batch_info {
   int do_batch ;
   struct mem_cgroup *memcg ;
   unsigned long nr_pages ;
   unsigned long memsw_nr_pages ;
};
struct sched_class;
struct sched_class;
struct css_set;
struct css_set;
struct compat_robust_list_head;
struct compat_robust_list_head;
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   unsigned char brk_randomized : 1 ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int jobctl ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   unsigned char in_execve : 1 ;
   unsigned char in_iowait : 1 ;
   unsigned char no_new_privs : 1 ;
   unsigned char sched_reset_on_fork : 1 ;
   unsigned char sched_contributes_to_load : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   short pref_node_fork ;
   int numa_scan_seq ;
   int numa_migrate_seq ;
   unsigned int numa_scan_period ;
   u64 node_stamp ;
   struct callback_head numa_work ;
   struct callback_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_batch_info memcg_batch ;
   unsigned int memcg_kmem_skip_account ;
   atomic_t ptrace_bp_refcnt ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
};
struct usb_device;
struct usb_device;
struct usb_driver;
struct usb_driver;
struct wusb_dev;
struct wusb_dev;
struct ep_device;
struct ep_device;
struct usb_host_endpoint {
   struct usb_endpoint_descriptor desc ;
   struct usb_ss_ep_comp_descriptor ss_ep_comp ;
   struct list_head urb_list ;
   void *hcpriv ;
   struct ep_device *ep_dev ;
   unsigned char *extra ;
   int extralen ;
   int enabled ;
};
struct usb_host_interface {
   struct usb_interface_descriptor desc ;
   int extralen ;
   unsigned char *extra ;
   struct usb_host_endpoint *endpoint ;
   char *string ;
};
enum usb_interface_condition {
    USB_INTERFACE_UNBOUND = 0,
    USB_INTERFACE_BINDING = 1,
    USB_INTERFACE_BOUND = 2,
    USB_INTERFACE_UNBINDING = 3
} ;
struct usb_interface {
   struct usb_host_interface *altsetting ;
   struct usb_host_interface *cur_altsetting ;
   unsigned int num_altsetting ;
   struct usb_interface_assoc_descriptor *intf_assoc ;
   int minor ;
   enum usb_interface_condition condition ;
   unsigned char sysfs_files_created : 1 ;
   unsigned char ep_devs_created : 1 ;
   unsigned char unregistering : 1 ;
   unsigned char needs_remote_wakeup : 1 ;
   unsigned char needs_altsetting0 : 1 ;
   unsigned char needs_binding : 1 ;
   unsigned char reset_running : 1 ;
   unsigned char resetting_device : 1 ;
   struct device dev ;
   struct device *usb_dev ;
   atomic_t pm_usage_cnt ;
   struct work_struct reset_ws ;
};
struct usb_interface_cache {
   unsigned int num_altsetting ;
   struct kref ref ;
   struct usb_host_interface altsetting[0U] ;
};
struct usb_host_config {
   struct usb_config_descriptor desc ;
   char *string ;
   struct usb_interface_assoc_descriptor *intf_assoc[16U] ;
   struct usb_interface *interface[32U] ;
   struct usb_interface_cache *intf_cache[32U] ;
   unsigned char *extra ;
   int extralen ;
};
struct usb_host_bos {
   struct usb_bos_descriptor *desc ;
   struct usb_ext_cap_descriptor *ext_cap ;
   struct usb_ss_cap_descriptor *ss_cap ;
   struct usb_ss_container_id_descriptor *ss_id ;
};
struct usb_devmap {
   unsigned long devicemap[2U] ;
};
struct mon_bus;
struct mon_bus;
struct usb_bus {
   struct device *controller ;
   int busnum ;
   char const   *bus_name ;
   u8 uses_dma ;
   u8 uses_pio_for_control ;
   u8 otg_port ;
   unsigned char is_b_host : 1 ;
   unsigned char b_hnp_enable : 1 ;
   unsigned char no_stop_on_short : 1 ;
   unsigned int sg_tablesize ;
   int devnum_next ;
   struct usb_devmap devmap ;
   struct usb_device *root_hub ;
   struct usb_bus *hs_companion ;
   struct list_head bus_list ;
   int bandwidth_allocated ;
   int bandwidth_int_reqs ;
   int bandwidth_isoc_reqs ;
   unsigned int resuming_ports ;
   struct mon_bus *mon_bus ;
   int monitored ;
};
struct usb_tt;
struct usb_tt;
enum usb_device_removable {
    USB_DEVICE_REMOVABLE_UNKNOWN = 0,
    USB_DEVICE_REMOVABLE = 1,
    USB_DEVICE_FIXED = 2
} ;
struct usb3_lpm_parameters {
   unsigned int mel ;
   unsigned int pel ;
   unsigned int sel ;
   int timeout ;
};
struct usb_device {
   int devnum ;
   char devpath[16U] ;
   u32 route ;
   enum usb_device_state state ;
   enum usb_device_speed speed ;
   struct usb_tt *tt ;
   int ttport ;
   unsigned int toggle[2U] ;
   struct usb_device *parent ;
   struct usb_bus *bus ;
   struct usb_host_endpoint ep0 ;
   struct device dev ;
   struct usb_device_descriptor descriptor ;
   struct usb_host_bos *bos ;
   struct usb_host_config *config ;
   struct usb_host_config *actconfig ;
   struct usb_host_endpoint *ep_in[16U] ;
   struct usb_host_endpoint *ep_out[16U] ;
   char **rawdescriptors ;
   unsigned short bus_mA ;
   u8 portnum ;
   u8 level ;
   unsigned char can_submit : 1 ;
   unsigned char persist_enabled : 1 ;
   unsigned char have_langid : 1 ;
   unsigned char authorized : 1 ;
   unsigned char authenticated : 1 ;
   unsigned char wusb : 1 ;
   unsigned char lpm_capable : 1 ;
   unsigned char usb2_hw_lpm_capable : 1 ;
   unsigned char usb2_hw_lpm_enabled : 1 ;
   unsigned char usb3_lpm_enabled : 1 ;
   int string_langid ;
   char *product ;
   char *manufacturer ;
   char *serial ;
   struct list_head filelist ;
   int maxchild ;
   u32 quirks ;
   atomic_t urbnum ;
   unsigned long active_duration ;
   unsigned long connect_time ;
   unsigned char do_remote_wakeup : 1 ;
   unsigned char reset_resume : 1 ;
   unsigned char port_is_suspended : 1 ;
   struct wusb_dev *wusb_dev ;
   int slot_id ;
   enum usb_device_removable removable ;
   struct usb3_lpm_parameters u1_params ;
   struct usb3_lpm_parameters u2_params ;
   unsigned int lpm_disable_count ;
};
struct usb_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
struct usbdrv_wrap {
   struct device_driver driver ;
   int for_devices ;
};
struct usb_driver {
   char const   *name ;
   int (*probe)(struct usb_interface * , struct usb_device_id  const  * ) ;
   void (*disconnect)(struct usb_interface * ) ;
   int (*unlocked_ioctl)(struct usb_interface * , unsigned int  , void * ) ;
   int (*suspend)(struct usb_interface * , pm_message_t  ) ;
   int (*resume)(struct usb_interface * ) ;
   int (*reset_resume)(struct usb_interface * ) ;
   int (*pre_reset)(struct usb_interface * ) ;
   int (*post_reset)(struct usb_interface * ) ;
   struct usb_device_id  const  *id_table ;
   struct usb_dynids dynids ;
   struct usbdrv_wrap drvwrap ;
   unsigned char no_dynamic_id : 1 ;
   unsigned char supports_autosuspend : 1 ;
   unsigned char disable_hub_initiated_lpm : 1 ;
   unsigned char soft_unbind : 1 ;
};
struct usb_device_driver {
   char const   *name ;
   int (*probe)(struct usb_device * ) ;
   void (*disconnect)(struct usb_device * ) ;
   int (*suspend)(struct usb_device * , pm_message_t  ) ;
   int (*resume)(struct usb_device * , pm_message_t  ) ;
   struct usbdrv_wrap drvwrap ;
   unsigned char supports_autosuspend : 1 ;
};
struct usb_iso_packet_descriptor {
   unsigned int offset ;
   unsigned int length ;
   unsigned int actual_length ;
   int status ;
};
struct urb;
struct urb;
struct usb_anchor {
   struct list_head urb_list ;
   wait_queue_head_t wait ;
   spinlock_t lock ;
   unsigned char poisoned : 1 ;
};
struct scatterlist;
struct scatterlist;
struct urb {
   struct kref kref ;
   void *hcpriv ;
   atomic_t use_count ;
   atomic_t reject ;
   int unlinked ;
   struct list_head urb_list ;
   struct list_head anchor_list ;
   struct usb_anchor *anchor ;
   struct usb_device *dev ;
   struct usb_host_endpoint *ep ;
   unsigned int pipe ;
   unsigned int stream_id ;
   int status ;
   unsigned int transfer_flags ;
   void *transfer_buffer ;
   dma_addr_t transfer_dma ;
   struct scatterlist *sg ;
   int num_mapped_sgs ;
   int num_sgs ;
   u32 transfer_buffer_length ;
   u32 actual_length ;
   unsigned char *setup_packet ;
   dma_addr_t setup_dma ;
   int start_frame ;
   int number_of_packets ;
   int interval ;
   int error_count ;
   void *context ;
   void (*complete)(struct urb * ) ;
   struct usb_iso_packet_descriptor iso_frame_desc[0U] ;
};
struct hc_driver;
struct hc_driver;
struct usb_phy;
struct usb_phy;
struct dma_pool;
struct dma_pool;
struct usb_hcd {
   struct usb_bus self ;
   struct kref kref ;
   char const   *product_desc ;
   int speed ;
   char irq_descr[24U] ;
   struct timer_list rh_timer ;
   struct urb *status_urb ;
   struct work_struct wakeup_work ;
   struct hc_driver  const  *driver ;
   struct usb_phy *phy ;
   unsigned long flags ;
   unsigned char rh_registered : 1 ;
   unsigned char rh_pollable : 1 ;
   unsigned char msix_enabled : 1 ;
   unsigned char uses_new_polling : 1 ;
   unsigned char wireless : 1 ;
   unsigned char authorized_default : 1 ;
   unsigned char has_tt : 1 ;
   unsigned int irq ;
   void *regs ;
   resource_size_t rsrc_start ;
   resource_size_t rsrc_len ;
   unsigned int power_budget ;
   struct mutex *bandwidth_mutex ;
   struct usb_hcd *shared_hcd ;
   struct usb_hcd *primary_hcd ;
   struct dma_pool *pool[4U] ;
   int state ;
   unsigned long hcd_priv[0U] ;
};
struct hc_driver {
   char const   *description ;
   char const   *product_desc ;
   size_t hcd_priv_size ;
   irqreturn_t (*irq)(struct usb_hcd * ) ;
   int flags ;
   int (*reset)(struct usb_hcd * ) ;
   int (*start)(struct usb_hcd * ) ;
   int (*pci_suspend)(struct usb_hcd * , bool  ) ;
   int (*pci_resume)(struct usb_hcd * , bool  ) ;
   void (*stop)(struct usb_hcd * ) ;
   void (*shutdown)(struct usb_hcd * ) ;
   int (*get_frame_number)(struct usb_hcd * ) ;
   int (*urb_enqueue)(struct usb_hcd * , struct urb * , gfp_t  ) ;
   int (*urb_dequeue)(struct usb_hcd * , struct urb * , int  ) ;
   int (*map_urb_for_dma)(struct usb_hcd * , struct urb * , gfp_t  ) ;
   void (*unmap_urb_for_dma)(struct usb_hcd * , struct urb * ) ;
   void (*endpoint_disable)(struct usb_hcd * , struct usb_host_endpoint * ) ;
   void (*endpoint_reset)(struct usb_hcd * , struct usb_host_endpoint * ) ;
   int (*hub_status_data)(struct usb_hcd * , char * ) ;
   int (*hub_control)(struct usb_hcd * , u16  , u16  , u16  , char * , u16  ) ;
   int (*bus_suspend)(struct usb_hcd * ) ;
   int (*bus_resume)(struct usb_hcd * ) ;
   int (*start_port_reset)(struct usb_hcd * , unsigned int  ) ;
   void (*relinquish_port)(struct usb_hcd * , int  ) ;
   int (*port_handed_over)(struct usb_hcd * , int  ) ;
   void (*clear_tt_buffer_complete)(struct usb_hcd * , struct usb_host_endpoint * ) ;
   int (*alloc_dev)(struct usb_hcd * , struct usb_device * ) ;
   void (*free_dev)(struct usb_hcd * , struct usb_device * ) ;
   int (*alloc_streams)(struct usb_hcd * , struct usb_device * , struct usb_host_endpoint ** ,
                        unsigned int  , unsigned int  , gfp_t  ) ;
   int (*free_streams)(struct usb_hcd * , struct usb_device * , struct usb_host_endpoint ** ,
                       unsigned int  , gfp_t  ) ;
   int (*add_endpoint)(struct usb_hcd * , struct usb_device * , struct usb_host_endpoint * ) ;
   int (*drop_endpoint)(struct usb_hcd * , struct usb_device * , struct usb_host_endpoint * ) ;
   int (*check_bandwidth)(struct usb_hcd * , struct usb_device * ) ;
   void (*reset_bandwidth)(struct usb_hcd * , struct usb_device * ) ;
   int (*address_device)(struct usb_hcd * , struct usb_device * ) ;
   int (*update_hub_device)(struct usb_hcd * , struct usb_device * , struct usb_tt * ,
                            gfp_t  ) ;
   int (*reset_device)(struct usb_hcd * , struct usb_device * ) ;
   int (*update_device)(struct usb_hcd * , struct usb_device * ) ;
   int (*set_usb2_hw_lpm)(struct usb_hcd * , struct usb_device * , int  ) ;
   int (*enable_usb3_lpm_timeout)(struct usb_hcd * , struct usb_device * , enum usb3_link_state  ) ;
   int (*disable_usb3_lpm_timeout)(struct usb_hcd * , struct usb_device * , enum usb3_link_state  ) ;
   int (*find_raw_port_number)(struct usb_hcd * , int  ) ;
};
struct usb_tt {
   struct usb_device *hub ;
   int multi ;
   unsigned int think_time ;
   spinlock_t lock ;
   struct list_head clear_list ;
   struct work_struct clear_work ;
};
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations  const  *op ;
   int poll_event ;
   void *private ;
};
struct seq_operations {
   void *(*start)(struct seq_file * , loff_t * ) ;
   void (*stop)(struct seq_file * , void * ) ;
   void *(*next)(struct seq_file * , void * , loff_t * ) ;
   int (*show)(struct seq_file * , void * ) ;
};
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
   int (*remap_pages)(struct vm_area_struct * , unsigned long  , unsigned long  ,
                      unsigned long  ) ;
};
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
struct dma_attrs {
   unsigned long flags[1U] ;
};
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
} ;
struct dma_map_ops {
   void *(*alloc)(struct device * , size_t  , dma_addr_t * , gfp_t  , struct dma_attrs * ) ;
   void (*free)(struct device * , size_t  , void * , dma_addr_t  , struct dma_attrs * ) ;
   int (*mmap)(struct device * , struct vm_area_struct * , void * , dma_addr_t  ,
               size_t  , struct dma_attrs * ) ;
   int (*get_sgtable)(struct device * , struct sg_table * , void * , dma_addr_t  ,
                      size_t  , struct dma_attrs * ) ;
   dma_addr_t (*map_page)(struct device * , struct page * , unsigned long  , size_t  ,
                          enum dma_data_direction  , struct dma_attrs * ) ;
   void (*unmap_page)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ,
                      struct dma_attrs * ) ;
   int (*map_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                 struct dma_attrs * ) ;
   void (*unmap_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                    struct dma_attrs * ) ;
   void (*sync_single_for_cpu)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_single_for_device)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_sg_for_cpu)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   void (*sync_sg_for_device)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   int (*mapping_error)(struct device * , dma_addr_t  ) ;
   int (*dma_supported)(struct device * , u64  ) ;
   int (*set_dma_mask)(struct device * , u64  ) ;
   int is_phys ;
};
struct find_interface_arg {
   int minor ;
   struct device_driver *drv ;
};
typedef int ldv_func_ret_type___2;
struct _ddebug {
   char const   *modname ;
   char const   *function ;
   char const   *filename ;
   char const   *format ;
   unsigned int lineno : 18 ;
   unsigned char flags ;
};
struct atomic_notifier_head;
struct atomic_notifier_head;
struct exec_domain;
struct exec_domain;
struct map_segment;
struct map_segment;
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
struct __anonstruct_mm_segment_t_27 {
   unsigned long seg ;
};
typedef struct __anonstruct_mm_segment_t_27 mm_segment_t;
struct compat_timespec;
struct compat_timespec;
struct __anonstruct_futex_32 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
struct __anonstruct_nanosleep_33 {
   clockid_t clockid ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
struct pollfd;
struct pollfd;
struct __anonstruct_poll_34 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
union __anonunion_ldv_6348_31 {
   struct __anonstruct_futex_32 futex ;
   struct __anonstruct_nanosleep_33 nanosleep ;
   struct __anonstruct_poll_34 poll ;
};
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_6348_31 ldv_6348 ;
};
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   unsigned char sig_on_uaccess_error : 1 ;
   unsigned char uaccess_err : 1 ;
};
struct __wait_queue;
struct __wait_queue;
typedef struct __wait_queue wait_queue_t;
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
enum hrtimer_restart;
struct workqueue_struct;
struct workqueue_struct;
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
struct atomic_notifier_head {
   spinlock_t lock ;
   struct notifier_block *head ;
};
struct blocking_notifier_head {
   struct rw_semaphore rwsem ;
   struct notifier_block *head ;
};
struct usb_qualifier_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 bcdUSB ;
   __u8 bDeviceClass ;
   __u8 bDeviceSubClass ;
   __u8 bDeviceProtocol ;
   __u8 bMaxPacketSize0 ;
   __u8 bNumConfigurations ;
   __u8 bRESERVED ;
};
struct usb_set_sel_req {
   __u8 u1_sel ;
   __u8 u1_pel ;
   __le16 u2_sel ;
   __le16 u2_pel ;
};
enum usb_port_connect_type {
    USB_PORT_CONNECT_TYPE_UNKNOWN = 0,
    USB_PORT_CONNECT_TYPE_HOT_PLUG = 1,
    USB_PORT_CONNECT_TYPE_HARD_WIRED = 2,
    USB_PORT_NOT_USED = 3
} ;
struct usbdevfs_hub_portinfo {
   char nports ;
   char port[127U] ;
};
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
typedef s32 compat_time_t;
typedef s32 compat_long_t;
typedef u32 compat_uptr_t;
struct compat_timespec {
   compat_time_t tv_sec ;
   s32 tv_nsec ;
};
struct compat_robust_list {
   compat_uptr_t next ;
};
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
struct usb_port_status {
   __le16 wPortStatus ;
   __le16 wPortChange ;
};
struct usb_hub_status {
   __le16 wHubStatus ;
   __le16 wHubChange ;
};
struct __anonstruct_hs_208 {
   __u8 DeviceRemovable[4U] ;
   __u8 PortPwrCtrlMask[4U] ;
};
struct __anonstruct_ss_209 {
   __u8 bHubHdrDecLat ;
   __le16 wHubDelay ;
   __le16 DeviceRemovable ;
};
union __anonunion_u_207 {
   struct __anonstruct_hs_208 hs ;
   struct __anonstruct_ss_209 ss ;
};
struct usb_hub_descriptor {
   __u8 bDescLength ;
   __u8 bDescriptorType ;
   __u8 bNbrPorts ;
   __le16 wHubCharacteristics ;
   __u8 bPwrOn2PwrGood ;
   __u8 bHubContrCurrent ;
   union __anonunion_u_207 u ;
};
struct usb_tt_clear {
   struct list_head clear_list ;
   unsigned int tt ;
   u16 devinfo ;
   struct usb_hcd *hcd ;
   struct usb_host_endpoint *ep ;
};
enum usb_phy_events {
    USB_EVENT_NONE = 0,
    USB_EVENT_VBUS = 1,
    USB_EVENT_ID = 2,
    USB_EVENT_CHARGER = 3,
    USB_EVENT_ENUMERATED = 4
} ;
enum usb_phy_type {
    USB_PHY_TYPE_UNDEFINED = 0,
    USB_PHY_TYPE_USB2 = 1,
    USB_PHY_TYPE_USB3 = 2
} ;
enum usb_otg_state {
    OTG_STATE_UNDEFINED = 0,
    OTG_STATE_B_IDLE = 1,
    OTG_STATE_B_SRP_INIT = 2,
    OTG_STATE_B_PERIPHERAL = 3,
    OTG_STATE_B_WAIT_ACON = 4,
    OTG_STATE_B_HOST = 5,
    OTG_STATE_A_IDLE = 6,
    OTG_STATE_A_WAIT_VRISE = 7,
    OTG_STATE_A_WAIT_BCON = 8,
    OTG_STATE_A_HOST = 9,
    OTG_STATE_A_SUSPEND = 10,
    OTG_STATE_A_PERIPHERAL = 11,
    OTG_STATE_A_WAIT_VFALL = 12,
    OTG_STATE_A_VBUS_ERR = 13
} ;
struct usb_otg;
struct usb_otg;
struct usb_phy_io_ops {
   int (*read)(struct usb_phy * , u32  ) ;
   int (*write)(struct usb_phy * , u32  , u32  ) ;
};
struct usb_phy {
   struct device *dev ;
   char const   *label ;
   unsigned int flags ;
   enum usb_phy_type type ;
   enum usb_otg_state state ;
   enum usb_phy_events last_event ;
   struct usb_otg *otg ;
   struct device *io_dev ;
   struct usb_phy_io_ops *io_ops ;
   void *io_priv ;
   struct atomic_notifier_head notifier ;
   u16 port_status ;
   u16 port_change ;
   struct list_head head ;
   int (*init)(struct usb_phy * ) ;
   void (*shutdown)(struct usb_phy * ) ;
   int (*set_vbus)(struct usb_phy * , int  ) ;
   int (*set_power)(struct usb_phy * , unsigned int  ) ;
   int (*set_suspend)(struct usb_phy * , int  ) ;
   int (*notify_connect)(struct usb_phy * , enum usb_device_speed  ) ;
   int (*notify_disconnect)(struct usb_phy * , enum usb_device_speed  ) ;
};
struct usb_gadget;
struct usb_gadget;
struct usb_otg {
   u8 default_a ;
   struct usb_phy *phy ;
   struct usb_bus *host ;
   struct usb_gadget *gadget ;
   int (*set_host)(struct usb_otg * , struct usb_bus * ) ;
   int (*set_peripheral)(struct usb_otg * , struct usb_gadget * ) ;
   int (*set_vbus)(struct usb_otg * , bool  ) ;
   int (*start_srp)(struct usb_otg * ) ;
   int (*start_hnp)(struct usb_otg * ) ;
};
enum pm_qos_flags_status {
    PM_QOS_FLAGS_UNDEFINED = -1,
    PM_QOS_FLAGS_NONE = 0,
    PM_QOS_FLAGS_SOME = 1,
    PM_QOS_FLAGS_ALL = 2
} ;
struct pm_qos_flags_request {
   struct list_head node ;
   s32 flags ;
};
enum dev_pm_qos_req_type {
    DEV_PM_QOS_LATENCY = 1,
    DEV_PM_QOS_FLAGS = 2
} ;
union __anonunion_data_210 {
   struct plist_node pnode ;
   struct pm_qos_flags_request flr ;
};
struct dev_pm_qos_request {
   enum dev_pm_qos_req_type type ;
   union __anonunion_data_210 data ;
   struct device *dev ;
};
enum pm_qos_type {
    PM_QOS_UNITIALIZED = 0,
    PM_QOS_MAX = 1,
    PM_QOS_MIN = 2
} ;
struct pm_qos_constraints {
   struct plist_head list ;
   s32 target_value ;
   s32 default_value ;
   enum pm_qos_type type ;
   struct blocking_notifier_head *notifiers ;
};
struct pm_qos_flags {
   struct list_head list ;
   s32 effective_flags ;
};
struct dev_pm_qos {
   struct pm_qos_constraints latency ;
   struct pm_qos_flags flags ;
   struct dev_pm_qos_request *latency_req ;
   struct dev_pm_qos_request *flags_req ;
};
typedef void *acpi_handle;
struct dev_state;
struct dev_state;
union __anonunion_status_220 {
   struct usb_hub_status hub ;
   struct usb_port_status port ;
};
struct usb_port;
struct usb_port;
struct usb_hub {
   struct device *intfdev ;
   struct usb_device *hdev ;
   struct kref kref ;
   struct urb *urb ;
   u8 (*buffer)[8U] ;
   union __anonunion_status_220 *status ;
   struct mutex status_mutex ;
   int error ;
   int nerrors ;
   struct list_head event_list ;
   unsigned long event_bits[1U] ;
   unsigned long change_bits[1U] ;
   unsigned long busy_bits[1U] ;
   unsigned long removed_bits[1U] ;
   unsigned long wakeup_bits[1U] ;
   struct usb_hub_descriptor *descriptor ;
   struct usb_tt tt ;
   unsigned int mA_per_port ;
   unsigned char limited_power : 1 ;
   unsigned char quiescing : 1 ;
   unsigned char disconnected : 1 ;
   unsigned char quirk_check_port_auto_suspend : 1 ;
   unsigned char has_indicators : 1 ;
   u8 indicator[31U] ;
   struct delayed_work leds ;
   struct delayed_work init_work ;
   struct usb_port **ports ;
};
struct usb_port {
   struct usb_device *child ;
   struct device dev ;
   struct dev_state *port_owner ;
   enum usb_port_connect_type connect_type ;
   u8 portnum ;
   unsigned char power_is_on : 1 ;
   unsigned char did_runtime_put : 1 ;
};
enum hub_activation_type {
    HUB_INIT = 0,
    HUB_INIT2 = 1,
    HUB_INIT3 = 2,
    HUB_POST_RESET = 3,
    HUB_RESUME = 4,
    HUB_RESET_RESUME = 5
} ;
enum hub_quiescing_type {
    HUB_DISCONNECT = 0,
    HUB_PRE_RESET = 1,
    HUB_SUSPEND = 2
} ;
union __anonunion_222 {
   struct usb_hub_status hub ;
   struct usb_port_status port ;
};
typedef __u64 __le64;
struct paravirt_callee_save {
   void *func ;
};
struct pv_irq_ops {
   struct paravirt_callee_save save_fl ;
   struct paravirt_callee_save restore_fl ;
   struct paravirt_callee_save irq_disable ;
   struct paravirt_callee_save irq_enable ;
   void (*safe_halt)(void) ;
   void (*halt)(void) ;
   void (*adjust_exception_frame)(void) ;
};
enum hrtimer_restart;
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char const   *name ;
   unsigned long flags ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
struct uts_namespace;
struct uts_namespace;
struct mnt_namespace;
struct mnt_namespace;
struct ipc_namespace;
struct ipc_namespace;
struct net;
struct net;
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns ;
   struct net *net_ns ;
};
struct new_utsname {
   char sysname[65U] ;
   char nodename[65U] ;
   char release[65U] ;
   char version[65U] ;
   char machine[65U] ;
   char domainname[65U] ;
};
struct uts_namespace {
   struct kref kref ;
   struct new_utsname name ;
   struct user_namespace *user_ns ;
   unsigned int proc_inum ;
};
struct pdev_archdata {

};
struct platform_device_id {
   char name[20U] ;
   kernel_ulong_t driver_data ;
};
struct mfd_cell;
struct mfd_cell;
struct platform_device {
   char const   *name ;
   int id ;
   bool id_auto ;
   struct device dev ;
   u32 num_resources ;
   struct resource *resource ;
   struct platform_device_id  const  *id_entry ;
   struct mfd_cell *mfd_cell ;
   struct pdev_archdata archdata ;
};
struct usb_ctrlrequest {
   __u8 bRequestType ;
   __u8 bRequest ;
   __le16 wValue ;
   __le16 wIndex ;
   __le16 wLength ;
};
struct usb_mon_operations {
   void (*urb_submit)(struct usb_bus * , struct urb * ) ;
   void (*urb_submit_error)(struct usb_bus * , struct urb * , int  ) ;
   void (*urb_complete)(struct usb_bus * , struct urb * , int  ) ;
};
struct usb_busmap {
   unsigned long busmap[1U] ;
};
enum hrtimer_restart;
enum hrtimer_restart;
struct usb_sg_request {
   int status ;
   size_t bytes ;
   spinlock_t lock ;
   struct usb_device *dev ;
   int pipe ;
   int entries ;
   struct urb **urbs ;
   int count ;
   struct completion complete ;
};
typedef u16 wchar_t;
enum utf16_endian {
    UTF16_HOST_ENDIAN = 0,
    UTF16_LITTLE_ENDIAN = 1,
    UTF16_BIG_ENDIAN = 2
} ;
struct api_context {
   struct completion done ;
   int status ;
};
struct set_config_request {
   struct usb_device *udev ;
   int config ;
   struct work_struct work ;
   struct list_head node ;
};
enum hrtimer_restart;
struct usb_dynid {
   struct list_head node ;
   struct usb_device_id id ;
};
struct usb_dev_cap_header {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bDevCapabilityType ;
};
enum hrtimer_restart;
enum hrtimer_restart;
struct usb_class_driver {
   char *name ;
   char *(*devnode)(struct device * , umode_t * ) ;
   struct file_operations  const  *fops ;
   int minor_base ;
};
struct usb_class {
   struct kref kref ;
   struct class *class ;
};
enum hrtimer_restart;
enum hrtimer_restart;
enum hrtimer_restart;
struct ep_device {
   struct usb_endpoint_descriptor *desc ;
   struct usb_device *udev ;
   struct device dev ;
};
enum hrtimer_restart;
struct __large_struct {
   unsigned long buf[100U] ;
};
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
struct poll_table_struct {
   void (*_qproc)(struct file * , wait_queue_head_t * , struct poll_table_struct * ) ;
   unsigned long _key ;
};
typedef struct poll_table_struct poll_table;
struct usbdevfs_ctrltransfer {
   __u8 bRequestType ;
   __u8 bRequest ;
   __u16 wValue ;
   __u16 wIndex ;
   __u16 wLength ;
   __u32 timeout ;
   void *data ;
};
struct usbdevfs_bulktransfer {
   unsigned int ep ;
   unsigned int len ;
   unsigned int timeout ;
   void *data ;
};
struct usbdevfs_setinterface {
   unsigned int interface ;
   unsigned int altsetting ;
};
struct usbdevfs_disconnectsignal {
   unsigned int signr ;
   void *context ;
};
struct usbdevfs_getdriver {
   unsigned int interface ;
   char driver[256U] ;
};
struct usbdevfs_connectinfo {
   unsigned int devnum ;
   unsigned char slow ;
};
struct usbdevfs_iso_packet_desc {
   unsigned int length ;
   unsigned int actual_length ;
   unsigned int status ;
};
struct usbdevfs_urb {
   unsigned char type ;
   unsigned char endpoint ;
   int status ;
   unsigned int flags ;
   void *buffer ;
   int buffer_length ;
   int actual_length ;
   int start_frame ;
   int number_of_packets ;
   int error_count ;
   unsigned int signr ;
   void *usercontext ;
   struct usbdevfs_iso_packet_desc iso_frame_desc[0U] ;
};
struct usbdevfs_ioctl {
   int ifno ;
   int ioctl_code ;
   void *data ;
};
struct usbdevfs_disconnect_claim {
   unsigned int interface ;
   unsigned int flags ;
   char driver[256U] ;
};
typedef u32 compat_caddr_t;
typedef s32 compat_int_t;
typedef u32 compat_uint_t;
struct usbdevfs_ctrltransfer32 {
   u8 bRequestType ;
   u8 bRequest ;
   u16 wValue ;
   u16 wIndex ;
   u16 wLength ;
   u32 timeout ;
   compat_caddr_t data ;
};
struct usbdevfs_bulktransfer32 {
   compat_uint_t ep ;
   compat_uint_t len ;
   compat_uint_t timeout ;
   compat_caddr_t data ;
};
struct usbdevfs_disconnectsignal32 {
   compat_int_t signr ;
   compat_caddr_t context ;
};
struct usbdevfs_urb32 {
   unsigned char type ;
   unsigned char endpoint ;
   compat_int_t status ;
   compat_uint_t flags ;
   compat_caddr_t buffer ;
   compat_int_t buffer_length ;
   compat_int_t actual_length ;
   compat_int_t start_frame ;
   compat_int_t number_of_packets ;
   compat_int_t error_count ;
   compat_uint_t signr ;
   compat_caddr_t usercontext ;
   struct usbdevfs_iso_packet_desc iso_frame_desc[0U] ;
};
struct usbdevfs_ioctl32 {
   s32 ifno ;
   s32 ioctl_code ;
   compat_caddr_t data ;
};
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations  const  *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
};
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
struct uid_gid_map {
   u32 nr_extents ;
   struct uid_gid_extent extent[5U] ;
};
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   kuid_t owner ;
   kgid_t group ;
   unsigned int proc_inum ;
   bool may_mount_sysfs ;
   bool may_mount_proc ;
};
struct dev_state {
   struct list_head list ;
   struct usb_device *dev ;
   struct file *file ;
   spinlock_t lock ;
   struct list_head async_pending ;
   struct list_head async_completed ;
   wait_queue_head_t wait ;
   unsigned int discsignr ;
   struct pid *disc_pid ;
   struct cred  const  *cred ;
   void *disccontext ;
   unsigned long ifclaimed ;
   u32 secid ;
   u32 disabled_bulk_eps ;
};
struct async {
   struct list_head asynclist ;
   struct dev_state *ps ;
   struct pid *pid ;
   struct cred  const  *cred ;
   unsigned int signr ;
   unsigned int ifnum ;
   void *userbuffer ;
   void *userurb ;
   struct urb *urb ;
   unsigned int mem_usage ;
   int status ;
   u32 secid ;
   u8 bulk_addr ;
   u8 bulk_status ;
};
enum snoop_when {
    SUBMIT = 0,
    COMPLETE = 1
} ;
enum hrtimer_restart;
enum hrtimer_restart;
enum hrtimer_restart;
enum hrtimer_restart;
struct device_connect_event {
   atomic_t count ;
   wait_queue_head_t wait ;
};
struct class_info {
   int class ;
   char *class_name ;
};
enum hrtimer_restart;
enum hrtimer_restart;
struct pci_dev;
struct pci_dev;
struct pci_bus;
struct pci_bus;
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
struct hotplug_slot;
struct hotplug_slot;
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
typedef int pci_power_t;
typedef unsigned int pci_channel_state_t;
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
} ;
typedef unsigned short pci_dev_flags_t;
typedef unsigned short pci_bus_flags_t;
struct pcie_link_state;
struct pcie_link_state;
struct pci_vpd;
struct pci_vpd;
struct pci_sriov;
struct pci_sriov;
struct pci_ats;
struct pci_ats;
struct proc_dir_entry;
struct proc_dir_entry;
struct pci_driver;
struct pci_driver;
union __anonunion_ldv_15902_138 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   unsigned char pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   u8 pm_cap ;
   unsigned char pme_support : 5 ;
   unsigned char pme_interrupt : 1 ;
   unsigned char pme_poll : 1 ;
   unsigned char d1_support : 1 ;
   unsigned char d2_support : 1 ;
   unsigned char no_d1d2 : 1 ;
   unsigned char no_d3cold : 1 ;
   unsigned char d3cold_allowed : 1 ;
   unsigned char mmio_always_on : 1 ;
   unsigned char wakeup_prepared : 1 ;
   unsigned char runtime_d3cold : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned char transparent : 1 ;
   unsigned char multifunction : 1 ;
   unsigned char is_added : 1 ;
   unsigned char is_busmaster : 1 ;
   unsigned char no_msi : 1 ;
   unsigned char block_cfg_access : 1 ;
   unsigned char broken_parity_status : 1 ;
   unsigned char irq_reroute_variant : 2 ;
   unsigned char msi_enabled : 1 ;
   unsigned char msix_enabled : 1 ;
   unsigned char ari_enabled : 1 ;
   unsigned char is_managed : 1 ;
   unsigned char is_pcie : 1 ;
   unsigned char needs_freset : 1 ;
   unsigned char state_saved : 1 ;
   unsigned char is_physfn : 1 ;
   unsigned char is_virtfn : 1 ;
   unsigned char reset_fn : 1 ;
   unsigned char is_hotplug_bridge : 1 ;
   unsigned char __aer_firmware_first_valid : 1 ;
   unsigned char __aer_firmware_first : 1 ;
   unsigned char broken_intx_masking : 1 ;
   unsigned char io_window_1k : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   struct list_head msi_list ;
   struct kset *msi_kset ;
   struct pci_vpd *vpd ;
   union __anonunion_ldv_15902_138 ldv_15902 ;
   struct pci_ats *ats ;
   phys_addr_t rom ;
   size_t romlen ;
};
struct pci_ops;
struct pci_ops;
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned char is_added : 1 ;
};
struct pci_ops {
   int (*read)(struct pci_bus * , unsigned int  , int  , int  , u32 * ) ;
   int (*write)(struct pci_bus * , unsigned int  , int  , int  , u32  ) ;
};
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
typedef unsigned int pci_ers_result_t;
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev * , enum pci_channel_state  ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev * ) ;
   pci_ers_result_t (*link_reset)(struct pci_dev * ) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev * ) ;
   void (*resume)(struct pci_dev * ) ;
};
struct pci_driver {
   struct list_head node ;
   char const   *name ;
   struct pci_device_id  const  *id_table ;
   int (*probe)(struct pci_dev * , struct pci_device_id  const  * ) ;
   void (*remove)(struct pci_dev * ) ;
   int (*suspend)(struct pci_dev * , pm_message_t  ) ;
   int (*suspend_late)(struct pci_dev * , pm_message_t  ) ;
   int (*resume_early)(struct pci_dev * ) ;
   int (*resume)(struct pci_dev * ) ;
   void (*shutdown)(struct pci_dev * ) ;
   int (*sriov_configure)(struct pci_dev * , int  ) ;
   struct pci_error_handlers  const  *err_handler ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
enum hrtimer_restart;
typedef u64 acpi_size;
typedef u64 acpi_io_address;
typedef u32 acpi_status;
typedef char *acpi_string;
typedef u32 acpi_object_type;
struct __anonstruct_integer_182 {
   acpi_object_type type ;
   u64 value ;
};
struct __anonstruct_string_183 {
   acpi_object_type type ;
   u32 length ;
   char *pointer ;
};
struct __anonstruct_buffer_184 {
   acpi_object_type type ;
   u32 length ;
   u8 *pointer ;
};
union acpi_object;
struct __anonstruct_package_185 {
   acpi_object_type type ;
   u32 count ;
   union acpi_object *elements ;
};
struct __anonstruct_reference_186 {
   acpi_object_type type ;
   acpi_object_type actual_type ;
   acpi_handle handle ;
};
struct __anonstruct_processor_187 {
   acpi_object_type type ;
   u32 proc_id ;
   acpi_io_address pblk_address ;
   u32 pblk_length ;
};
struct __anonstruct_power_resource_188 {
   acpi_object_type type ;
   u32 system_level ;
   u32 resource_order ;
};
union acpi_object {
   acpi_object_type type ;
   struct __anonstruct_integer_182 integer ;
   struct __anonstruct_string_183 string ;
   struct __anonstruct_buffer_184 buffer ;
   struct __anonstruct_package_185 package ;
   struct __anonstruct_reference_186 reference ;
   struct __anonstruct_processor_187 processor ;
   struct __anonstruct_power_resource_188 power_resource ;
};
struct acpi_object_list {
   u32 count ;
   union acpi_object *pointer ;
};
struct acpi_buffer {
   acpi_size length ;
   void *pointer ;
};
struct acpi_pld_info {
   u8 revision ;
   u8 ignore_color ;
   u32 color ;
   u16 width ;
   u16 height ;
   u8 user_visible ;
   u8 dock ;
   u8 lid ;
   u8 panel ;
   u8 vertical_position ;
   u8 horizontal_position ;
   u8 shape ;
   u8 group_orientation ;
   u8 group_token ;
   u8 group_position ;
   u8 bay ;
   u8 ejectable ;
   u8 ospm_eject_required ;
   u8 cabinet_number ;
   u8 card_cage_number ;
   u8 reference ;
   u8 rotation ;
   u8 order ;
   u8 reserved ;
   u16 vertical_offset ;
   u16 horizontal_offset ;
};
struct acpi_bus_type {
   struct list_head list ;
   char const   *name ;
   bool (*match)(struct device * ) ;
   int (*find_device)(struct device * , acpi_handle ** ) ;
   void (*setup)(struct device * ) ;
   void (*cleanup)(struct device * ) ;
};
/* compiler builtin: 
   void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;  */
/* compiler builtin: 
   unsigned long __builtin_object_size(void * , int  ) ;  */
long ldv__builtin_expect(long exp , long c ) ;
extern struct module __this_module ;
extern int printk(char const   *  , ...) ;
extern int snprintf(char * , size_t  , char const   *  , ...) ;
extern char *kasprintf(gfp_t  , char const   *  , ...) ;
 static void INIT_LIST_HEAD(struct list_head *list ) 
{ 

  {
  list->next = list;
  list->prev = list;
  return;
}
}
 static void atomic_set(atomic_t *v , int i ) 
{ 

  {
  v->counter = i;
  return;
}
}
extern int mutex_trylock(struct mutex * ) ;
int ldv_mutex_trylock_4(struct mutex *ldv_func_arg1 ) ;
extern void mutex_unlock(struct mutex * ) ;
void ldv_mutex_unlock_2(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_5(struct mutex *ldv_func_arg1 ) ;
extern void mutex_lock(struct mutex * ) ;
void ldv_mutex_lock_1(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_3(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_lock(struct mutex *lock ) ;
void ldv_mutex_unlock_lock(struct mutex *lock ) ;
void ldv_mutex_lock_mutex_of_device(struct mutex *lock ) ;
int ldv_mutex_trylock_mutex_of_device(struct mutex *lock ) ;
void ldv_mutex_unlock_mutex_of_device(struct mutex *lock ) ;
extern unsigned long volatile   jiffies ;
extern int add_uevent_var(struct kobj_uevent_env * , char const   *  , ...) ;
extern void kfree(void const   * ) ;
extern void *__kmalloc(size_t  , gfp_t  ) ;
 static void *kmalloc(size_t size , gfp_t flags ) 
{ void *tmp___2 ;

  {
  tmp___2 = __kmalloc(size, flags);
  return (tmp___2);
}
}
 static void *kzalloc(size_t size , gfp_t flags ) 
{ void *tmp ;

  {
  tmp = kmalloc(size, flags | 32768U);
  return (tmp);
}
}
extern void msleep(unsigned int  ) ;
extern int bus_register(struct bus_type * ) ;
extern void bus_unregister(struct bus_type * ) ;
extern struct device *bus_find_device(struct bus_type * , struct device * , void * ,
                                      int (*)(struct device * , void * ) ) ;
extern int bus_register_notifier(struct bus_type * , struct notifier_block * ) ;
extern int bus_unregister_notifier(struct bus_type * , struct notifier_block * ) ;
extern int dev_set_name(struct device * , char const   *  , ...) ;
 static int dev_to_node(struct device *dev ) 
{ 

  {
  return (dev->numa_node);
}
}
 static void set_dev_node(struct device *dev , int node ) 
{ 

  {
  dev->numa_node = node;
  return;
}
}
 static int device_trylock(struct device *dev ) 
{ int tmp ;

  {
  tmp = ldv_mutex_trylock_4(& dev->mutex);
  return (tmp);
}
}
extern void device_initialize(struct device * ) ;
extern struct device *get_device(struct device * ) ;
extern void put_device(struct device * ) ;
extern void pm_runtime_set_autosuspend_delay(struct device * , int  ) ;
struct usb_interface *usb_get_intf(struct usb_interface *intf ) ;
void usb_put_intf(struct usb_interface *intf ) ;
int __usb_get_extra_descriptor(char *buffer , unsigned int size , unsigned char type ,
                               void **ptr ) ;
struct usb_device *usb_get_dev(struct usb_device *dev ) ;
void usb_put_dev(struct usb_device *dev ) ;
int usb_lock_device_for_reset(struct usb_device *udev , struct usb_interface  const  *iface ) ;
int usb_get_current_frame_number(struct usb_device *dev ) ;
struct usb_interface *usb_find_interface(struct usb_driver *drv , int minor ) ;
struct usb_interface *usb_ifnum_to_if(struct usb_device  const  *dev , unsigned int ifnum ) ;
struct usb_host_interface *usb_altnum_to_altsetting(struct usb_interface  const  *intf ,
                                                    unsigned int altnum ) ;
struct usb_host_interface *usb_find_alt_setting(struct usb_host_config *config , unsigned int iface_num ,
                                                unsigned int alt_num ) ;
struct bus_type usb_bus_type ;
int usb_register_driver(struct usb_driver *new_driver , struct module *owner , char const   *mod_name ) ;
void usb_deregister(struct usb_driver *driver ) ;
int usb_register_device_driver(struct usb_device_driver *new_udriver , struct module *owner ) ;
void usb_deregister_device_driver(struct usb_device_driver *udriver ) ;
int usb_disabled(void) ;
void *usb_alloc_coherent(struct usb_device *dev , size_t size , gfp_t mem_flags ,
                         dma_addr_t *dma ) ;
void usb_free_coherent(struct usb_device *dev , size_t size , void *addr , dma_addr_t dma ) ;
struct dentry *usb_debug_root  ;
 static struct usb_hcd *bus_to_hcd(struct usb_bus *bus ) 
{ struct usb_bus  const  *__mptr ;

  {
  __mptr = (struct usb_bus  const  *)bus;
  return ((struct usb_hcd *)__mptr);
}
}
int usb_hcd_get_frame_number(struct usb_device *udev ) ;
struct usb_hcd *usb_get_hcd(struct usb_hcd *hcd ) ;
void usb_put_hcd(struct usb_hcd *hcd ) ;
void *hcd_buffer_alloc(struct usb_bus *bus , size_t size , gfp_t mem_flags , dma_addr_t *dma ) ;
void hcd_buffer_free(struct usb_bus *bus , size_t size , void *addr , dma_addr_t dma ) ;
struct usb_device *usb_alloc_dev(struct usb_device *parent , struct usb_bus *bus ,
                                 unsigned int port1 ) ;
void usb_destroy_configuration(struct usb_device *dev ) ;
extern struct dentry *debugfs_create_file(char const   * , umode_t  , struct dentry * ,
                                          void * , struct file_operations  const  * ) ;
extern struct dentry *debugfs_create_dir(char const   * , struct dentry * ) ;
extern void debugfs_remove(struct dentry * ) ;
int usb_create_sysfs_dev_files(struct usb_device *udev ) ;
void usb_remove_sysfs_dev_files(struct usb_device *udev ) ;
void usb_create_sysfs_intf_files(struct usb_interface *intf ) ;
void usb_remove_sysfs_intf_files(struct usb_interface *intf ) ;
void usb_enable_endpoint(struct usb_device *dev , struct usb_host_endpoint *ep , bool reset_ep ) ;
void usb_release_bos_descriptor(struct usb_device *dev ) ;
int usb_hub_init(void) ;
void usb_hub_cleanup(void) ;
int usb_major_init(void) ;
void usb_major_cleanup(void) ;
int usb_suspend(struct device *dev , pm_message_t msg ) ;
int usb_resume(struct device *dev , pm_message_t msg ) ;
int usb_resume_complete(struct device *dev ) ;
int usb_runtime_suspend(struct device *dev ) ;
int usb_runtime_resume(struct device *dev ) ;
int usb_runtime_idle(struct device *dev ) ;
struct device_type usb_device_type ;
struct device_type usb_if_device_type ;
struct usb_device_driver usb_generic_driver ;
 static int is_usb_interface(struct device  const  *dev ) 
{ 

  {
  return ((unsigned long )((struct device_type  const  *)dev->type) == (unsigned long )((struct device_type  const  *)(& usb_if_device_type)));
}
}
char const   *usbcore_name ;
struct attribute_group  const  *usb_device_groups[3U] ;
struct usb_driver usbfs_driver ;
struct file_operations  const  usbfs_devices_fops ;
int usb_devio_init(void) ;
void usb_devio_cleanup(void) ;
int usb_acpi_register(void) ;
void usb_acpi_unregister(void) ;
char const   *usbcore_name  =    "usbcore";
static bool nousb  ;
static int usb_autosuspend_delay  =    2;
struct usb_host_interface *usb_find_alt_setting(struct usb_host_config *config , unsigned int iface_num ,
                                                unsigned int alt_num ) 
{ struct usb_interface_cache *intf_cache ;
  int i ;

  {
  intf_cache = 0;
  i = 0;
  goto ldv_32494;
  ldv_32493: ;
  if ((unsigned int )(config->intf_cache[i])->altsetting[0].desc.bInterfaceNumber == iface_num) {
    intf_cache = config->intf_cache[i];
    goto ldv_32492;
  }
  i ++;
  ldv_32494: ;
  if ((int )config->desc.bNumInterfaces > i) {
    goto ldv_32493;
  }
  ldv_32492: ;
  if ((unsigned long )intf_cache == (unsigned long )((struct usb_interface_cache *)0)) {
    return (0);
  }
  i = 0;
  goto ldv_32496;
  ldv_32495: ;
  if ((unsigned int )intf_cache->altsetting[i].desc.bAlternateSetting == alt_num) {
    return ((struct usb_host_interface *)(& intf_cache->altsetting) + (unsigned long )i);
  }
  i ++;
  ldv_32496: ;
  if ((unsigned int )i < intf_cache->num_altsetting) {
    goto ldv_32495;
  }
  printk("\017Did not find alt setting %u for intf %u, config %u\n", alt_num, iface_num,
         (int )config->desc.bConfigurationValue);
  return (0);
}
}
struct usb_interface *usb_ifnum_to_if(struct usb_device  const  *dev , unsigned int ifnum ) 
{ struct usb_host_config *config ;
  int i ;

  {
  config = dev->actconfig;
  if ((unsigned long )config == (unsigned long )((struct usb_host_config *)0)) {
    return (0);
  }
  i = 0;
  goto ldv_32513;
  ldv_32512: ;
  if ((unsigned int )((config->interface[i])->altsetting)->desc.bInterfaceNumber == ifnum) {
    return (config->interface[i]);
  }
  i ++;
  ldv_32513: ;
  if ((int )config->desc.bNumInterfaces > i) {
    goto ldv_32512;
  }
  return (0);
}
}
struct usb_host_interface *usb_altnum_to_altsetting(struct usb_interface  const  *intf ,
                                                    unsigned int altnum ) 
{ int i ;

  {
  i = 0;
  goto ldv_32528;
  ldv_32527: ;
  if ((unsigned int )(intf->altsetting + (unsigned long )i)->desc.bAlternateSetting == altnum) {
    return ((struct usb_host_interface *)intf->altsetting + (unsigned long )i);
  }
  i ++;
  ldv_32528: ;
  if ((unsigned int )i < (unsigned int )intf->num_altsetting) {
    goto ldv_32527;
  }
  return (0);
}
}
static int __find_interface(struct device *dev , void *data ) 
{ struct find_interface_arg *arg ;
  struct usb_interface *intf ;
  int tmp ;
  struct device  const  *__mptr ;

  {
  arg = (struct find_interface_arg *)data;
  tmp = is_usb_interface((struct device  const  *)dev);
  if (tmp == 0) {
    return (0);
  }
  if ((unsigned long )dev->driver != (unsigned long )arg->drv) {
    return (0);
  }
  __mptr = (struct device  const  *)dev;
  intf = (struct usb_interface *)__mptr + 0xffffffffffffffd0UL;
  return (intf->minor == arg->minor);
}
}
struct usb_interface *usb_find_interface(struct usb_driver *drv , int minor ) 
{ struct find_interface_arg argb ;
  struct device *dev ;
  struct device  const  *__mptr ;
  struct usb_interface *tmp ;

  {
  argb.minor = minor;
  argb.drv = & drv->drvwrap.driver;
  dev = bus_find_device(& usb_bus_type, 0, (void *)(& argb), & __find_interface);
  put_device(dev);
  if ((unsigned long )dev != (unsigned long )((struct device *)0)) {
    __mptr = (struct device  const  *)dev;
    tmp = (struct usb_interface *)__mptr + 0xffffffffffffffd0UL;
  } else {
    tmp = 0;
  }
  return (tmp);
}
}
static void usb_release_dev(struct device *dev ) 
{ struct usb_device *udev ;
  struct usb_hcd *hcd ;
  struct device  const  *__mptr ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  hcd = bus_to_hcd(udev->bus);
  usb_destroy_configuration(udev);
  usb_release_bos_descriptor(udev);
  usb_put_hcd(hcd);
  kfree((void const   *)udev->product);
  kfree((void const   *)udev->manufacturer);
  kfree((void const   *)udev->serial);
  kfree((void const   *)udev);
  return;
}
}
static int usb_dev_uevent(struct device *dev , struct kobj_uevent_env *env ) 
{ struct usb_device *usb_dev ;
  struct device  const  *__mptr ;
  int tmp ;
  int tmp___0 ;

  {
  __mptr = (struct device  const  *)dev;
  usb_dev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  tmp = add_uevent_var(env, "BUSNUM=%03d", (usb_dev->bus)->busnum);
  if (tmp != 0) {
    return (-12);
  }
  tmp___0 = add_uevent_var(env, "DEVNUM=%03d", usb_dev->devnum);
  if (tmp___0 != 0) {
    return (-12);
  }
  return (0);
}
}
static int usb_dev_prepare(struct device *dev ) 
{ 

  {
  return (0);
}
}
static void usb_dev_complete(struct device *dev ) 
{ 

  {
  usb_resume_complete(dev);
  return;
}
}
static int usb_dev_suspend(struct device *dev ) 
{ struct pm_message __constr_expr_0 ;
  int tmp ;

  {
  __constr_expr_0.event = 2;
  tmp = usb_suspend(dev, __constr_expr_0);
  return (tmp);
}
}
static int usb_dev_resume(struct device *dev ) 
{ struct pm_message __constr_expr_0 ;
  int tmp ;

  {
  __constr_expr_0.event = 16;
  tmp = usb_resume(dev, __constr_expr_0);
  return (tmp);
}
}
static int usb_dev_freeze(struct device *dev ) 
{ struct pm_message __constr_expr_0 ;
  int tmp ;

  {
  __constr_expr_0.event = 1;
  tmp = usb_suspend(dev, __constr_expr_0);
  return (tmp);
}
}
static int usb_dev_thaw(struct device *dev ) 
{ struct pm_message __constr_expr_0 ;
  int tmp ;

  {
  __constr_expr_0.event = 32;
  tmp = usb_resume(dev, __constr_expr_0);
  return (tmp);
}
}
static int usb_dev_poweroff(struct device *dev ) 
{ struct pm_message __constr_expr_0 ;
  int tmp ;

  {
  __constr_expr_0.event = 4;
  tmp = usb_suspend(dev, __constr_expr_0);
  return (tmp);
}
}
static int usb_dev_restore(struct device *dev ) 
{ struct pm_message __constr_expr_0 ;
  int tmp ;

  {
  __constr_expr_0.event = 64;
  tmp = usb_resume(dev, __constr_expr_0);
  return (tmp);
}
}
static struct dev_pm_ops  const  usb_device_pm_ops  = 
     {& usb_dev_prepare, & usb_dev_complete, & usb_dev_suspend, & usb_dev_resume, & usb_dev_freeze,
    & usb_dev_thaw, & usb_dev_poweroff, & usb_dev_restore, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, & usb_runtime_suspend, & usb_runtime_resume, & usb_runtime_idle};
static char *usb_devnode(struct device *dev , umode_t *mode , kuid_t *uid , kgid_t *gid ) 
{ struct usb_device *usb_dev ;
  struct device  const  *__mptr ;
  char *tmp ;

  {
  __mptr = (struct device  const  *)dev;
  usb_dev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  tmp = kasprintf(208U, "bus/usb/%03d/%03d", (usb_dev->bus)->busnum, usb_dev->devnum);
  return (tmp);
}
}
struct device_type usb_device_type  =    {"usb_device", 0, & usb_dev_uevent, & usb_devnode, & usb_release_dev, & usb_device_pm_ops};
static unsigned int usb_bus_is_wusb(struct usb_bus *bus ) 
{ struct usb_hcd *hcd ;
  struct usb_bus  const  *__mptr ;

  {
  __mptr = (struct usb_bus  const  *)bus;
  hcd = (struct usb_hcd *)__mptr;
  return ((unsigned int )hcd->wireless);
}
}
struct usb_device *usb_alloc_dev(struct usb_device *parent , struct usb_bus *bus ,
                                 unsigned int port1 ) 
{ struct usb_device *dev ;
  struct usb_hcd *usb_hcd ;
  struct usb_hcd *tmp ;
  unsigned int root_hub ;
  void *tmp___0 ;
  struct usb_hcd *tmp___1 ;
  struct usb_hcd *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  unsigned int tmp___6 ;

  {
  tmp = bus_to_hcd(bus);
  usb_hcd = tmp;
  root_hub = 0U;
  tmp___0 = kzalloc(1736UL, 208U);
  dev = (struct usb_device *)tmp___0;
  if ((unsigned long )dev == (unsigned long )((struct usb_device *)0)) {
    return (0);
  }
  tmp___1 = usb_get_hcd(usb_hcd);
  if ((unsigned long )tmp___1 == (unsigned long )((struct usb_hcd *)0)) {
    kfree((void const   *)dev);
    return (0);
  }
  if ((unsigned long )(usb_hcd->driver)->alloc_dev != (unsigned long )((int (*)(struct usb_hcd * ,
                                                                                struct usb_device * ))0) && (unsigned long )parent != (unsigned long )((struct usb_device *)0)) {
    tmp___3 = (*((usb_hcd->driver)->alloc_dev))(usb_hcd, dev);
    if (tmp___3 == 0) {
      tmp___2 = bus_to_hcd(bus);
      usb_put_hcd(tmp___2);
      kfree((void const   *)dev);
      return (0);
    }
  }
  device_initialize(& dev->dev);
  dev->dev.bus = & usb_bus_type;
  dev->dev.type = (struct device_type  const  *)(& usb_device_type);
  dev->dev.groups = (struct attribute_group  const  **)(& usb_device_groups);
  dev->dev.dma_mask = (bus->controller)->dma_mask;
  tmp___4 = dev_to_node(bus->controller);
  set_dev_node(& dev->dev, tmp___4);
  dev->state = 1;
  dev->lpm_disable_count = 1U;
  atomic_set(& dev->urbnum, 0);
  INIT_LIST_HEAD(& dev->ep0.urb_list);
  dev->ep0.desc.bLength = 7U;
  dev->ep0.desc.bDescriptorType = 5U;
  usb_enable_endpoint(dev, & dev->ep0, 0);
  dev->can_submit = 1U;
  tmp___5 = ldv__builtin_expect((unsigned long )parent == (unsigned long )((struct usb_device *)0),
                                0L);
  if (tmp___5 != 0L) {
    dev->devpath[0] = 48;
    dev->route = 0U;
    dev->dev.parent = bus->controller;
    dev_set_name(& dev->dev, "usb%d", bus->busnum);
    root_hub = 1U;
  } else {
    if ((int )((signed char )parent->devpath[0]) == 48) {
      snprintf((char *)(& dev->devpath), 16UL, "%d", port1);
      dev->route = 0U;
    } else {
      snprintf((char *)(& dev->devpath), 16UL, "%s.%d", (char *)(& parent->devpath),
               port1);
      if (port1 <= 14U) {
        dev->route = parent->route + (port1 << ((int )parent->level + -1) * 4);
      } else {
        dev->route = parent->route + (u32 )(15 << ((int )parent->level + -1) * 4);
      }
    }
    dev->dev.parent = & parent->dev;
    dev_set_name(& dev->dev, "%d-%s", bus->busnum, (char *)(& dev->devpath));
  }
  dev->portnum = (u8 )port1;
  dev->bus = bus;
  dev->parent = parent;
  INIT_LIST_HEAD(& dev->filelist);
  pm_runtime_set_autosuspend_delay(& dev->dev, usb_autosuspend_delay * 1000);
  dev->connect_time = jiffies;
  dev->active_duration = - jiffies;
  if (root_hub != 0U) {
    dev->authorized = 1U;
  } else {
    dev->authorized = usb_hcd->authorized_default;
    tmp___6 = usb_bus_is_wusb(bus);
    dev->wusb = tmp___6 != 0U;
  }
  return (dev);
}
}
struct usb_device *usb_get_dev(struct usb_device *dev ) 
{ 

  {
  if ((unsigned long )dev != (unsigned long )((struct usb_device *)0)) {
    get_device(& dev->dev);
  }
  return (dev);
}
}
void usb_put_dev(struct usb_device *dev ) 
{ 

  {
  if ((unsigned long )dev != (unsigned long )((struct usb_device *)0)) {
    put_device(& dev->dev);
  }
  return;
}
}
struct usb_interface *usb_get_intf(struct usb_interface *intf ) 
{ 

  {
  if ((unsigned long )intf != (unsigned long )((struct usb_interface *)0)) {
    get_device(& intf->dev);
  }
  return (intf);
}
}
void usb_put_intf(struct usb_interface *intf ) 
{ 

  {
  if ((unsigned long )intf != (unsigned long )((struct usb_interface *)0)) {
    put_device(& intf->dev);
  }
  return;
}
}
int usb_lock_device_for_reset(struct usb_device *udev , struct usb_interface  const  *iface ) 
{ unsigned long jiffies_expire ;
  int tmp ;

  {
  jiffies_expire = (unsigned long )jiffies + 250UL;
  if ((unsigned int )udev->state == 0U) {
    return (-19);
  }
  if ((unsigned int )udev->state == 8U) {
    return (-113);
  }
  if ((unsigned long )iface != (unsigned long )((struct usb_interface  const  *)0) && ((unsigned int )iface->condition == 3U || (unsigned int )iface->condition == 0U)) {
    return (-4);
  }
  goto ldv_32680;
  ldv_32679: ;
  if ((long )jiffies_expire - (long )jiffies < 0L) {
    return (-16);
  }
  msleep(15U);
  if ((unsigned int )udev->state == 0U) {
    return (-19);
  }
  if ((unsigned int )udev->state == 8U) {
    return (-113);
  }
  if ((unsigned long )iface != (unsigned long )((struct usb_interface  const  *)0) && ((unsigned int )iface->condition == 3U || (unsigned int )iface->condition == 0U)) {
    return (-4);
  }
  ldv_32680: 
  tmp = device_trylock(& udev->dev);
  if (tmp == 0) {
    goto ldv_32679;
  }
  return (0);
}
}
int usb_get_current_frame_number(struct usb_device *dev ) 
{ int tmp ;

  {
  tmp = usb_hcd_get_frame_number(dev);
  return (tmp);
}
}
int __usb_get_extra_descriptor(char *buffer , unsigned int size , unsigned char type ,
                               void **ptr ) 
{ struct usb_descriptor_header *header ;

  {
  goto ldv_32706;
  ldv_32705: 
  header = (struct usb_descriptor_header *)buffer;
  if ((unsigned int )header->bLength <= 1U) {
    printk("\v%s: bogus descriptor, type %d length %d\n", usbcore_name, (int )header->bDescriptorType,
           (int )header->bLength);
    return (-1);
  }
  if ((int )header->bDescriptorType == (int )type) {
    *ptr = (void *)header;
    return (0);
  }
  buffer += (unsigned long )header->bLength;
  size -= (unsigned int )header->bLength;
  ldv_32706: ;
  if (size > 1U) {
    goto ldv_32705;
  }
  return (-1);
}
}
void *usb_alloc_coherent(struct usb_device *dev , size_t size , gfp_t mem_flags ,
                         dma_addr_t *dma ) 
{ void *tmp ;

  {
  if ((unsigned long )dev == (unsigned long )((struct usb_device *)0) || (unsigned long )dev->bus == (unsigned long )((struct usb_bus *)0)) {
    return (0);
  }
  tmp = hcd_buffer_alloc(dev->bus, size, mem_flags, dma);
  return (tmp);
}
}
void usb_free_coherent(struct usb_device *dev , size_t size , void *addr , dma_addr_t dma ) 
{ 

  {
  if ((unsigned long )dev == (unsigned long )((struct usb_device *)0) || (unsigned long )dev->bus == (unsigned long )((struct usb_bus *)0)) {
    return;
  }
  if ((unsigned long )addr == (unsigned long )((void *)0)) {
    return;
  }
  hcd_buffer_free(dev->bus, size, addr, dma);
  return;
}
}
int usb_disabled(void) 
{ 

  {
  return ((int )nousb);
}
}
static int usb_bus_notify(struct notifier_block *nb , unsigned long action , void *data ) 
{ struct device *dev ;
  struct device  const  *__mptr ;
  struct device  const  *__mptr___0 ;
  struct device  const  *__mptr___1 ;
  struct device  const  *__mptr___2 ;

  {
  dev = (struct device *)data;
  switch (action) {
  case 1UL: ;
  if ((unsigned long )dev->type == (unsigned long )((struct device_type  const  *)(& usb_device_type))) {
    __mptr = (struct device  const  *)dev;
    usb_create_sysfs_dev_files((struct usb_device *)__mptr + 0xffffffffffffff78UL);
  } else
  if ((unsigned long )dev->type == (unsigned long )((struct device_type  const  *)(& usb_if_device_type))) {
    __mptr___0 = (struct device  const  *)dev;
    usb_create_sysfs_intf_files((struct usb_interface *)__mptr___0 + 0xffffffffffffffd0UL);
  }
  goto ldv_32777;
  case 2UL: ;
  if ((unsigned long )dev->type == (unsigned long )((struct device_type  const  *)(& usb_device_type))) {
    __mptr___1 = (struct device  const  *)dev;
    usb_remove_sysfs_dev_files((struct usb_device *)__mptr___1 + 0xffffffffffffff78UL);
  } else
  if ((unsigned long )dev->type == (unsigned long )((struct device_type  const  *)(& usb_if_device_type))) {
    __mptr___2 = (struct device  const  *)dev;
    usb_remove_sysfs_intf_files((struct usb_interface *)__mptr___2 + 0xffffffffffffffd0UL);
  }
  goto ldv_32777;
  }
  ldv_32777: ;
  return (0);
}
}
static struct notifier_block usb_bus_nb  =    {& usb_bus_notify, 0, 0};
static struct dentry *usb_debug_devices  ;
static int usb_debugfs_init(void) 
{ 

  {
  usb_debug_root = debugfs_create_dir("usb", 0);
  if ((unsigned long )usb_debug_root == (unsigned long )((struct dentry *)0)) {
    return (-2);
  }
  usb_debug_devices = debugfs_create_file("devices", 292, usb_debug_root, 0, & usbfs_devices_fops);
  if ((unsigned long )usb_debug_devices == (unsigned long )((struct dentry *)0)) {
    debugfs_remove(usb_debug_root);
    usb_debug_root = 0;
    return (-2);
  }
  return (0);
}
}
static void usb_debugfs_cleanup(void) 
{ 

  {
  debugfs_remove(usb_debug_devices);
  debugfs_remove(usb_debug_root);
  return;
}
}
static int usb_init(void) 
{ int retval ;

  {
  if ((int )nousb) {
    printk("\016%s: USB support disabled\n", usbcore_name);
    return (0);
  }
  retval = usb_debugfs_init();
  if (retval != 0) {
    goto out;
  }
  usb_acpi_register();
  retval = bus_register(& usb_bus_type);
  if (retval != 0) {
    goto bus_register_failed;
  }
  retval = bus_register_notifier(& usb_bus_type, & usb_bus_nb);
  if (retval != 0) {
    goto bus_notifier_failed;
  }
  retval = usb_major_init();
  if (retval != 0) {
    goto major_init_failed;
  }
  retval = usb_register_driver(& usbfs_driver, & __this_module, "usbcore");
  if (retval != 0) {
    goto driver_register_failed;
  }
  retval = usb_devio_init();
  if (retval != 0) {
    goto usb_devio_init_failed;
  }
  retval = usb_hub_init();
  if (retval != 0) {
    goto hub_init_failed;
  }
  retval = usb_register_device_driver(& usb_generic_driver, & __this_module);
  if (retval == 0) {
    goto out;
  }
  usb_hub_cleanup();
  hub_init_failed: 
  usb_devio_cleanup();
  usb_devio_init_failed: 
  usb_deregister(& usbfs_driver);
  driver_register_failed: 
  usb_major_cleanup();
  major_init_failed: 
  bus_unregister_notifier(& usb_bus_type, & usb_bus_nb);
  bus_notifier_failed: 
  bus_unregister(& usb_bus_type);
  bus_register_failed: 
  usb_acpi_unregister();
  usb_debugfs_cleanup();
  out: ;
  return (retval);
}
}
static void usb_exit(void) 
{ 

  {
  if ((int )nousb) {
    return;
  }
  usb_deregister_device_driver(& usb_generic_driver);
  usb_major_cleanup();
  usb_deregister(& usbfs_driver);
  usb_devio_cleanup();
  usb_hub_cleanup();
  bus_unregister_notifier(& usb_bus_type, & usb_bus_nb);
  bus_unregister(& usb_bus_type);
  usb_acpi_unregister();
  usb_debugfs_cleanup();
  return;
}
}
void ldv_check_final_state(void) ;
void ldv_initialize(void) ;
extern void ldv_handler_precall(void) ;
extern int __VERIFIER_nondet_int(void) ;
int LDV_IN_INTERRUPT  ;
void ldv_main0_sequence_infinite_withcheck_stateful(void) 
{ struct device *var_group1 ;
  struct kobj_uevent_env *var_group2 ;
  umode_t *var_usb_devnode_15_p1 ;
  kuid_t *var_usb_devnode_15_p2 ;
  kgid_t *var_usb_devnode_15_p3 ;
  struct notifier_block *var_group3 ;
  unsigned long var_usb_bus_notify_34_p1 ;
  void *var_usb_bus_notify_34_p2 ;
  int ldv_s_usb_device_type_device_type ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  ldv_s_usb_device_type_device_type = 0;
  LDV_IN_INTERRUPT = 1;
  ldv_initialize();
  ldv_handler_precall();
  tmp = usb_init();
  if (tmp != 0) {
    goto ldv_final;
  }
  goto ldv_32863;
  ldv_32862: 
  tmp___0 = __VERIFIER_nondet_int();
  switch (tmp___0) {
  case 0: 
  ldv_handler_precall();
  usb_dev_prepare(var_group1);
  goto ldv_32849;
  case 1: 
  ldv_handler_precall();
  usb_dev_complete(var_group1);
  goto ldv_32849;
  case 2: 
  ldv_handler_precall();
  usb_dev_suspend(var_group1);
  goto ldv_32849;
  case 3: 
  ldv_handler_precall();
  usb_dev_resume(var_group1);
  goto ldv_32849;
  case 4: 
  ldv_handler_precall();
  usb_dev_freeze(var_group1);
  goto ldv_32849;
  case 5: 
  ldv_handler_precall();
  usb_dev_thaw(var_group1);
  goto ldv_32849;
  case 6: 
  ldv_handler_precall();
  usb_dev_poweroff(var_group1);
  goto ldv_32849;
  case 7: 
  ldv_handler_precall();
  usb_dev_restore(var_group1);
  goto ldv_32849;
  case 8: ;
  if (ldv_s_usb_device_type_device_type == 0) {
    ldv_handler_precall();
    usb_release_dev(var_group1);
    ldv_s_usb_device_type_device_type = 0;
  }
  goto ldv_32849;
  case 9: 
  ldv_handler_precall();
  usb_dev_uevent(var_group1, var_group2);
  goto ldv_32849;
  case 10: 
  ldv_handler_precall();
  usb_devnode(var_group1, var_usb_devnode_15_p1, var_usb_devnode_15_p2, var_usb_devnode_15_p3);
  goto ldv_32849;
  case 11: 
  ldv_handler_precall();
  usb_bus_notify(var_group3, var_usb_bus_notify_34_p1, var_usb_bus_notify_34_p2);
  goto ldv_32849;
  default: ;
  goto ldv_32849;
  }
  ldv_32849: ;
  ldv_32863: 
  tmp___1 = __VERIFIER_nondet_int();
  if (tmp___1 != 0 || ldv_s_usb_device_type_device_type != 0) {
    goto ldv_32862;
  }
  ldv_handler_precall();
  usb_exit();
  ldv_final: 
  ldv_check_final_state();
  return;
}
}
void ldv_mutex_lock_1(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_lock(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_2(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_lock(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_3(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
int ldv_mutex_trylock_4(struct mutex *ldv_func_arg1 ) 
{ ldv_func_ret_type___2 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
  tmp = mutex_trylock(ldv_func_arg1);
  ldv_func_res = tmp;
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
  return (tmp___0);
  return (ldv_func_res);
}
}
void ldv_mutex_unlock_5(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
 static void set_bit(unsigned int nr , unsigned long volatile   *addr ) 
{ 

  {
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
  return;
}
}
 static void clear_bit(int nr , unsigned long volatile   *addr ) 
{ 

  {
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
  return;
}
}
 static int test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ int oldbit ;

  {
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; btr %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
  return (oldbit);
}
}
 static int variable_test_bit(int nr , unsigned long const volatile   *addr ) 
{ int oldbit ;

  {
  __asm__  volatile   ("bt %2,%1\n\tsbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
  return (oldbit);
}
}
extern unsigned long find_next_zero_bit(unsigned long const   * , unsigned long  ,
                                        unsigned long  ) ;
extern int __printk_ratelimit(char const   * ) ;
extern int __dynamic_pr_debug(struct _ddebug * , char const   *  , ...) ;
extern int __dynamic_dev_dbg(struct _ddebug * , struct device  const  * , char const   * 
                             , ...) ;
extern void __might_sleep(char const   * , int  , int  ) ;
extern void __list_add(struct list_head * , struct list_head * , struct list_head * ) ;
 static void list_add_tail(struct list_head *new , struct list_head *head ) 
{ 

  {
  __list_add(new, head->prev, head);
  return;
}
}
extern void __list_del_entry(struct list_head * ) ;
extern void list_del(struct list_head * ) ;
 static void list_del_init(struct list_head *entry ) 
{ 

  {
  __list_del_entry(entry);
  INIT_LIST_HEAD(entry);
  return;
}
}
 static int list_empty(struct list_head  const  *head ) 
{ 

  {
  return ((unsigned long )((struct list_head  const  *)head->next) == (unsigned long )head);
}
}
extern void __bad_percpu_size(void) ;
extern struct task_struct *current_task ;
 static struct task_struct *get_current(void) 
{ struct task_struct *pfo_ret__ ;

  {
  switch (8UL) {
  case 1UL: 
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_2869;
  case 2UL: 
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2869;
  case 4UL: 
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2869;
  case 8UL: 
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2869;
  default: 
  __bad_percpu_size();
  }
  ldv_2869: ;
  return (pfo_ret__);
}
}
extern int memcmp(void const   * , void const   * , size_t  ) ;
extern size_t strlen(char const   * ) ;
extern char *kstrdup(char const   * , gfp_t  ) ;
extern void warn_slowpath_null(char const   * , int  ) ;
 static long IS_ERR(void const   *ptr ) 
{ long tmp ;

  {
  tmp = ldv__builtin_expect((unsigned long )ptr > 0xfffffffffffff000UL, 0L);
  return (tmp);
}
}
extern void __xadd_wrong_size(void) ;
 static int atomic_read(atomic_t const   *v ) 
{ 

  {
  return ((int )*((int volatile   *)(& v->counter)));
}
}
 static int atomic_sub_and_test(int i , atomic_t *v ) 
{ unsigned char c ;

  {
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; subl %2,%0; sete %1": "+m" (v->counter),
                       "=qm" (c): "ir" (i): "memory");
  return ((int )c);
}
}
 static void atomic_inc(atomic_t *v ) 
{ 

  {
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; incl %0": "+m" (v->counter));
  return;
}
}
 static int atomic_add_return(int i , atomic_t *v ) 
{ int __ret ;

  {
  __ret = i;
  switch (4UL) {
  case 1UL: 
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5527;
  case 2UL: 
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5527;
  case 4UL: 
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddl %0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5527;
  case 8UL: 
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5527;
  default: 
  __xadd_wrong_size();
  }
  ldv_5527: ;
  return (__ret + i);
}
}
extern void lockdep_init_map(struct lockdep_map * , char const   * , struct lock_class_key * ,
                             int  ) ;
extern void __mutex_init(struct mutex * , char const   * , struct lock_class_key * ) ;
int ldv_mutex_trylock_14(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_12(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_15(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_17(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_19(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_21(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_23(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_25(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_27(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_28(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_29(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_11(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_13(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_16(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_18(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_20(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_22(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_24(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_26(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_bandwidth_mutex_of_usb_hcd(struct mutex *lock ) ;
void ldv_mutex_unlock_bandwidth_mutex_of_usb_hcd(struct mutex *lock ) ;
void ldv_mutex_lock_status_mutex_of_usb_hub(struct mutex *lock ) ;
void ldv_mutex_unlock_status_mutex_of_usb_hub(struct mutex *lock ) ;
void ldv_mutex_lock_usb_address0_mutex(struct mutex *lock ) ;
void ldv_mutex_unlock_usb_address0_mutex(struct mutex *lock ) ;
 static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ int tmp ;

  {
  tmp = variable_test_bit(flag, (unsigned long const volatile   *)(& ti->flags));
  return (tmp);
}
}
extern void __raw_spin_lock_init(raw_spinlock_t * , char const   * , struct lock_class_key * ) ;
extern void _raw_spin_lock_irq(raw_spinlock_t * ) ;
extern unsigned long _raw_spin_lock_irqsave(raw_spinlock_t * ) ;
extern void _raw_spin_unlock_irq(raw_spinlock_t * ) ;
extern void _raw_spin_unlock_irqrestore(raw_spinlock_t * , unsigned long  ) ;
 static raw_spinlock_t *spinlock_check(spinlock_t *lock ) 
{ 

  {
  return (& lock->ldv_6014.rlock);
}
}
 static void spin_lock_irq(spinlock_t *lock ) 
{ 

  {
  _raw_spin_lock_irq(& lock->ldv_6014.rlock);
  return;
}
}
 static void spin_unlock_irq(spinlock_t *lock ) 
{ 

  {
  _raw_spin_unlock_irq(& lock->ldv_6014.rlock);
  return;
}
}
 static void spin_unlock_irqrestore(spinlock_t *lock , unsigned long flags ) 
{ 

  {
  _raw_spin_unlock_irqrestore(& lock->ldv_6014.rlock, flags);
  return;
}
}
extern void __wake_up(wait_queue_head_t * , unsigned int  , int  , void * ) ;
extern void prepare_to_wait(wait_queue_head_t * , wait_queue_t * , int  ) ;
extern void finish_wait(wait_queue_head_t * , wait_queue_t * ) ;
extern int autoremove_wake_function(wait_queue_t * , unsigned int  , int  , void * ) ;
extern void down_read(struct rw_semaphore * ) ;
extern void up_read(struct rw_semaphore * ) ;
extern unsigned long msecs_to_jiffies(unsigned int  ) ;
extern void init_timer_key(struct timer_list * , unsigned int  , char const   * ,
                           struct lock_class_key * ) ;
extern void delayed_work_timer_fn(unsigned long  ) ;
extern void __init_work(struct work_struct * , int  ) ;
extern struct workqueue_struct *system_wq ;
extern bool queue_work_on(int  , struct workqueue_struct * , struct work_struct * ) ;
extern bool queue_delayed_work_on(int  , struct workqueue_struct * , struct delayed_work * ,
                                  unsigned long  ) ;
extern bool flush_work(struct work_struct * ) ;
extern bool cancel_delayed_work_sync(struct delayed_work * ) ;
 static bool queue_work(struct workqueue_struct *wq , struct work_struct *work ) 
{ bool tmp ;

  {
  tmp = queue_work_on(4096, wq, work);
  return (tmp);
}
}
 static bool queue_delayed_work(struct workqueue_struct *wq , struct delayed_work *dwork ,
                                        unsigned long delay ) 
{ bool tmp ;

  {
  tmp = queue_delayed_work_on(4096, wq, dwork, delay);
  return (tmp);
}
}
 static bool schedule_work(struct work_struct *work ) 
{ bool tmp ;

  {
  tmp = queue_work(system_wq, work);
  return (tmp);
}
}
 static bool schedule_delayed_work(struct delayed_work *dwork , unsigned long delay ) 
{ bool tmp ;

  {
  tmp = queue_delayed_work(system_wq, dwork, delay);
  return (tmp);
}
}
extern int sysfs_create_link(struct kobject * , struct kobject * , char const   * ) ;
extern void sysfs_remove_link(struct kobject * , char const   * ) ;
 static void kref_init(struct kref *kref ) 
{ 

  {
  atomic_set(& kref->refcount, 1);
  return;
}
}
 static void kref_get(struct kref *kref ) 
{ bool __warned ;
  int __ret_warn_once ;
  int tmp ;
  int __ret_warn_on ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
  tmp = atomic_add_return(1, & kref->refcount);
  __ret_warn_once = tmp <= 1;
  tmp___2 = ldv__builtin_expect(__ret_warn_once != 0, 0L);
  if (tmp___2 != 0L) {
    __ret_warn_on = ! __warned;
    tmp___0 = ldv__builtin_expect(__ret_warn_on != 0, 0L);
    if (tmp___0 != 0L) {
      warn_slowpath_null("include/linux/kref.h", 46);
    }
    tmp___1 = ldv__builtin_expect(__ret_warn_on != 0, 0L);
    if (tmp___1 != 0L) {
      __warned = 1;
    }
  }
  ldv__builtin_expect(__ret_warn_once != 0, 0L);
  return;
}
}
 static int kref_sub(struct kref *kref , unsigned int count , void (*release)(struct kref * ) ) 
{ int __ret_warn_on ;
  long tmp ;
  int tmp___0 ;

  {
  __ret_warn_on = (unsigned long )release == (unsigned long )((void (*)(struct kref * ))0);
  tmp = ldv__builtin_expect(__ret_warn_on != 0, 0L);
  if (tmp != 0L) {
    warn_slowpath_null("include/linux/kref.h", 70);
  }
  ldv__builtin_expect(__ret_warn_on != 0, 0L);
  tmp___0 = atomic_sub_and_test((int )count, & kref->refcount);
  if (tmp___0 != 0) {
    (*release)(kref);
    return (1);
  }
  return (0);
}
}
 static int kref_put(struct kref *kref , void (*release)(struct kref * ) ) 
{ int tmp ;

  {
  tmp = kref_sub(kref, 1U, release);
  return (tmp);
}
}
extern void schedule(void) ;
 static unsigned int memalloc_noio_save(void) 
{ unsigned int flags ;
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;

  {
  tmp = get_current();
  flags = tmp->flags & 524288U;
  tmp___0 = get_current();
  tmp___0->flags |= 524288U;
  return (flags);
}
}
 static void memalloc_noio_restore(unsigned int flags ) 
{ struct task_struct *tmp ;
  struct task_struct *tmp___0 ;

  {
  tmp = get_current();
  tmp___0 = get_current();
  tmp->flags = (tmp___0->flags & 4294443007U) | flags;
  return;
}
}
extern int wake_up_process(struct task_struct * ) ;
 static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ int tmp ;

  {
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
  return (tmp);
}
}
 static int signal_pending(struct task_struct *p ) 
{ int tmp ;
  long tmp___0 ;

  {
  tmp = test_tsk_thread_flag(p, 2);
  tmp___0 = ldv__builtin_expect(tmp != 0, 0L);
  return ((int )tmp___0);
}
}
 static int usb_endpoint_dir_in(struct usb_endpoint_descriptor  const  *epd ) 
{ 

  {
  return ((int )((signed char )epd->bEndpointAddress) < 0);
}
}
 static int usb_endpoint_xfer_int(struct usb_endpoint_descriptor  const  *epd ) 
{ 

  {
  return (((int )epd->bmAttributes & 3) == 3);
}
}
 static int usb_endpoint_is_int_in(struct usb_endpoint_descriptor  const  *epd ) 
{ int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  tmp = usb_endpoint_xfer_int(epd);
  if (tmp != 0) {
    tmp___0 = usb_endpoint_dir_in(epd);
    if (tmp___0 != 0) {
      tmp___1 = 1;
    } else {
      tmp___1 = 0;
    }
  } else {
    tmp___1 = 0;
  }
  return (tmp___1);
}
}
 static int usb_endpoint_maxp(struct usb_endpoint_descriptor  const  *epd ) 
{ 

  {
  return ((int )epd->wMaxPacketSize);
}
}
extern char const   *usb_speed_string(enum usb_device_speed  ) ;
extern void device_set_wakeup_capable(struct device * , bool  ) ;
extern int device_init_wakeup(struct device * , bool  ) ;
extern void pm_wakeup_event(struct device * , unsigned int  ) ;
 static void device_enable_async_suspend(struct device *dev ) 
{ 

  {
  if (! dev->power.is_prepared) {
    dev->power.async_suspend = 1U;
  }
  return;
}
}
 static void pm_suspend_ignore_children(struct device *dev , bool enable ) 
{ 

  {
  dev->power.ignore_children = enable;
  return;
}
}
 static void device_lock(struct device *dev ) 
{ 

  {
  ldv_mutex_lock_13(& dev->mutex);
  return;
}
}
 static void device_unlock(struct device *dev ) 
{ 

  {
  ldv_mutex_unlock_15(& dev->mutex);
  return;
}
}
extern int device_add(struct device * ) ;
extern void device_del(struct device * ) ;
extern void *dev_get_drvdata(struct device  const  * ) ;
extern int dev_set_drvdata(struct device * , void * ) ;
extern int dev_err(struct device  const  * , char const   *  , ...) ;
extern int dev_warn(struct device  const  * , char const   *  , ...) ;
extern int _dev_info(struct device  const  * , char const   *  , ...) ;
extern int __pm_runtime_idle(struct device * , int  ) ;
extern int __pm_runtime_suspend(struct device * , int  ) ;
extern int __pm_runtime_resume(struct device * , int  ) ;
extern int __pm_runtime_set_status(struct device * , unsigned int  ) ;
extern void pm_runtime_enable(struct device * ) ;
extern void __pm_runtime_disable(struct device * , bool  ) ;
extern void __pm_runtime_use_autosuspend(struct device * , bool  ) ;
 static void pm_runtime_get_noresume(struct device *dev ) 
{ 

  {
  atomic_inc(& dev->power.usage_count);
  return;
}
}
 static void pm_runtime_mark_last_busy(struct device *dev ) 
{ 

  {
  *((unsigned long volatile   *)(& dev->power.last_busy)) = jiffies;
  return;
}
}
 static int pm_runtime_get_sync(struct device *dev ) 
{ int tmp ;

  {
  tmp = __pm_runtime_resume(dev, 4);
  return (tmp);
}
}
 static int pm_runtime_put(struct device *dev ) 
{ int tmp ;

  {
  tmp = __pm_runtime_idle(dev, 5);
  return (tmp);
}
}
 static int pm_runtime_put_sync(struct device *dev ) 
{ int tmp ;

  {
  tmp = __pm_runtime_idle(dev, 4);
  return (tmp);
}
}
 static int pm_runtime_put_sync_autosuspend(struct device *dev ) 
{ int tmp ;

  {
  tmp = __pm_runtime_suspend(dev, 12);
  return (tmp);
}
}
 static int pm_runtime_set_active(struct device *dev ) 
{ int tmp ;

  {
  tmp = __pm_runtime_set_status(dev, 0U);
  return (tmp);
}
}
 static void pm_runtime_set_suspended(struct device *dev ) 
{ 

  {
  __pm_runtime_set_status(dev, 2U);
  return;
}
}
 static void pm_runtime_disable(struct device *dev ) 
{ 

  {
  __pm_runtime_disable(dev, 1);
  return;
}
}
 static void pm_runtime_use_autosuspend(struct device *dev ) 
{ 

  {
  __pm_runtime_use_autosuspend(dev, 1);
  return;
}
}
 static void *usb_get_intfdata(struct usb_interface *intf ) 
{ void *tmp ;

  {
  tmp = dev_get_drvdata((struct device  const  *)(& intf->dev));
  return (tmp);
}
}
 static void usb_set_intfdata(struct usb_interface *intf , void *data ) 
{ 

  {
  dev_set_drvdata(& intf->dev, data);
  return;
}
}
 static struct usb_device *interface_to_usbdev(struct usb_interface *intf ) 
{ struct device  const  *__mptr ;

  {
  __mptr = (struct device  const  *)intf->dev.parent;
  return ((struct usb_device *)__mptr + 0xffffffffffffff78UL);
}
}
struct usb_device *usb_hub_find_child(struct usb_device *hdev , int port1 ) ;
int usb_reset_device(struct usb_device *udev ) ;
void usb_queue_reset_device(struct usb_interface *iface ) ;
void usb_enable_autosuspend(struct usb_device *udev ) ;
void usb_disable_autosuspend(struct usb_device *udev ) ;
int usb_autopm_get_interface(struct usb_interface *intf ) ;
void usb_autopm_put_interface(struct usb_interface *intf ) ;
void usb_autopm_put_interface_async(struct usb_interface *intf ) ;
void usb_autopm_get_interface_no_resume(struct usb_interface *intf ) ;
void usb_autopm_put_interface_no_suspend(struct usb_interface *intf ) ;
 static void usb_mark_last_busy(struct usb_device *udev ) 
{ 

  {
  pm_runtime_mark_last_busy(& udev->dev);
  return;
}
}
int usb_disable_lpm(struct usb_device *udev ) ;
void usb_enable_lpm(struct usb_device *udev ) ;
int usb_unlocked_disable_lpm(struct usb_device *udev ) ;
void usb_unlocked_enable_lpm(struct usb_device *udev ) ;
int usb_disable_ltm(struct usb_device *udev ) ;
void usb_enable_ltm(struct usb_device *udev ) ;
 static bool usb_device_supports_ltm(struct usb_device *udev ) 
{ 

  {
  if (((unsigned int )udev->speed != 5U || (unsigned long )udev->bos == (unsigned long )((struct usb_host_bos *)0)) || (unsigned long )(udev->bos)->ss_cap == (unsigned long )((struct usb_ss_cap_descriptor *)0)) {
    return (0);
  }
  return (((int )((udev->bos)->ss_cap)->bmAttributes & 2) != 0);
}
}
 static void usb_fill_int_urb(struct urb *urb , struct usb_device *dev , unsigned int pipe ,
                                      void *transfer_buffer , int buffer_length ,
                                      void (*complete_fn)(struct urb * ) , void *context ,
                                      int interval ) 
{ 

  {
  urb->dev = dev;
  urb->pipe = pipe;
  urb->transfer_buffer = transfer_buffer;
  urb->transfer_buffer_length = (u32 )buffer_length;
  urb->complete = complete_fn;
  urb->context = context;
  if ((unsigned int )dev->speed == 3U || (unsigned int )dev->speed == 5U) {
    urb->interval = 1 << (interval + -1);
  } else {
    urb->interval = interval;
  }
  urb->start_frame = -1;
  return;
}
}
struct urb *usb_alloc_urb(int iso_packets , gfp_t mem_flags ) ;
void usb_free_urb(struct urb *urb ) ;
int usb_submit_urb(struct urb *urb , gfp_t mem_flags ) ;
void usb_kill_urb(struct urb *urb ) ;
int usb_control_msg(struct usb_device *dev , unsigned int pipe , __u8 request , __u8 requesttype ,
                    __u16 value , __u16 index , void *data , __u16 size , int timeout ) ;
int usb_get_descriptor(struct usb_device *dev , unsigned char type , unsigned char index ,
                       void *buf , int size ) ;
int usb_get_status(struct usb_device *dev , int type , int target , void *data ) ;
int usb_string(struct usb_device *dev , int index , char *buf , size_t size ) ;
int usb_set_interface(struct usb_device *dev , int interface , int alternate ) ;
 static unsigned int __create_pipe(struct usb_device *dev , unsigned int endpoint ) 
{ 

  {
  return ((unsigned int )(dev->devnum << 8) | (endpoint << 15));
}
}
 static __u16 usb_maxpacket(struct usb_device *udev , int pipe , int is_out ) 
{ struct usb_host_endpoint *ep ;
  unsigned int epnum ;
  int __ret_warn_on ;
  long tmp ;
  int __ret_warn_on___0 ;
  long tmp___0 ;
  int tmp___1 ;

  {
  epnum = (unsigned int )(pipe >> 15) & 15U;
  if (is_out != 0) {
    __ret_warn_on = (pipe & 128) != 0;
    tmp = ldv__builtin_expect(__ret_warn_on != 0, 0L);
    if (tmp != 0L) {
      warn_slowpath_null("include/linux/usb.h", 1773);
    }
    ldv__builtin_expect(__ret_warn_on != 0, 0L);
    ep = udev->ep_out[epnum];
  } else {
    __ret_warn_on___0 = (pipe & 128) == 0;
    tmp___0 = ldv__builtin_expect(__ret_warn_on___0 != 0, 0L);
    if (tmp___0 != 0L) {
      warn_slowpath_null("include/linux/usb.h", 1776);
    }
    ldv__builtin_expect(__ret_warn_on___0 != 0, 0L);
    ep = udev->ep_in[epnum];
  }
  if ((unsigned long )ep == (unsigned long )((struct usb_host_endpoint *)0)) {
    return (0U);
  }
  tmp___1 = usb_endpoint_maxp((struct usb_endpoint_descriptor  const  *)(& ep->desc));
  return ((__u16 )tmp___1);
}
}
void usb_hcd_synchronize_unlinks(struct usb_device *udev ) ;
int usb_hcd_alloc_bandwidth(struct usb_device *udev , struct usb_host_config *new_config ,
                            struct usb_host_interface *cur_alt , struct usb_host_interface *new_alt ) ;
void usb_wakeup_notification(struct usb_device *hdev , unsigned int portnum ) ;
int usb_new_device(struct usb_device *udev ) ;
void usb_disconnect(struct usb_device **pdev ) ;
int usb_get_configuration(struct usb_device *dev ) ;
int usb_hub_clear_tt_buffer(struct urb *urb ) ;
void usb_ep0_reinit(struct usb_device *udev ) ;
void usb_set_device_state(struct usb_device *udev , enum usb_device_state new_state ) ;
void usb_root_hub_lost_power(struct usb_device *rhdev ) ;
struct rw_semaphore ehci_cf_port_reset_rwsem ;
 static int usb_phy_notify_connect(struct usb_phy *x , enum usb_device_speed speed ) 
{ int tmp ;

  {
  if ((unsigned long )x->notify_connect != (unsigned long )((int (*)(struct usb_phy * ,
                                                                     enum usb_device_speed  ))0)) {
    tmp = (*(x->notify_connect))(x, speed);
    return (tmp);
  } else {
    return (0);
  }
}
}
 static int usb_phy_notify_disconnect(struct usb_phy *x , enum usb_device_speed speed ) 
{ int tmp ;

  {
  if ((unsigned long )x->notify_disconnect != (unsigned long )((int (*)(struct usb_phy * ,
                                                                        enum usb_device_speed  ))0)) {
    tmp = (*(x->notify_disconnect))(x, speed);
    return (tmp);
  } else {
    return (0);
  }
}
}
extern struct task_struct *kthread_create_on_node(int (*)(void * ) , void * , int  ,
                                                  char const   *  , ...) ;
extern int kthread_stop(struct task_struct * ) ;
extern bool kthread_should_stop(void) ;
extern atomic_t system_freezing_cnt ;
extern bool freezing_slow_path(struct task_struct * ) ;
 static bool freezing(struct task_struct *p ) 
{ int tmp ;
  long tmp___0 ;
  bool tmp___1 ;

  {
  tmp = atomic_read((atomic_t const   *)(& system_freezing_cnt));
  tmp___0 = ldv__builtin_expect(tmp == 0, 1L);
  if (tmp___0 != 0L) {
    return (0);
  }
  tmp___1 = freezing_slow_path(p);
  return (tmp___1);
}
}
extern bool __refrigerator(bool  ) ;
 static bool try_to_freeze(void) 
{ struct task_struct *tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  bool tmp___3 ;

  {
  __might_sleep("include/linux/freezer.h", 51, 0);
  tmp = get_current();
  tmp___0 = freezing(tmp);
  if (tmp___0) {
    tmp___1 = 0;
  } else {
    tmp___1 = 1;
  }
  tmp___2 = ldv__builtin_expect((long )tmp___1, 1L);
  if (tmp___2 != 0L) {
    return (0);
  }
  tmp___3 = __refrigerator(0);
  return (tmp___3);
}
}
extern bool set_freezable(void) ;
extern void add_device_randomness(void const   * , unsigned int  ) ;
extern enum pm_qos_flags_status dev_pm_qos_flags(struct device * , s32  ) ;
int usb_create_ep_devs(struct device *parent , struct usb_host_endpoint *endpoint ,
                       struct usb_device *udev ) ;
void usb_remove_ep_devs(struct usb_host_endpoint *endpoint ) ;
void usb_enable_interface(struct usb_device *dev , struct usb_interface *intf , bool reset_eps ) ;
void usb_disable_endpoint(struct usb_device *dev , unsigned int epaddr , bool reset_hardware ) ;
void usb_disable_interface(struct usb_device *dev , struct usb_interface *intf , bool reset_hardware ) ;
void usb_disable_device(struct usb_device *dev , int skip_ep0 ) ;
int usb_deauthorize_device(struct usb_device *usb_dev ) ;
int usb_authorize_device(struct usb_device *usb_dev ) ;
void usb_detect_quirks(struct usb_device *udev ) ;
void usb_detect_interface_quirks(struct usb_device *udev ) ;
int usb_remove_device(struct usb_device *udev ) ;
int usb_get_device_descriptor(struct usb_device *dev , unsigned int size ) ;
int usb_get_bos_descriptor(struct usb_device *dev ) ;
char *usb_cache_string(struct usb_device *udev , int index ) ;
int usb_set_configuration(struct usb_device *dev , int configuration ) ;
int usb_choose_configuration(struct usb_device *udev ) ;
 static unsigned int usb_get_max_power(struct usb_device *udev , struct usb_host_config *c ) 
{ unsigned int mul ;

  {
  if ((unsigned int )udev->speed == 5U) {
    mul = 8U;
  } else {
    mul = 2U;
  }
  return ((unsigned int )c->desc.bMaxPower * mul);
}
}
void usb_kick_khubd(struct usb_device *hdev ) ;
void usb_forced_unbind_intf(struct usb_interface *intf ) ;
void usb_rebind_intf(struct usb_interface *intf ) ;
int usb_hub_claim_port(struct usb_device *hdev , unsigned int port1 , struct dev_state *owner ) ;
int usb_hub_release_port(struct usb_device *hdev , unsigned int port1 , struct dev_state *owner ) ;
void usb_hub_release_all_ports(struct usb_device *hdev , struct dev_state *owner ) ;
bool usb_device_is_owned(struct usb_device *udev ) ;
int usb_port_suspend(struct usb_device *udev , pm_message_t msg ) ;
int usb_port_resume(struct usb_device *udev , pm_message_t msg ) ;
void usb_autosuspend_device(struct usb_device *udev ) ;
int usb_autoresume_device(struct usb_device *udev ) ;
int usb_remote_wakeup(struct usb_device *udev ) ;
int usb_set_usb2_hardware_lpm(struct usb_device *udev , int enable ) ;
enum usb_port_connect_type usb_get_hub_port_connect_type(struct usb_device *hdev ,
                                                         int port1 ) ;
void usb_set_hub_port_connect_type(struct usb_device *hdev , int port1 , enum usb_port_connect_type type ) ;
void usb_hub_adjust_deviceremovable(struct usb_device *hdev , struct usb_hub_descriptor *desc ) ;
acpi_handle usb_get_hub_port_acpi_handle(struct usb_device *hdev , int port1 ) ;
int usb_hub_create_port_device(struct usb_hub *hub , int port1 ) ;
void usb_hub_remove_port_device(struct usb_hub *hub , int port1 ) ;
int usb_hub_set_port_power(struct usb_device *hdev , int port1 , bool set ) ;
struct usb_hub *usb_hub_to_struct_hub(struct usb_device *hdev ) ;
int hub_port_debounce(struct usb_hub *hub , int port1 , bool must_be_connected ) ;
int usb_clear_port_feature(struct usb_device *hdev , int port1 , int feature ) ;
 static int hub_port_debounce_be_stable(struct usb_hub *hub , int port1 ) 
{ int tmp ;

  {
  tmp = hub_port_debounce(hub, port1, 0);
  return (tmp);
}
}
 static int hub_is_superspeed(struct usb_device *hdev ) 
{ 

  {
  return ((unsigned int )hdev->descriptor.bDeviceProtocol == 3U);
}
}
static spinlock_t device_state_lock  =    {{{{{0U}}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "device_state_lock",
                                                               0, 0UL}}}};
static spinlock_t hub_event_lock  =    {{{{{0U}}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "hub_event_lock",
                                                               0, 0UL}}}};
static struct list_head hub_event_list  =    {& hub_event_list, & hub_event_list};
static wait_queue_head_t khubd_wait  =    {{{{{{0U}}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "khubd_wait.lock",
                                                                0, 0UL}}}}, {& khubd_wait.task_list,
                                                                             & khubd_wait.task_list}};
static struct task_struct *khubd_task  ;
static bool blinkenlights  =    0;
static int initial_descriptor_timeout  =    5000;
static bool old_scheme_first  =    0;
static bool use_both_schemes  =    1;
struct rw_semaphore ehci_cf_port_reset_rwsem  =    {0L, {{{0U}}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "ehci_cf_port_reset_rwsem.wait_lock",
                                                                  0, 0UL}}, {& ehci_cf_port_reset_rwsem.wait_list,
                                                                             & ehci_cf_port_reset_rwsem.wait_list},
    {0, {0, 0}, "ehci_cf_port_reset_rwsem", 0, 0UL}};
static int usb_reset_and_verify_device(struct usb_device *udev ) ;
 static char *portspeed(struct usb_hub *hub , int portstatus ) 
{ int tmp ;

  {
  tmp = hub_is_superspeed(hub->hdev);
  if (tmp != 0) {
    return ((char *)"5.0 Gb/s");
  }
  if ((portstatus & 1024) != 0) {
    return ((char *)"480 Mb/s");
  } else
  if ((portstatus & 512) != 0) {
    return ((char *)"1.5 Mb/s");
  } else {
    return ((char *)"12 Mb/s");
  }
}
}
struct usb_hub *usb_hub_to_struct_hub(struct usb_device *hdev ) 
{ void *tmp ;

  {
  if (((unsigned long )hdev == (unsigned long )((struct usb_device *)0) || (unsigned long )hdev->actconfig == (unsigned long )((struct usb_host_config *)0)) || hdev->maxchild == 0) {
    return (0);
  }
  tmp = usb_get_intfdata((hdev->actconfig)->interface[0]);
  return ((struct usb_hub *)tmp);
}
}
static int usb_device_supports_lpm(struct usb_device *udev ) 
{ 

  {
  if ((unsigned int )udev->speed == 3U) {
    if ((unsigned long )(udev->bos)->ext_cap != (unsigned long )((struct usb_ext_cap_descriptor *)0) && (((udev->bos)->ext_cap)->bmAttributes & 2U) != 0U) {
      return (1);
    }
    return (0);
  }
  if ((unsigned long )(udev->bos)->ss_cap == (unsigned long )((struct usb_ss_cap_descriptor *)0)) {
    dev_warn((struct device  const  *)(& udev->dev), "No LPM exit latency info found.  Power management will be impacted.\n");
    return (0);
  }
  if ((unsigned int )*((unsigned char *)udev->parent + 1588UL) != 0U) {
    return (1);
  }
  dev_warn((struct device  const  *)(& udev->dev), "Parent hub missing LPM exit latency info.  Power management will be impacted.\n");
  return (0);
}
}
static void usb_set_lpm_mel(struct usb_device *udev , struct usb3_lpm_parameters *udev_lpm_params ,
                            unsigned int udev_exit_latency , struct usb_hub *hub ,
                            struct usb3_lpm_parameters *hub_lpm_params , unsigned int hub_exit_latency ) 
{ unsigned int total_mel ;
  unsigned int device_mel ;
  unsigned int hub_mel ;

  {
  total_mel = hub_lpm_params->mel + (unsigned int )((int )(hub->descriptor)->u.ss.bHubHdrDecLat * 100);
  device_mel = udev_exit_latency * 1000U;
  hub_mel = hub_exit_latency * 1000U;
  if (device_mel > hub_mel) {
    total_mel += device_mel;
  } else {
    total_mel += hub_mel;
  }
  udev_lpm_params->mel = total_mel;
  return;
}
}
static void usb_set_lpm_pel(struct usb_device *udev , struct usb3_lpm_parameters *udev_lpm_params ,
                            unsigned int udev_exit_latency , struct usb_hub *hub ,
                            struct usb3_lpm_parameters *hub_lpm_params , unsigned int hub_exit_latency ,
                            unsigned int port_to_port_exit_latency ) 
{ unsigned int first_link_pel ;
  unsigned int hub_pel ;

  {
  if (udev_exit_latency > hub_exit_latency) {
    first_link_pel = udev_exit_latency * 1000U;
  } else {
    first_link_pel = hub_exit_latency * 1000U;
  }
  hub_pel = port_to_port_exit_latency * 1000U + hub_lpm_params->pel;
  if (first_link_pel > hub_pel) {
    udev_lpm_params->pel = first_link_pel;
  } else {
    udev_lpm_params->pel = hub_pel;
  }
  return;
}
}
static void usb_set_lpm_sel(struct usb_device *udev , struct usb3_lpm_parameters *udev_lpm_params ) 
{ struct usb_device *parent ;
  unsigned int num_hubs ;
  unsigned int total_sel ;

  {
  total_sel = udev_lpm_params->pel;
  parent = udev->parent;
  num_hubs = 0U;
  goto ldv_30901;
  ldv_30900: 
  num_hubs ++;
  parent = parent->parent;
  ldv_30901: ;
  if ((unsigned long )parent->parent != (unsigned long )((struct usb_device *)0)) {
    goto ldv_30900;
  }
  if (num_hubs != 0U) {
    total_sel = (num_hubs * 250U + total_sel) + 1850U;
  }
  total_sel = num_hubs * 250U + total_sel;
  udev_lpm_params->sel = total_sel;
  return;
}
}
static void usb_set_lpm_parameters(struct usb_device *udev ) 
{ struct usb_hub *hub ;
  unsigned int port_to_port_delay ;
  unsigned int udev_u1_del ;
  unsigned int udev_u2_del ;
  unsigned int hub_u1_del ;
  unsigned int hub_u2_del ;

  {
  if ((unsigned int )*((unsigned char *)udev + 1588UL) == 0U || (unsigned int )udev->speed != 5U) {
    return;
  }
  hub = usb_hub_to_struct_hub(udev->parent);
  if ((unsigned long )hub == (unsigned long )((struct usb_hub *)0)) {
    return;
  }
  udev_u1_del = (unsigned int )((udev->bos)->ss_cap)->bU1devExitLat;
  udev_u2_del = (unsigned int )((udev->bos)->ss_cap)->bU2DevExitLat;
  hub_u1_del = (unsigned int )(((udev->parent)->bos)->ss_cap)->bU1devExitLat;
  hub_u2_del = (unsigned int )(((udev->parent)->bos)->ss_cap)->bU2DevExitLat;
  usb_set_lpm_mel(udev, & udev->u1_params, udev_u1_del, hub, & (udev->parent)->u1_params,
                  hub_u1_del);
  usb_set_lpm_mel(udev, & udev->u2_params, udev_u2_del, hub, & (udev->parent)->u2_params,
                  hub_u2_del);
  port_to_port_delay = 1U;
  usb_set_lpm_pel(udev, & udev->u1_params, udev_u1_del, hub, & (udev->parent)->u1_params,
                  hub_u1_del, port_to_port_delay);
  if (hub_u2_del > hub_u1_del) {
    port_to_port_delay = (hub_u2_del - hub_u1_del) + 1U;
  } else {
    port_to_port_delay = hub_u1_del + 1U;
  }
  usb_set_lpm_pel(udev, & udev->u2_params, udev_u2_del, hub, & (udev->parent)->u2_params,
                  hub_u2_del, port_to_port_delay);
  usb_set_lpm_sel(udev, & udev->u1_params);
  usb_set_lpm_sel(udev, & udev->u2_params);
  return;
}
}
static int get_hub_descriptor(struct usb_device *hdev , void *data ) 
{ int i ;
  int ret ;
  int size ;
  unsigned int dtype ;
  int tmp ;
  unsigned int tmp___0 ;

  {
  tmp = hub_is_superspeed(hdev);
  if (tmp != 0) {
    dtype = 42U;
    size = 12;
  } else {
    dtype = 41U;
    size = 15;
  }
  i = 0;
  goto ldv_30921;
  ldv_30920: 
  tmp___0 = __create_pipe(hdev, 0U);
  ret = usb_control_msg(hdev, tmp___0 | 2147483776U, 6, 160, (int )((__u16 )dtype) << 8U,
                        0, data, (int )((__u16 )size), 5000);
  if (ret > 8) {
    return (ret);
  }
  i ++;
  ldv_30921: ;
  if (i <= 2) {
    goto ldv_30920;
  }
  return (-22);
}
}
static int clear_hub_feature(struct usb_device *hdev , int feature ) 
{ unsigned int tmp ;
  int tmp___0 ;

  {
  tmp = __create_pipe(hdev, 0U);
  tmp___0 = usb_control_msg(hdev, tmp | 2147483648U, 1, 32, (int )((__u16 )feature),
                            0, 0, 0, 1000);
  return (tmp___0);
}
}
int usb_clear_port_feature(struct usb_device *hdev , int port1 , int feature ) 
{ unsigned int tmp ;
  int tmp___0 ;

  {
  tmp = __create_pipe(hdev, 0U);
  tmp___0 = usb_control_msg(hdev, tmp | 2147483648U, 1, 35, (int )((__u16 )feature),
                            (int )((__u16 )port1), 0, 0, 1000);
  return (tmp___0);
}
}
static int set_port_feature(struct usb_device *hdev , int port1 , int feature ) 
{ unsigned int tmp ;
  int tmp___0 ;

  {
  tmp = __create_pipe(hdev, 0U);
  tmp___0 = usb_control_msg(hdev, tmp | 2147483648U, 3, 35, (int )((__u16 )feature),
                            (int )((__u16 )port1), 0, 0, 1000);
  return (tmp___0);
}
}
static void set_port_led(struct usb_hub *hub , int port1 , int selector ) 
{ int status ;
  int tmp ;
  struct _ddebug descriptor ;
  char *s ;
  long tmp___0 ;

  {
  tmp = set_port_feature(hub->hdev, (selector << 8) | port1, 22);
  status = tmp;
  if (status < 0) {
    descriptor.modname = "usbcore";
    descriptor.function = "set_port_led";
    descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
    descriptor.format = "port %d indicator %s status %d\n";
    descriptor.lineno = 509U;
    descriptor.flags = 1U;
    tmp___0 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
    if (tmp___0 != 0L) {
      switch (selector) {
      case 1: 
      s = (char *)"amber";
      goto ldv_30947;
      case 2: 
      s = (char *)"green";
      goto ldv_30947;
      case 3: 
      s = (char *)"off";
      goto ldv_30947;
      case 0: 
      s = (char *)"auto";
      goto ldv_30947;
      default: 
      s = (char *)"??";
      goto ldv_30947;
      }
      ldv_30947: 
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)hub->intfdev, "port %d indicator %s status %d\n",
                        port1, s, status);
    }
  }
  return;
}
}
static void led_work(struct work_struct *work ) 
{ struct usb_hub *hub ;
  struct work_struct  const  *__mptr ;
  struct usb_device *hdev ;
  unsigned int i ;
  unsigned int changed ;
  int cursor ;
  unsigned int selector ;
  unsigned int mode ;

  {
  __mptr = (struct work_struct  const  *)work;
  hub = (struct usb_hub *)__mptr + 0xfffffffffffffe00UL;
  hdev = hub->hdev;
  changed = 0U;
  cursor = -1;
  if ((unsigned int )hdev->state != 7U || (unsigned int )*((unsigned char *)hub + 476UL) != 0U) {
    return;
  }
  i = 0U;
  goto ldv_30976;
  ldv_30975: ;
  switch ((int )hub->indicator[i]) {
  case 1: 
  cursor = (int )i;
  selector = 0U;
  mode = 0U;
  goto ldv_30966;
  case 2: 
  selector = 2U;
  mode = 3U;
  goto ldv_30966;
  case 3: 
  selector = 3U;
  mode = 2U;
  goto ldv_30966;
  case 4: 
  selector = 1U;
  mode = 5U;
  goto ldv_30966;
  case 5: 
  selector = 3U;
  mode = 4U;
  goto ldv_30966;
  case 6: 
  selector = 2U;
  mode = 7U;
  goto ldv_30966;
  case 7: 
  selector = 1U;
  mode = 6U;
  goto ldv_30966;
  default: ;
  goto ldv_30974;
  }
  ldv_30966: ;
  if (selector != 0U) {
    changed = 1U;
  }
  set_port_led(hub, (int )(i + 1U), (int )selector);
  hub->indicator[i] = (u8 )mode;
  ldv_30974: 
  i ++;
  ldv_30976: ;
  if ((unsigned int )(hub->descriptor)->bNbrPorts > i) {
    goto ldv_30975;
  }
  if (changed == 0U && (int )blinkenlights) {
    cursor ++;
    cursor %= (int )(hub->descriptor)->bNbrPorts;
    set_port_led(hub, cursor + 1, 2);
    hub->indicator[cursor] = 1U;
    changed ++;
  }
  if (changed != 0U) {
    schedule_delayed_work(& hub->leds, 166UL);
  }
  return;
}
}
static int get_hub_status(struct usb_device *hdev , struct usb_hub_status *data ) 
{ int i ;
  int status ;
  unsigned int tmp ;

  {
  status = -110;
  i = 0;
  goto ldv_30985;
  ldv_30984: 
  tmp = __create_pipe(hdev, 0U);
  status = usb_control_msg(hdev, tmp | 2147483776U, 0, 160, 0, 0, (void *)data, 4,
                           1000);
  i ++;
  ldv_30985: ;
  if (i <= 4 && (status == -110 || status == -32)) {
    goto ldv_30984;
  }
  return (status);
}
}
static int get_port_status(struct usb_device *hdev , int port1 , struct usb_port_status *data ) 
{ int i ;
  int status ;
  unsigned int tmp ;

  {
  status = -110;
  i = 0;
  goto ldv_30995;
  ldv_30994: 
  tmp = __create_pipe(hdev, 0U);
  status = usb_control_msg(hdev, tmp | 2147483776U, 0, 163, 0, (int )((__u16 )port1),
                           (void *)data, 4, 1000);
  i ++;
  ldv_30995: ;
  if (i <= 4 && (status == -110 || status == -32)) {
    goto ldv_30994;
  }
  return (status);
}
}
static int hub_port_status(struct usb_hub *hub , int port1 , u16 *status , u16 *change ) 
{ int ret ;

  {
  ldv_mutex_lock_16(& hub->status_mutex);
  ret = get_port_status(hub->hdev, port1, & (hub->status)->port);
  if (ret <= 3) {
    if (ret != -19) {
      dev_err((struct device  const  *)hub->intfdev, "%s failed (err = %d)\n", "hub_port_status",
              ret);
    }
    if (ret >= 0) {
      ret = -5;
    }
  } else {
    *status = (hub->status)->port.wPortStatus;
    *change = (hub->status)->port.wPortChange;
    ret = 0;
  }
  ldv_mutex_unlock_17(& hub->status_mutex);
  return (ret);
}
}
static void kick_khubd(struct usb_hub *hub ) 
{ unsigned long flags ;
  raw_spinlock_t *tmp ;
  struct device  const  *__mptr ;
  int tmp___0 ;

  {
  tmp = spinlock_check(& hub_event_lock);
  flags = _raw_spin_lock_irqsave(tmp);
  if ((unsigned int )*((unsigned char *)hub + 476UL) == 0U) {
    tmp___0 = list_empty((struct list_head  const  *)(& hub->event_list));
    if (tmp___0 != 0) {
      list_add_tail(& hub->event_list, & hub_event_list);
      __mptr = (struct device  const  *)hub->intfdev;
      usb_autopm_get_interface_no_resume((struct usb_interface *)__mptr + 0xffffffffffffffd0UL);
      __wake_up(& khubd_wait, 3U, 1, 0);
    }
  }
  spin_unlock_irqrestore(& hub_event_lock, flags);
  return;
}
}
void usb_kick_khubd(struct usb_device *hdev ) 
{ struct usb_hub *hub ;
  struct usb_hub *tmp ;

  {
  tmp = usb_hub_to_struct_hub(hdev);
  hub = tmp;
  if ((unsigned long )hub != (unsigned long )((struct usb_hub *)0)) {
    kick_khubd(hub);
  }
  return;
}
}
void usb_wakeup_notification(struct usb_device *hdev , unsigned int portnum ) 
{ struct usb_hub *hub ;

  {
  if ((unsigned long )hdev == (unsigned long )((struct usb_device *)0)) {
    return;
  }
  hub = usb_hub_to_struct_hub(hdev);
  if ((unsigned long )hub != (unsigned long )((struct usb_hub *)0)) {
    set_bit(portnum, (unsigned long volatile   *)(& hub->wakeup_bits));
    kick_khubd(hub);
  }
  return;
}
}
static void hub_irq(struct urb *urb ) 
{ struct usb_hub *hub ;
  int status ;
  unsigned int i ;
  unsigned long bits ;
  struct _ddebug descriptor ;
  long tmp ;

  {
  hub = (struct usb_hub *)urb->context;
  status = urb->status;
  switch (status) {
  case -2: ;
  case -104: ;
  case -108: ;
  return;
  default: 
  descriptor.modname = "usbcore";
  descriptor.function = "hub_irq";
  descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
  descriptor.format = "transfer --> %d\n";
  descriptor.lineno = 709U;
  descriptor.flags = 1U;
  tmp = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
  if (tmp != 0L) {
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)hub->intfdev, "transfer --> %d\n",
                      status);
  }
  (hub->nerrors) ++;
  if (hub->nerrors <= 9 || hub->error != 0) {
    goto resubmit;
  }
  hub->error = status;
  case 0: 
  bits = 0UL;
  i = 0U;
  goto ldv_31046;
  ldv_31045: 
  bits = ((unsigned long )(*(hub->buffer))[i] << (int )(i * 8U)) | bits;
  i ++;
  ldv_31046: ;
  if (urb->actual_length > i) {
    goto ldv_31045;
  }
  hub->event_bits[0] = bits;
  goto ldv_31048;
  }
  ldv_31048: 
  hub->nerrors = 0;
  kick_khubd(hub);
  resubmit: ;
  if ((unsigned int )*((unsigned char *)hub + 476UL) != 0U) {
    return;
  }
  status = usb_submit_urb(hub->urb, 32U);
  if ((status != 0 && status != -19) && status != -1) {
    dev_err((struct device  const  *)hub->intfdev, "resubmit --> %d\n", status);
  }
  return;
}
}
 static int hub_clear_tt_buffer(struct usb_device *hdev , u16 devinfo , u16 tt ) 
{ unsigned int tmp ;
  int tmp___0 ;

  {
  tmp = __create_pipe(hdev, 0U);
  tmp___0 = usb_control_msg(hdev, tmp | 2147483648U, 8, 35, (int )devinfo, (int )tt,
                            0, 0, 1000);
  return (tmp___0);
}
}
static void hub_tt_work(struct work_struct *work ) 
{ struct usb_hub *hub ;
  struct work_struct  const  *__mptr ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  struct list_head *next ;
  struct usb_tt_clear *clear ;
  struct usb_device *hdev ;
  struct hc_driver  const  *drv ;
  int status ;
  struct list_head  const  *__mptr___0 ;
  raw_spinlock_t *tmp___0 ;
  int tmp___1 ;

  {
  __mptr = (struct work_struct  const  *)work;
  hub = (struct usb_hub *)__mptr + 0xfffffffffffffe78UL;
  tmp = spinlock_check(& hub->tt.lock);
  flags = _raw_spin_lock_irqsave(tmp);
  goto ldv_31075;
  ldv_31074: 
  hdev = hub->hdev;
  next = hub->tt.clear_list.next;
  __mptr___0 = (struct list_head  const  *)next;
  clear = (struct usb_tt_clear *)__mptr___0;
  list_del(& clear->clear_list);
  spin_unlock_irqrestore(& hub->tt.lock, flags);
  status = hub_clear_tt_buffer(hdev, (int )clear->devinfo, (int )((u16 )clear->tt));
  if (status != 0 && status != -19) {
    dev_err((struct device  const  *)(& hdev->dev), "clear tt %d (%04x) error %d\n",
            clear->tt, (int )clear->devinfo, status);
  }
  drv = (clear->hcd)->driver;
  if ((unsigned long )drv->clear_tt_buffer_complete != (unsigned long )((void (*)(struct usb_hcd * ,
                                                                                  struct usb_host_endpoint * ))0)) {
    (*(drv->clear_tt_buffer_complete))(clear->hcd, clear->ep);
  }
  kfree((void const   *)clear);
  tmp___0 = spinlock_check(& hub->tt.lock);
  flags = _raw_spin_lock_irqsave(tmp___0);
  ldv_31075: 
  tmp___1 = list_empty((struct list_head  const  *)(& hub->tt.clear_list));
  if (tmp___1 == 0) {
    goto ldv_31074;
  }
  spin_unlock_irqrestore(& hub->tt.lock, flags);
  return;
}
}
int usb_hub_set_port_power(struct usb_device *hdev , int port1 , bool set ) 
{ int ret ;
  struct usb_hub *hub ;
  struct usb_hub *tmp ;
  struct usb_port *port_dev ;

  {
  tmp = usb_hub_to_struct_hub(hdev);
  hub = tmp;
  port_dev = *(hub->ports + ((unsigned long )port1 + 0xffffffffffffffffUL));
  if ((int )set) {
    ret = set_port_feature(hdev, port1, 8);
  } else {
    ret = usb_clear_port_feature(hdev, port1, 8);
  }
  if (ret == 0) {
    port_dev->power_is_on = (unsigned char )set;
  }
  return (ret);
}
}
int usb_hub_clear_tt_buffer(struct urb *urb ) 
{ struct usb_device *udev ;
  int pipe ;
  struct usb_tt *tt ;
  unsigned long flags ;
  struct usb_tt_clear *clear ;
  void *tmp ;
  raw_spinlock_t *tmp___0 ;
  int tmp___1 ;

  {
  udev = urb->dev;
  pipe = (int )urb->pipe;
  tt = udev->tt;
  tmp = kmalloc(40UL, 32U);
  clear = (struct usb_tt_clear *)tmp;
  if ((unsigned long )clear == (unsigned long )((struct usb_tt_clear *)0)) {
    dev_err((struct device  const  *)(& udev->dev), "can\'t save CLEAR_TT_BUFFER state\n");
    return (-12);
  }
  if (tt->multi != 0) {
    clear->tt = (unsigned int )udev->ttport;
  } else {
    clear->tt = 1U;
  }
  clear->devinfo = (unsigned int )((u16 )(pipe >> 15)) & 15U;
  clear->devinfo = (u16 )((int )((short )clear->devinfo) | (int )((short )(udev->devnum << 4)));
  if ((unsigned int )pipe >> 30 == 2U) {
    tmp___1 = 0;
  } else {
    tmp___1 = 4096;
  }
  clear->devinfo = (u16 )((int )((short )clear->devinfo) | tmp___1);
  if ((pipe & 128) != 0) {
    clear->devinfo = (u16 )((unsigned int )clear->devinfo | 32768U);
  }
  clear->hcd = bus_to_hcd(udev->bus);
  clear->ep = urb->ep;
  tmp___0 = spinlock_check(& tt->lock);
  flags = _raw_spin_lock_irqsave(tmp___0);
  list_add_tail(& clear->clear_list, & tt->clear_list);
  schedule_work(& tt->clear_work);
  spin_unlock_irqrestore(& tt->lock, flags);
  return (0);
}
}
static unsigned int hub_power_on(struct usb_hub *hub , bool do_delay ) 
{ int port1 ;
  unsigned int pgood_delay ;
  unsigned int delay ;
  u16 wHubCharacteristics ;
  struct _ddebug descriptor ;
  long tmp ;
  struct _ddebug descriptor___0 ;
  long tmp___0 ;
  unsigned int _max1 ;
  unsigned int _max2 ;

  {
  pgood_delay = (unsigned int )((int )(hub->descriptor)->bPwrOn2PwrGood * 2);
  wHubCharacteristics = (hub->descriptor)->wHubCharacteristics;
  if (((int )wHubCharacteristics & 3) <= 1) {
    descriptor.modname = "usbcore";
    descriptor.function = "hub_power_on";
    descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
    descriptor.format = "enabling power on all ports\n";
    descriptor.lineno = 888U;
    descriptor.flags = 1U;
    tmp = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
    if (tmp != 0L) {
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)hub->intfdev, "enabling power on all ports\n");
    }
  } else {
    descriptor___0.modname = "usbcore";
    descriptor___0.function = "hub_power_on";
    descriptor___0.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
    descriptor___0.format = "trying to enable port power on non-switchable hub\n";
    descriptor___0.lineno = 891U;
    descriptor___0.flags = 1U;
    tmp___0 = ldv__builtin_expect((long )descriptor___0.flags & 1L, 0L);
    if (tmp___0 != 0L) {
      __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)hub->intfdev, "trying to enable port power on non-switchable hub\n");
    }
  }
  port1 = 1;
  goto ldv_31114;
  ldv_31113: ;
  if ((unsigned int )*((unsigned char *)*(hub->ports + ((unsigned long )port1 + 0xffffffffffffffffUL)) + 1157UL) != 0U) {
    set_port_feature(hub->hdev, port1, 8);
  } else {
    usb_clear_port_feature(hub->hdev, port1, 8);
  }
  port1 ++;
  ldv_31114: ;
  if ((int )(hub->descriptor)->bNbrPorts >= port1) {
    goto ldv_31113;
  }
  _max1 = pgood_delay;
  _max2 = 100U;
  if (_max1 > _max2) {
    delay = _max1;
  } else {
    delay = _max2;
  }
  if ((int )do_delay) {
    msleep(delay);
  }
  return (delay);
}
}
static int hub_hub_status(struct usb_hub *hub , u16 *status , u16 *change ) 
{ int ret ;

  {
  ldv_mutex_lock_18(& hub->status_mutex);
  ret = get_hub_status(hub->hdev, & (hub->status)->hub);
  if (ret < 0) {
    if (ret != -19) {
      dev_err((struct device  const  *)hub->intfdev, "%s failed (err = %d)\n", "hub_hub_status",
              ret);
    }
  } else {
    *status = (hub->status)->hub.wHubStatus;
    *change = (hub->status)->hub.wHubChange;
    ret = 0;
  }
  ldv_mutex_unlock_19(& hub->status_mutex);
  return (ret);
}
}
static int hub_set_port_link_state(struct usb_hub *hub , int port1 , unsigned int link_status ) 
{ int tmp ;

  {
  tmp = set_port_feature(hub->hdev, (int )((link_status << 3) | (unsigned int )port1),
                         5);
  return (tmp);
}
}
static int hub_usb3_port_disable(struct usb_hub *hub , int port1 ) 
{ int ret ;
  int total_time ;
  u16 portchange ;
  u16 portstatus ;
  int tmp ;
  int tmp___0 ;

  {
  tmp = hub_is_superspeed(hub->hdev);
  if (tmp == 0) {
    return (-22);
  }
  ret = hub_set_port_link_state(hub, port1, 128U);
  if (ret != 0) {
    return (ret);
  }
  total_time = 0;
  ldv_31140: 
  ret = hub_port_status(hub, port1, & portstatus, & portchange);
  if (ret < 0) {
    return (ret);
  }
  if (((int )portstatus & 480) == 128) {
    goto ldv_31139;
  }
  if (total_time > 1999) {
    goto ldv_31139;
  }
  msleep(25U);
  total_time += 25;
  goto ldv_31140;
  ldv_31139: ;
  if (total_time > 1999) {
    dev_warn((struct device  const  *)hub->intfdev, "Could not disable port %d after %d ms\n",
             port1, total_time);
  }
  tmp___0 = hub_set_port_link_state(hub, port1, 160U);
  return (tmp___0);
}
}
static int hub_port_disable(struct usb_hub *hub , int port1 , int set_state ) 
{ struct usb_device *hdev ;
  int ret ;
  int tmp ;

  {
  hdev = hub->hdev;
  ret = 0;
  if ((unsigned long )(*(hub->ports + ((unsigned long )port1 + 0xffffffffffffffffUL)))->child != (unsigned long )((struct usb_device *)0) && set_state != 0) {
    usb_set_device_state((*(hub->ports + ((unsigned long )port1 + 0xffffffffffffffffUL)))->child,
                         0);
  }
  if (hub->error == 0) {
    tmp = hub_is_superspeed(hub->hdev);
    if (tmp != 0) {
      ret = hub_usb3_port_disable(hub, port1);
    } else {
      ret = usb_clear_port_feature(hdev, port1, 1);
    }
  }
  if (ret != 0 && ret != -19) {
    dev_err((struct device  const  *)hub->intfdev, "cannot disable port %d (err = %d)\n",
            port1, ret);
  }
  return (ret);
}
}
static void hub_port_logical_disconnect(struct usb_hub *hub , int port1 ) 
{ struct _ddebug descriptor ;
  long tmp ;

  {
  descriptor.modname = "usbcore";
  descriptor.function = "hub_port_logical_disconnect";
  descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
  descriptor.format = "logical disconnect on port %d\n";
  descriptor.lineno = 1005U;
  descriptor.flags = 1U;
  tmp = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
  if (tmp != 0L) {
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)hub->intfdev, "logical disconnect on port %d\n",
                      port1);
  }
  hub_port_disable(hub, port1, 1);
  set_bit((unsigned int )port1, (unsigned long volatile   *)(& hub->change_bits));
  kick_khubd(hub);
  return;
}
}
int usb_remove_device(struct usb_device *udev ) 
{ struct usb_hub *hub ;
  struct usb_interface *intf ;
  struct device  const  *__mptr ;

  {
  if ((unsigned long )udev->parent == (unsigned long )((struct usb_device *)0)) {
    return (-22);
  }
  hub = usb_hub_to_struct_hub(udev->parent);
  __mptr = (struct device  const  *)hub->intfdev;
  intf = (struct usb_interface *)__mptr + 0xffffffffffffffd0UL;
  usb_autopm_get_interface(intf);
  set_bit((unsigned int )udev->portnum, (unsigned long volatile   *)(& hub->removed_bits));
  hub_port_logical_disconnect(hub, (int )udev->portnum);
  usb_autopm_put_interface(intf);
  return (0);
}
}
static void hub_init_func2(struct work_struct *ws ) ;
static void hub_init_func3(struct work_struct *ws ) ;
static void hub_activate(struct usb_hub *hub , enum hub_activation_type type ) 
{ struct usb_device *hdev ;
  struct usb_hcd *hcd ;
  int ret ;
  int port1 ;
  int status ;
  bool need_debounce_delay ;
  unsigned int delay ;
  unsigned int tmp ;
  int tmp___0 ;
  unsigned long tmp___1 ;
  struct device  const  *__mptr ;
  struct usb_device *udev ;
  u16 portstatus ;
  u16 portchange ;
  struct _ddebug descriptor ;
  long tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  bool port_resumed ;
  int tmp___5 ;
  struct usb_port *port_dev ;
  unsigned long tmp___6 ;
  struct device  const  *__mptr___0 ;

  {
  hdev = hub->hdev;
  need_debounce_delay = 0;
  if ((unsigned int )type == 1U) {
    goto init2;
  }
  if ((unsigned int )type == 2U) {
    goto init3;
  }
  if ((unsigned int )type != 4U) {
    if ((unsigned long )hdev->parent != (unsigned long )((struct usb_device *)0)) {
      tmp___0 = hub_is_superspeed(hdev);
      if (tmp___0 != 0) {
        tmp = __create_pipe(hdev, 0U);
        ret = usb_control_msg(hdev, tmp | 2147483648U, 12, 32, (int )((unsigned int )((__u16 )hdev->level) + 65535U),
                              0, 0, 0, 5000);
        if (ret < 0) {
          dev_err((struct device  const  *)hub->intfdev, "set hub depth failed\n");
        }
      }
    }
    if ((unsigned int )type == 0U) {
      delay = hub_power_on(hub, 0);
      hub->init_work.work.func = & hub_init_func2;
      tmp___1 = msecs_to_jiffies(delay);
      schedule_delayed_work(& hub->init_work, tmp___1);
      __mptr = (struct device  const  *)hub->intfdev;
      usb_autopm_get_interface_no_resume((struct usb_interface *)__mptr + 0xffffffffffffffd0UL);
      return;
    } else
    if ((unsigned int )type == 5U) {
      hcd = bus_to_hcd(hdev->bus);
      if ((unsigned long )(hcd->driver)->update_hub_device != (unsigned long )((int (*)(struct usb_hcd * ,
                                                                                        struct usb_device * ,
                                                                                        struct usb_tt * ,
                                                                                        gfp_t  ))0)) {
        ret = (*((hcd->driver)->update_hub_device))(hcd, hdev, & hub->tt, 16U);
        if (ret < 0) {
          dev_err((struct device  const  *)hub->intfdev, "Host not accepting hub info update.\n");
          dev_err((struct device  const  *)hub->intfdev, "LS/FS devices and hubs may not work under this hub\n.");
        }
      }
      hub_power_on(hub, 1);
    } else {
      hub_power_on(hub, 1);
    }
  }
  init2: 
  port1 = 1;
  goto ldv_31195;
  ldv_31194: 
  udev = (*(hub->ports + ((unsigned long )port1 + 0xffffffffffffffffUL)))->child;
  portchange = 0U;
  portstatus = portchange;
  status = hub_port_status(hub, port1, & portstatus, & portchange);
  if ((unsigned long )udev != (unsigned long )((struct usb_device *)0) || (int )portstatus & 1) {
    descriptor.modname = "usbcore";
    descriptor.function = "hub_activate";
    descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
    descriptor.format = "port %d: status %04x change %04x\n";
    descriptor.lineno = 1152U;
    descriptor.flags = 1U;
    tmp___2 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
    if (tmp___2 != 0L) {
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)hub->intfdev, "port %d: status %04x change %04x\n",
                        port1, (int )portstatus, (int )portchange);
    }
  }
  if (((int )portstatus & 2) != 0 && ((((unsigned int )type != 4U || ((int )portstatus & 1) == 0) || (unsigned long )udev == (unsigned long )((struct usb_device *)0)) || (unsigned int )udev->state == 0U)) {
    tmp___3 = hub_is_superspeed(hdev);
    if (tmp___3 == 0) {
      usb_clear_port_feature(hdev, port1, 1);
      portstatus = (unsigned int )portstatus & 65533U;
    } else {
      portstatus = (unsigned int )portstatus & 65533U;
    }
  }
  if ((int )portchange & 1) {
    need_debounce_delay = 1;
    usb_clear_port_feature(hub->hdev, port1, 16);
  }
  if (((int )portchange & 2) != 0) {
    need_debounce_delay = 1;
    usb_clear_port_feature(hub->hdev, port1, 17);
  }
  if (((int )portchange & 32) != 0) {
    tmp___4 = hub_is_superspeed(hub->hdev);
    if (tmp___4 != 0) {
      need_debounce_delay = 1;
      usb_clear_port_feature(hub->hdev, port1, 29);
    }
  }
  if (((int )portstatus & 1) == 0 || (int )portchange & 1) {
    clear_bit(port1, (unsigned long volatile   *)(& hub->removed_bits));
  }
  if ((unsigned long )udev == (unsigned long )((struct usb_device *)0) || (unsigned int )udev->state == 0U) {
    if ((unsigned long )udev != (unsigned long )((struct usb_device *)0) || (int )portstatus & 1) {
      set_bit((unsigned int )port1, (unsigned long volatile   *)(& hub->change_bits));
    }
  } else
  if (((int )portstatus & 2) != 0) {
    port_resumed = ((int )portstatus & 480) == 0;
    if ((unsigned int )portchange != 0U) {
      set_bit((unsigned int )port1, (unsigned long volatile   *)(& hub->change_bits));
    } else {
      tmp___5 = hub_is_superspeed(hub->hdev);
      if (tmp___5 != 0 && (int )port_resumed) {
        set_bit((unsigned int )port1, (unsigned long volatile   *)(& hub->change_bits));
      }
    }
  } else
  if ((unsigned int )*((unsigned char *)udev + 1588UL) != 0U) {
    port_dev = *(hub->ports + ((unsigned long )port1 + 0xffffffffffffffffUL));
    udev->reset_resume = 1U;
    if ((unsigned int )*((unsigned char *)port_dev + 1157UL) != 0U) {
      set_bit((unsigned int )port1, (unsigned long volatile   *)(& hub->change_bits));
    }
  } else {
    usb_set_device_state(udev, 0);
    set_bit((unsigned int )port1, (unsigned long volatile   *)(& hub->change_bits));
  }
  port1 ++;
  ldv_31195: ;
  if (hdev->maxchild >= port1) {
    goto ldv_31194;
  }
  if ((int )need_debounce_delay) {
    delay = 100U;
    if ((unsigned int )type == 1U) {
      hub->init_work.work.func = & hub_init_func3;
      tmp___6 = msecs_to_jiffies(delay);
      schedule_delayed_work(& hub->init_work, tmp___6);
      return;
    } else {
      msleep(delay);
    }
  }
  init3: 
  hub->quiescing = 0U;
  status = usb_submit_urb(hub->urb, 16U);
  if (status < 0) {
    dev_err((struct device  const  *)hub->intfdev, "activate --> %d\n", status);
  }
  if ((unsigned int )*((unsigned char *)hub + 476UL) != 0U && (int )blinkenlights) {
    schedule_delayed_work(& hub->leds, 166UL);
  }
  kick_khubd(hub);
  if ((unsigned int )type <= 2U) {
    __mptr___0 = (struct device  const  *)hub->intfdev;
    usb_autopm_put_interface_async((struct usb_interface *)__mptr___0 + 0xffffffffffffffd0UL);
  }
  return;
}
}
static void hub_init_func2(struct work_struct *ws ) 
{ struct usb_hub *hub ;
  struct work_struct  const  *__mptr ;

  {
  __mptr = (struct work_struct  const  *)ws;
  hub = (struct usb_hub *)__mptr + 0xfffffffffffffd20UL;
  hub_activate(hub, 1);
  return;
}
}
static void hub_init_func3(struct work_struct *ws ) 
{ struct usb_hub *hub ;
  struct work_struct  const  *__mptr ;

  {
  __mptr = (struct work_struct  const  *)ws;
  hub = (struct usb_hub *)__mptr + 0xfffffffffffffd20UL;
  hub_activate(hub, 2);
  return;
}
}
static void hub_quiesce(struct usb_hub *hub , enum hub_quiescing_type type ) 
{ struct usb_device *hdev ;
  int i ;

  {
  hdev = hub->hdev;
  cancel_delayed_work_sync(& hub->init_work);
  hub->quiescing = 1U;
  if ((unsigned int )type != 2U) {
    i = 0;
    goto ldv_31222;
    ldv_31221: ;
    if ((unsigned long )(*(hub->ports + (unsigned long )i))->child != (unsigned long )((struct usb_device *)0)) {
      usb_disconnect(& (*(hub->ports + (unsigned long )i))->child);
    }
    i ++;
    ldv_31222: ;
    if (hdev->maxchild > i) {
      goto ldv_31221;
    }
  }
  usb_kill_urb(hub->urb);
  if ((unsigned int )*((unsigned char *)hub + 476UL) != 0U) {
    cancel_delayed_work_sync(& hub->leds);
  }
  if ((unsigned long )hub->tt.hub != (unsigned long )((struct usb_device *)0)) {
    flush_work(& hub->tt.clear_work);
  }
  return;
}
}
static int hub_pre_reset(struct usb_interface *intf ) 
{ struct usb_hub *hub ;
  void *tmp ;

  {
  tmp = usb_get_intfdata(intf);
  hub = (struct usb_hub *)tmp;
  hub_quiesce(hub, 1);
  return (0);
}
}
static int hub_post_reset(struct usb_interface *intf ) 
{ struct usb_hub *hub ;
  void *tmp ;

  {
  tmp = usb_get_intfdata(intf);
  hub = (struct usb_hub *)tmp;
  hub_activate(hub, 3);
  return (0);
}
}
static int hub_configure(struct usb_hub *hub , struct usb_endpoint_descriptor *endpoint ) 
{ struct usb_hcd *hcd ;
  struct usb_device *hdev ;
  struct device *hub_dev ;
  u16 hubstatus ;
  u16 hubchange ;
  u16 wHubCharacteristics ;
  unsigned int pipe ;
  int maxp ;
  int ret ;
  int i ;
  char *message ;
  unsigned int unit_load ;
  unsigned int full_load ;
  void *tmp ;
  void *tmp___0 ;
  struct lock_class_key __key ;
  void *tmp___1 ;
  void *tmp___2 ;
  int tmp___3 ;
  int i___0 ;
  char portstr[32U] ;
  struct _ddebug descriptor ;
  long tmp___4 ;
  struct _ddebug descriptor___0 ;
  long tmp___5 ;
  int tmp___6 ;
  struct _ddebug descriptor___1 ;
  long tmp___7 ;
  struct _ddebug descriptor___2 ;
  long tmp___8 ;
  struct _ddebug descriptor___3 ;
  long tmp___9 ;
  struct _ddebug descriptor___4 ;
  long tmp___10 ;
  struct _ddebug descriptor___5 ;
  long tmp___11 ;
  struct _ddebug descriptor___6 ;
  long tmp___12 ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;
  atomic_long_t __constr_expr_0 ;
  struct _ddebug descriptor___7 ;
  long tmp___13 ;
  struct _ddebug descriptor___8 ;
  long tmp___14 ;
  struct _ddebug descriptor___9 ;
  long tmp___15 ;
  struct _ddebug descriptor___10 ;
  long tmp___16 ;
  struct _ddebug descriptor___11 ;
  long tmp___17 ;
  struct _ddebug descriptor___12 ;
  long tmp___18 ;
  struct _ddebug descriptor___13 ;
  long tmp___19 ;
  struct _ddebug descriptor___14 ;
  long tmp___20 ;
  struct _ddebug descriptor___15 ;
  long tmp___21 ;
  int remaining ;
  struct _ddebug descriptor___16 ;
  long tmp___22 ;
  struct _ddebug descriptor___17 ;
  long tmp___23 ;
  struct _ddebug descriptor___18 ;
  long tmp___24 ;
  struct _ddebug descriptor___19 ;
  long tmp___25 ;
  unsigned int tmp___26 ;
  __u16 tmp___27 ;
  int tmp___28 ;
  char *tmp___29 ;
  char *tmp___30 ;
  char *tmp___31 ;

  {
  hdev = hub->hdev;
  hub_dev = hub->intfdev;
  message = (char *)"out of memory";
  tmp = kmalloc(8UL, 208U);
  hub->buffer = (u8 (*)[8])tmp;
  if ((unsigned long )hub->buffer == (unsigned long )((u8 (*)[8U])0)) {
    ret = -12;
    goto fail;
  }
  tmp___0 = kmalloc(4UL, 208U);
  hub->status = (union __anonunion_222 *)tmp___0;
  if ((unsigned long )hub->status == (unsigned long )((union __anonunion_status_220 *)0)) {
    ret = -12;
    goto fail;
  }
  __mutex_init(& hub->status_mutex, "&hub->status_mutex", & __key);
  tmp___1 = kmalloc(15UL, 208U);
  hub->descriptor = (struct usb_hub_descriptor *)tmp___1;
  if ((unsigned long )hub->descriptor == (unsigned long )((struct usb_hub_descriptor *)0)) {
    ret = -12;
    goto fail;
  }
  ret = get_hub_descriptor(hdev, (void *)hub->descriptor);
  if (ret < 0) {
    message = (char *)"can\'t read hub descriptor";
    goto fail;
  } else
  if ((unsigned int )(hub->descriptor)->bNbrPorts > 31U) {
    message = (char *)"hub has too many ports!";
    ret = -19;
    goto fail;
  } else
  if ((unsigned int )(hub->descriptor)->bNbrPorts == 0U) {
    message = (char *)"hub doesn\'t have any ports!";
    ret = -19;
    goto fail;
  }
  hdev->maxchild = (int )(hub->descriptor)->bNbrPorts;
  if (hdev->maxchild == 1) {
    tmp___29 = (char *)"";
  } else {
    tmp___29 = (char *)"s";
  }
  _dev_info((struct device  const  *)hub_dev, "%d port%s detected\n", hdev->maxchild,
            tmp___29);
  tmp___2 = kzalloc((unsigned long )hdev->maxchild * 8UL, 208U);
  hub->ports = (struct usb_port **)tmp___2;
  if ((unsigned long )hub->ports == (unsigned long )((struct usb_port **)0)) {
    ret = -12;
    goto fail;
  }
  wHubCharacteristics = (hub->descriptor)->wHubCharacteristics;
  tmp___3 = hub_is_superspeed(hdev);
  if (tmp___3 != 0) {
    unit_load = 150U;
    full_load = 900U;
  } else {
    unit_load = 100U;
    full_load = 500U;
  }
  if (((int )wHubCharacteristics & 4) != 0) {
    tmp___6 = hub_is_superspeed(hdev);
    if (tmp___6 == 0) {
      i___0 = 0;
      goto ldv_31254;
      ldv_31253: 
      if (((int )(hub->descriptor)->u.hs.DeviceRemovable[(i___0 + 1) / 8] >> (i___0 + 1) % 8) & 1) {
        portstr[i___0] = 70;
      } else {
        portstr[i___0] = 82;
      }
      i___0 ++;
      ldv_31254: ;
      if (hdev->maxchild > i___0) {
        goto ldv_31253;
      }
      portstr[hdev->maxchild] = 0;
      descriptor.modname = "usbcore";
      descriptor.function = "hub_configure";
      descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
      descriptor.format = "compound device; port removable status: %s\n";
      descriptor.lineno = 1428U;
      descriptor.flags = 1U;
      tmp___4 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
      if (tmp___4 != 0L) {
        __dynamic_dev_dbg(& descriptor, (struct device  const  *)hub_dev, "compound device; port removable status: %s\n",
                          (char *)(& portstr));
      }
    } else {
      goto _L;
    }
  } else {
    _L: 
    descriptor___0.modname = "usbcore";
    descriptor___0.function = "hub_configure";
    descriptor___0.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
    descriptor___0.format = "standalone hub\n";
    descriptor___0.lineno = 1430U;
    descriptor___0.flags = 1U;
    tmp___5 = ldv__builtin_expect((long )descriptor___0.flags & 1L, 0L);
    if (tmp___5 != 0L) {
      __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)hub_dev, "standalone hub\n");
    }
  }
  switch ((int )wHubCharacteristics & 3) {
  case 0: 
  descriptor___1.modname = "usbcore";
  descriptor___1.function = "hub_configure";
  descriptor___1.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
  descriptor___1.format = "ganged power switching\n";
  descriptor___1.lineno = 1434U;
  descriptor___1.flags = 1U;
  tmp___7 = ldv__builtin_expect((long )descriptor___1.flags & 1L, 0L);
  if (tmp___7 != 0L) {
    __dynamic_dev_dbg(& descriptor___1, (struct device  const  *)hub_dev, "ganged power switching\n");
  }
  goto ldv_31261;
  case 1: 
  descriptor___2.modname = "usbcore";
  descriptor___2.function = "hub_configure";
  descriptor___2.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
  descriptor___2.format = "individual port power switching\n";
  descriptor___2.lineno = 1437U;
  descriptor___2.flags = 1U;
  tmp___8 = ldv__builtin_expect((long )descriptor___2.flags & 1L, 0L);
  if (tmp___8 != 0L) {
    __dynamic_dev_dbg(& descriptor___2, (struct device  const  *)hub_dev, "individual port power switching\n");
  }
  goto ldv_31261;
  case 2: ;
  case 3: 
  descriptor___3.modname = "usbcore";
  descriptor___3.function = "hub_configure";
  descriptor___3.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
  descriptor___3.format = "no power switching (usb 1.0)\n";
  descriptor___3.lineno = 1441U;
  descriptor___3.flags = 1U;
  tmp___9 = ldv__builtin_expect((long )descriptor___3.flags & 1L, 0L);
  if (tmp___9 != 0L) {
    __dynamic_dev_dbg(& descriptor___3, (struct device  const  *)hub_dev, "no power switching (usb 1.0)\n");
  }
  goto ldv_31261;
  }
  ldv_31261: ;
  switch ((int )wHubCharacteristics & 24) {
  case 0: 
  descriptor___4.modname = "usbcore";
  descriptor___4.function = "hub_configure";
  descriptor___4.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
  descriptor___4.format = "global over-current protection\n";
  descriptor___4.lineno = 1447U;
  descriptor___4.flags = 1U;
  tmp___10 = ldv__builtin_expect((long )descriptor___4.flags & 1L, 0L);
  if (tmp___10 != 0L) {
    __dynamic_dev_dbg(& descriptor___4, (struct device  const  *)hub_dev, "global over-current protection\n");
  }
  goto ldv_31269;
  case 8: 
  descriptor___5.modname = "usbcore";
  descriptor___5.function = "hub_configure";
  descriptor___5.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
  descriptor___5.format = "individual port over-current protection\n";
  descriptor___5.lineno = 1450U;
  descriptor___5.flags = 1U;
  tmp___11 = ldv__builtin_expect((long )descriptor___5.flags & 1L, 0L);
  if (tmp___11 != 0L) {
    __dynamic_dev_dbg(& descriptor___5, (struct device  const  *)hub_dev, "individual port over-current protection\n");
  }
  goto ldv_31269;
  case 16: ;
  case 24: 
  descriptor___6.modname = "usbcore";
  descriptor___6.function = "hub_configure";
  descriptor___6.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
  descriptor___6.format = "no over-current protection\n";
  descriptor___6.lineno = 1454U;
  descriptor___6.flags = 1U;
  tmp___12 = ldv__builtin_expect((long )descriptor___6.flags & 1L, 0L);
  if (tmp___12 != 0L) {
    __dynamic_dev_dbg(& descriptor___6, (struct device  const  *)hub_dev, "no over-current protection\n");
  }
  goto ldv_31269;
  }
  ldv_31269: 
  spinlock_check(& hub->tt.lock);
  __raw_spin_lock_init(& hub->tt.lock.ldv_6014.rlock, "&(&hub->tt.lock)->rlock", & __key___0);
  INIT_LIST_HEAD(& hub->tt.clear_list);
  __init_work(& hub->tt.clear_work, 0);
  __constr_expr_0.counter = 137438953408L;
  hub->tt.clear_work.data = __constr_expr_0;
  lockdep_init_map(& hub->tt.clear_work.lockdep_map, "(&hub->tt.clear_work)", & __key___1,
                   0);
  INIT_LIST_HEAD(& hub->tt.clear_work.entry);
  hub->tt.clear_work.func = & hub_tt_work;
  switch ((int )hdev->descriptor.bDeviceProtocol) {
  case 0: ;
  goto ldv_31279;
  case 1: 
  descriptor___7.modname = "usbcore";
  descriptor___7.function = "hub_configure";
  descriptor___7.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
  descriptor___7.format = "Single TT\n";
  descriptor___7.lineno = 1465U;
  descriptor___7.flags = 1U;
  tmp___13 = ldv__builtin_expect((long )descriptor___7.flags & 1L, 0L);
  if (tmp___13 != 0L) {
    __dynamic_dev_dbg(& descriptor___7, (struct device  const  *)hub_dev, "Single TT\n");
  }
  hub->tt.hub = hdev;
  goto ldv_31279;
  case 2: 
  ret = usb_set_interface(hdev, 0, 1);
  if (ret == 0) {
    descriptor___8.modname = "usbcore";
    descriptor___8.function = "hub_configure";
    descriptor___8.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
    descriptor___8.format = "TT per port\n";
    descriptor___8.lineno = 1471U;
    descriptor___8.flags = 1U;
    tmp___14 = ldv__builtin_expect((long )descriptor___8.flags & 1L, 0L);
    if (tmp___14 != 0L) {
      __dynamic_dev_dbg(& descriptor___8, (struct device  const  *)hub_dev, "TT per port\n");
    }
    hub->tt.multi = 1;
  } else {
    dev_err((struct device  const  *)hub_dev, "Using single TT (err %d)\n", ret);
  }
  hub->tt.hub = hdev;
  goto ldv_31279;
  case 3: ;
  goto ldv_31279;
  default: 
  descriptor___9.modname = "usbcore";
  descriptor___9.function = "hub_configure";
  descriptor___9.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
  descriptor___9.format = "Unrecognized hub protocol %d\n";
  descriptor___9.lineno = 1483U;
  descriptor___9.flags = 1U;
  tmp___15 = ldv__builtin_expect((long )descriptor___9.flags & 1L, 0L);
  if (tmp___15 != 0L) {
    __dynamic_dev_dbg(& descriptor___9, (struct device  const  *)hub_dev, "Unrecognized hub protocol %d\n",
                      (int )hdev->descriptor.bDeviceProtocol);
  }
  goto ldv_31279;
  }
  ldv_31279: ;
  switch ((int )wHubCharacteristics & 96) {
  case 0: ;
  if ((unsigned int )hdev->descriptor.bDeviceProtocol != 0U) {
    hub->tt.think_time = 666U;
    descriptor___10.modname = "usbcore";
    descriptor___10.function = "hub_configure";
    descriptor___10.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
    descriptor___10.format = "TT requires at most %d FS bit times (%d ns)\n";
    descriptor___10.lineno = 1494U;
    descriptor___10.flags = 1U;
    tmp___16 = ldv__builtin_expect((long )descriptor___10.flags & 1L, 0L);
    if (tmp___16 != 0L) {
      __dynamic_dev_dbg(& descriptor___10, (struct device  const  *)hub_dev, "TT requires at most %d FS bit times (%d ns)\n",
                        8, hub->tt.think_time);
    }
  }
  goto ldv_31289;
  case 32: 
  hub->tt.think_time = 1332U;
  descriptor___11.modname = "usbcore";
  descriptor___11.function = "hub_configure";
  descriptor___11.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
  descriptor___11.format = "TT requires at most %d FS bit times (%d ns)\n";
  descriptor___11.lineno = 1501U;
  descriptor___11.flags = 1U;
  tmp___17 = ldv__builtin_expect((long )descriptor___11.flags & 1L, 0L);
  if (tmp___17 != 0L) {
    __dynamic_dev_dbg(& descriptor___11, (struct device  const  *)hub_dev, "TT requires at most %d FS bit times (%d ns)\n",
                      16, hub->tt.think_time);
  }
  goto ldv_31289;
  case 64: 
  hub->tt.think_time = 1998U;
  descriptor___12.modname = "usbcore";
  descriptor___12.function = "hub_configure";
  descriptor___12.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
  descriptor___12.format = "TT requires at most %d FS bit times (%d ns)\n";
  descriptor___12.lineno = 1507U;
  descriptor___12.flags = 1U;
  tmp___18 = ldv__builtin_expect((long )descriptor___12.flags & 1L, 0L);
  if (tmp___18 != 0L) {
    __dynamic_dev_dbg(& descriptor___12, (struct device  const  *)hub_dev, "TT requires at most %d FS bit times (%d ns)\n",
                      24, hub->tt.think_time);
  }
  goto ldv_31289;
  case 96: 
  hub->tt.think_time = 2664U;
  descriptor___13.modname = "usbcore";
  descriptor___13.function = "hub_configure";
  descriptor___13.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
  descriptor___13.format = "TT requires at most %d FS bit times (%d ns)\n";
  descriptor___13.lineno = 1513U;
  descriptor___13.flags = 1U;
  tmp___19 = ldv__builtin_expect((long )descriptor___13.flags & 1L, 0L);
  if (tmp___19 != 0L) {
    __dynamic_dev_dbg(& descriptor___13, (struct device  const  *)hub_dev, "TT requires at most %d FS bit times (%d ns)\n",
                      32, hub->tt.think_time);
  }
  goto ldv_31289;
  }
  ldv_31289: ;
  if (((int )wHubCharacteristics & 128) != 0) {
    hub->has_indicators = 1U;
    descriptor___14.modname = "usbcore";
    descriptor___14.function = "hub_configure";
    descriptor___14.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
    descriptor___14.format = "Port indicators are supported\n";
    descriptor___14.lineno = 1520U;
    descriptor___14.flags = 1U;
    tmp___20 = ldv__builtin_expect((long )descriptor___14.flags & 1L, 0L);
    if (tmp___20 != 0L) {
      __dynamic_dev_dbg(& descriptor___14, (struct device  const  *)hub_dev, "Port indicators are supported\n");
    }
  }
  descriptor___15.modname = "usbcore";
  descriptor___15.function = "hub_configure";
  descriptor___15.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
  descriptor___15.format = "power on to power good time: %dms\n";
  descriptor___15.lineno = 1524U;
  descriptor___15.flags = 1U;
  tmp___21 = ldv__builtin_expect((long )descriptor___15.flags & 1L, 0L);
  if (tmp___21 != 0L) {
    __dynamic_dev_dbg(& descriptor___15, (struct device  const  *)hub_dev, "power on to power good time: %dms\n",
                      (int )(hub->descriptor)->bPwrOn2PwrGood * 2);
  }
  ret = usb_get_status(hdev, 0, 0, (void *)(& hubstatus));
  if (ret <= 1) {
    message = (char *)"can\'t get hub status";
    goto fail;
  }
  hcd = bus_to_hcd(hdev->bus);
  if ((unsigned long )(hdev->bus)->root_hub == (unsigned long )hdev) {
    if (hcd->power_budget != 0U) {
      hdev->bus_mA = (unsigned short )hcd->power_budget;
    } else {
      hdev->bus_mA = (int )((unsigned short )hdev->maxchild) * (int )((unsigned short )full_load);
    }
    if ((unsigned int )hdev->bus_mA >= full_load) {
      hub->mA_per_port = full_load;
    } else {
      hub->mA_per_port = (unsigned int )hdev->bus_mA;
      hub->limited_power = 1U;
    }
  } else
  if (((int )hubstatus & 1) == 0) {
    remaining = (int )hdev->bus_mA - (int )(hub->descriptor)->bHubContrCurrent;
    descriptor___16.modname = "usbcore";
    descriptor___16.function = "hub_configure";
    descriptor___16.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
    descriptor___16.format = "hub controller current requirement: %dmA\n";
    descriptor___16.lineno = 1552U;
    descriptor___16.flags = 1U;
    tmp___22 = ldv__builtin_expect((long )descriptor___16.flags & 1L, 0L);
    if (tmp___22 != 0L) {
      __dynamic_dev_dbg(& descriptor___16, (struct device  const  *)hub_dev, "hub controller current requirement: %dmA\n",
                        (int )(hub->descriptor)->bHubContrCurrent);
    }
    hub->limited_power = 1U;
    if ((unsigned int )remaining < (unsigned int )hdev->maxchild * unit_load) {
      dev_warn((struct device  const  *)hub_dev, "insufficient power available to use all downstream ports\n");
    }
    hub->mA_per_port = unit_load;
  } else {
    hub->mA_per_port = full_load;
  }
  if (hub->mA_per_port < full_load) {
    descriptor___17.modname = "usbcore";
    descriptor___17.function = "hub_configure";
    descriptor___17.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
    descriptor___17.format = "%umA bus power budget for each child\n";
    descriptor___17.lineno = 1568U;
    descriptor___17.flags = 1U;
    tmp___23 = ldv__builtin_expect((long )descriptor___17.flags & 1L, 0L);
    if (tmp___23 != 0L) {
      __dynamic_dev_dbg(& descriptor___17, (struct device  const  *)hub_dev, "%umA bus power budget for each child\n",
                        hub->mA_per_port);
    }
  }
  if ((unsigned long )(hcd->driver)->update_hub_device != (unsigned long )((int (*)(struct usb_hcd * ,
                                                                                    struct usb_device * ,
                                                                                    struct usb_tt * ,
                                                                                    gfp_t  ))0)) {
    ret = (*((hcd->driver)->update_hub_device))(hcd, hdev, & hub->tt, 208U);
    if (ret < 0) {
      message = (char *)"can\'t update HCD hub info";
      goto fail;
    }
  }
  ret = hub_hub_status(hub, & hubstatus, & hubchange);
  if (ret < 0) {
    message = (char *)"can\'t get hub status";
    goto fail;
  }
  if (((int )(hdev->actconfig)->desc.bmAttributes & 64) != 0) {
    descriptor___18.modname = "usbcore";
    descriptor___18.function = "hub_configure";
    descriptor___18.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
    descriptor___18.format = "local power source is %s\n";
    descriptor___18.lineno = 1592U;
    descriptor___18.flags = 1U;
    tmp___24 = ldv__builtin_expect((long )descriptor___18.flags & 1L, 0L);
    if (tmp___24 != 0L) {
      if ((int )hubstatus & 1) {
        tmp___30 = (char *)"lost (inactive)";
      } else {
        tmp___30 = (char *)"good";
      }
      __dynamic_dev_dbg(& descriptor___18, (struct device  const  *)hub_dev, "local power source is %s\n",
                        tmp___30);
    }
  }
  if (((int )wHubCharacteristics & 24) == 0) {
    descriptor___19.modname = "usbcore";
    descriptor___19.function = "hub_configure";
    descriptor___19.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
    descriptor___19.format = "%sover-current condition exists\n";
    descriptor___19.lineno = 1596U;
    descriptor___19.flags = 1U;
    tmp___25 = ldv__builtin_expect((long )descriptor___19.flags & 1L, 0L);
    if (tmp___25 != 0L) {
      if (((int )hubstatus & 2) != 0) {
        tmp___31 = (char *)"";
      } else {
        tmp___31 = (char *)"no ";
      }
      __dynamic_dev_dbg(& descriptor___19, (struct device  const  *)hub_dev, "%sover-current condition exists\n",
                        tmp___31);
    }
  }
  tmp___26 = __create_pipe(hdev, (unsigned int )endpoint->bEndpointAddress);
  pipe = tmp___26 | 1073741952U;
  tmp___27 = usb_maxpacket(hdev, (int )pipe, (pipe & 128U) == 0U);
  maxp = (int )tmp___27;
  if ((unsigned int )maxp > 8U) {
    maxp = 8;
  }
  hub->urb = usb_alloc_urb(0, 208U);
  if ((unsigned long )hub->urb == (unsigned long )((struct urb *)0)) {
    ret = -12;
    goto fail;
  }
  usb_fill_int_urb(hub->urb, hdev, pipe, (void *)hub->buffer, maxp, & hub_irq, (void *)hub,
                   (int )endpoint->bInterval);
  if ((unsigned int )*((unsigned char *)hub + 476UL) != 0U && (int )blinkenlights) {
    hub->indicator[0] = 1U;
  }
  i = 0;
  goto ldv_31304;
  ldv_31303: 
  tmp___28 = usb_hub_create_port_device(hub, i + 1);
  if (tmp___28 < 0) {
    dev_err((struct device  const  *)hub->intfdev, "couldn\'t create port%d device.\n",
            i + 1);
  }
  i ++;
  ldv_31304: ;
  if (hdev->maxchild > i) {
    goto ldv_31303;
  }
  usb_hub_adjust_deviceremovable(hdev, hub->descriptor);
  hub_activate(hub, 0);
  return (0);
  fail: 
  dev_err((struct device  const  *)hub_dev, "config failed, %s (err %d)\n", message,
          ret);
  return (ret);
}
}
static void hub_release(struct kref *kref ) 
{ struct usb_hub *hub ;
  struct kref  const  *__mptr ;
  struct device  const  *__mptr___0 ;

  {
  __mptr = (struct kref  const  *)kref;
  hub = (struct usb_hub *)__mptr + 0xfffffffffffffff0UL;
  __mptr___0 = (struct device  const  *)hub->intfdev;
  usb_put_intf((struct usb_interface *)__mptr___0 + 0xffffffffffffffd0UL);
  kfree((void const   *)hub);
  return;
}
}
static unsigned int highspeed_hubs  ;
static void hub_disconnect(struct usb_interface *intf ) 
{ struct usb_hub *hub ;
  void *tmp ;
  struct usb_device *hdev ;
  struct usb_device *tmp___0 ;
  int i ;
  int tmp___1 ;

  {
  tmp = usb_get_intfdata(intf);
  hub = (struct usb_hub *)tmp;
  tmp___0 = interface_to_usbdev(intf);
  hdev = tmp___0;
  spin_lock_irq(& hub_event_lock);
  tmp___1 = list_empty((struct list_head  const  *)(& hub->event_list));
  if (tmp___1 == 0) {
    list_del_init(& hub->event_list);
    usb_autopm_put_interface_no_suspend(intf);
  }
  hub->disconnected = 1U;
  spin_unlock_irq(& hub_event_lock);
  hub->error = 0;
  hub_quiesce(hub, 0);
  usb_set_intfdata(intf, 0);
  i = 0;
  goto ldv_31322;
  ldv_31321: 
  usb_hub_remove_port_device(hub, i + 1);
  i ++;
  ldv_31322: ;
  if (hdev->maxchild > i) {
    goto ldv_31321;
  }
  (hub->hdev)->maxchild = 0;
  if ((unsigned int )(hub->hdev)->speed == 3U) {
    highspeed_hubs --;
  }
  usb_free_urb(hub->urb);
  kfree((void const   *)hub->ports);
  kfree((void const   *)hub->descriptor);
  kfree((void const   *)hub->status);
  kfree((void const   *)hub->buffer);
  pm_suspend_ignore_children(& intf->dev, 0);
  kref_put(& hub->kref, & hub_release);
  return;
}
}
static int hub_probe(struct usb_interface *intf , struct usb_device_id  const  *id ) 
{ struct usb_host_interface *desc ;
  struct usb_endpoint_descriptor *endpoint ;
  struct usb_device *hdev ;
  struct usb_hub *hub ;
  int tmp ;
  void *tmp___0 ;
  struct _ddebug descriptor ;
  long tmp___1 ;
  struct lock_class_key __key ;
  atomic_long_t __constr_expr_0 ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;
  atomic_long_t __constr_expr_1 ;
  struct lock_class_key __key___2 ;
  int tmp___2 ;

  {
  desc = intf->cur_altsetting;
  hdev = interface_to_usbdev(intf);
  pm_runtime_set_autosuspend_delay(& hdev->dev, 0);
  usb_enable_autosuspend(hdev);
  if ((unsigned int )hdev->level == 6U) {
    dev_err((struct device  const  *)(& intf->dev), "Unsupported bus topology: hub nested too deep\n");
    return (-7);
  }
  if ((unsigned long )hdev->parent != (unsigned long )((struct usb_device *)0)) {
    dev_warn((struct device  const  *)(& intf->dev), "ignoring external hub\n");
    return (-19);
  }
  if ((unsigned int )desc->desc.bInterfaceSubClass != 0U && (unsigned int )desc->desc.bInterfaceSubClass != 1U) {
    descriptor_error: 
    dev_err((struct device  const  *)(& intf->dev), "bad descriptor, ignoring hub\n");
    return (-5);
  }
  if ((unsigned int )desc->desc.bNumEndpoints != 1U) {
    goto descriptor_error;
  }
  endpoint = & (desc->endpoint)->desc;
  tmp = usb_endpoint_is_int_in((struct usb_endpoint_descriptor  const  *)endpoint);
  if (tmp == 0) {
    goto descriptor_error;
  }
  _dev_info((struct device  const  *)(& intf->dev), "USB hub found\n");
  tmp___0 = kzalloc(968UL, 208U);
  hub = (struct usb_hub *)tmp___0;
  if ((unsigned long )hub == (unsigned long )((struct usb_hub *)0)) {
    descriptor.modname = "usbcore";
    descriptor.function = "hub_probe";
    descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
    descriptor.format = "couldn\'t kmalloc hub struct\n";
    descriptor.lineno = 1773U;
    descriptor.flags = 1U;
    tmp___1 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
    if (tmp___1 != 0L) {
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& intf->dev), "couldn\'t kmalloc hub struct\n");
    }
    return (-12);
  }
  kref_init(& hub->kref);
  INIT_LIST_HEAD(& hub->event_list);
  hub->intfdev = & intf->dev;
  hub->hdev = hdev;
  __init_work(& hub->leds.work, 0);
  __constr_expr_0.counter = 137438953408L;
  hub->leds.work.data = __constr_expr_0;
  lockdep_init_map(& hub->leds.work.lockdep_map, "(&(&hub->leds)->work)", & __key,
                   0);
  INIT_LIST_HEAD(& hub->leds.work.entry);
  hub->leds.work.func = & led_work;
  init_timer_key(& hub->leds.timer, 2U, "(&(&hub->leds)->timer)", & __key___0);
  hub->leds.timer.function = & delayed_work_timer_fn;
  hub->leds.timer.data = (unsigned long )(& hub->leds);
  __init_work(& hub->init_work.work, 0);
  __constr_expr_1.counter = 137438953408L;
  hub->init_work.work.data = __constr_expr_1;
  lockdep_init_map(& hub->init_work.work.lockdep_map, "(&(&hub->init_work)->work)",
                   & __key___1, 0);
  INIT_LIST_HEAD(& hub->init_work.work.entry);
  hub->init_work.work.func = 0;
  init_timer_key(& hub->init_work.timer, 2U, "(&(&hub->init_work)->timer)", & __key___2);
  hub->init_work.timer.function = & delayed_work_timer_fn;
  hub->init_work.timer.data = (unsigned long )(& hub->init_work);
  usb_get_intf(intf);
  usb_set_intfdata(intf, (void *)hub);
  intf->needs_remote_wakeup = 1U;
  pm_suspend_ignore_children(& intf->dev, 1);
  if ((unsigned int )hdev->speed == 3U) {
    highspeed_hubs ++;
  }
  if ((int )id->driver_info & 1) {
    hub->quirk_check_port_auto_suspend = 1U;
  }
  tmp___2 = hub_configure(hub, endpoint);
  if (tmp___2 >= 0) {
    return (0);
  }
  hub_disconnect(intf);
  return (-19);
}
}
static int hub_ioctl(struct usb_interface *intf , unsigned int code , void *user_data ) 
{ struct usb_device *hdev ;
  struct usb_device *tmp ;
  struct usb_hub *hub ;
  struct usb_hub *tmp___0 ;
  struct usbdevfs_hub_portinfo *info ;
  int i ;

  {
  tmp = interface_to_usbdev(intf);
  hdev = tmp;
  tmp___0 = usb_hub_to_struct_hub(hdev);
  hub = tmp___0;
  switch (code) {
  case 2155894035U: 
  info = (struct usbdevfs_hub_portinfo *)user_data;
  spin_lock_irq(& device_state_lock);
  if (hdev->devnum <= 0) {
    info->nports = 0;
  } else {
    info->nports = (char )hdev->maxchild;
    i = 0;
    goto ldv_31352;
    ldv_31351: ;
    if ((unsigned long )(*(hub->ports + (unsigned long )i))->child == (unsigned long )((struct usb_device *)0)) {
      info->port[i] = 0;
    } else {
      info->port[i] = (char )((*(hub->ports + (unsigned long )i))->child)->devnum;
    }
    i ++;
    ldv_31352: ;
    if ((int )info->nports > i) {
      goto ldv_31351;
    }
  }
  spin_unlock_irq(& device_state_lock);
  return ((int )info->nports + 1);
  default: ;
  return (-38);
  }
}
}
static int find_port_owner(struct usb_device *hdev , unsigned int port1 , struct dev_state ***ppowner ) 
{ struct usb_hub *tmp ;

  {
  if ((unsigned int )hdev->state == 0U) {
    return (-19);
  }
  if (port1 == 0U || (unsigned int )hdev->maxchild < port1) {
    return (-22);
  }
  tmp = usb_hub_to_struct_hub(hdev);
  *ppowner = & (*(tmp->ports + (unsigned long )(port1 - 1U)))->port_owner;
  return (0);
}
}
int usb_hub_claim_port(struct usb_device *hdev , unsigned int port1 , struct dev_state *owner ) 
{ int rc ;
  struct dev_state **powner ;

  {
  rc = find_port_owner(hdev, port1, & powner);
  if (rc != 0) {
    return (rc);
  }
  if ((unsigned long )*powner != (unsigned long )((struct dev_state *)0)) {
    return (-16);
  }
  *powner = owner;
  return (rc);
}
}
int usb_hub_release_port(struct usb_device *hdev , unsigned int port1 , struct dev_state *owner ) 
{ int rc ;
  struct dev_state **powner ;

  {
  rc = find_port_owner(hdev, port1, & powner);
  if (rc != 0) {
    return (rc);
  }
  if ((unsigned long )*powner != (unsigned long )owner) {
    return (-2);
  }
  *powner = 0;
  return (rc);
}
}
void usb_hub_release_all_ports(struct usb_device *hdev , struct dev_state *owner ) 
{ struct usb_hub *hub ;
  struct usb_hub *tmp ;
  int n ;

  {
  tmp = usb_hub_to_struct_hub(hdev);
  hub = tmp;
  n = 0;
  goto ldv_31381;
  ldv_31380: ;
  if ((unsigned long )(*(hub->ports + (unsigned long )n))->port_owner == (unsigned long )owner) {
    (*(hub->ports + (unsigned long )n))->port_owner = 0;
  }
  n ++;
  ldv_31381: ;
  if (hdev->maxchild > n) {
    goto ldv_31380;
  }
  return;
}
}
bool usb_device_is_owned(struct usb_device *udev ) 
{ struct usb_hub *hub ;

  {
  if ((unsigned int )udev->state == 0U || (unsigned long )udev->parent == (unsigned long )((struct usb_device *)0)) {
    return (0);
  }
  hub = usb_hub_to_struct_hub(udev->parent);
  return ((unsigned long )(*(hub->ports + ((unsigned long )udev->portnum + 0xffffffffffffffffUL)))->port_owner != (unsigned long )((struct dev_state *)0));
}
}
static void recursively_mark_NOTATTACHED(struct usb_device *udev ) 
{ struct usb_hub *hub ;
  struct usb_hub *tmp ;
  int i ;

  {
  tmp = usb_hub_to_struct_hub(udev);
  hub = tmp;
  i = 0;
  goto ldv_31393;
  ldv_31392: ;
  if ((unsigned long )(*(hub->ports + (unsigned long )i))->child != (unsigned long )((struct usb_device *)0)) {
    recursively_mark_NOTATTACHED((*(hub->ports + (unsigned long )i))->child);
  }
  i ++;
  ldv_31393: ;
  if (udev->maxchild > i) {
    goto ldv_31392;
  }
  if ((unsigned int )udev->state == 8U) {
    udev->active_duration -= (unsigned long )jiffies;
  }
  udev->state = 0;
  return;
}
}
void usb_set_device_state(struct usb_device *udev , enum usb_device_state new_state ) 
{ unsigned long flags ;
  int wakeup ;
  raw_spinlock_t *tmp ;

  {
  wakeup = -1;
  tmp = spinlock_check(& device_state_lock);
  flags = _raw_spin_lock_irqsave(tmp);
  if (! ((unsigned int )udev->state == 0U)) {
    if ((unsigned int )new_state != 0U) {
      if ((unsigned long )udev->parent != (unsigned long )((struct usb_device *)0)) {
        if (! ((unsigned int )udev->state == 8U || (unsigned int )new_state == 8U)) {
          if ((unsigned int )new_state == 7U) {
            wakeup = (int )(udev->actconfig)->desc.bmAttributes & 32;
          } else {
            wakeup = 0;
          }
        }
      }
      if ((unsigned int )udev->state == 8U && (unsigned int )new_state != 8U) {
        udev->active_duration -= (unsigned long )jiffies;
      } else
      if ((unsigned int )new_state == 8U && (unsigned int )udev->state != 8U) {
        udev->active_duration += (unsigned long )jiffies;
      }
      udev->state = new_state;
    } else {
      recursively_mark_NOTATTACHED(udev);
    }
  }
  spin_unlock_irqrestore(& device_state_lock, flags);
  if (wakeup >= 0) {
    device_set_wakeup_capable(& udev->dev, wakeup != 0);
  }
  return;
}
}
static void choose_devnum(struct usb_device *udev ) 
{ int devnum ;
  struct usb_bus *bus ;
  int tmp ;
  long tmp___0 ;
  unsigned long tmp___1 ;
  unsigned long tmp___2 ;

  {
  bus = udev->bus;
  if ((unsigned int )*((unsigned char *)udev + 1588UL) != 0U) {
    devnum = (int )udev->portnum + 1;
    tmp = variable_test_bit(devnum, (unsigned long const volatile   *)(& bus->devmap.devicemap));
    tmp___0 = ldv__builtin_expect(tmp != 0, 0L);
    if (tmp___0 != 0L) {
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared"),
                           "i" (2021), "i" (12UL));
      ldv_31416: ;
      goto ldv_31416;
    }
  } else {
    tmp___1 = find_next_zero_bit((unsigned long const   *)(& bus->devmap.devicemap),
                                 128UL, (unsigned long )bus->devnum_next);
    devnum = (int )tmp___1;
    if (devnum > 127) {
      tmp___2 = find_next_zero_bit((unsigned long const   *)(& bus->devmap.devicemap),
                                   128UL, 1UL);
      devnum = (int )tmp___2;
    }
    if (devnum <= 126) {
      bus->devnum_next = devnum + 1;
    } else {
      bus->devnum_next = 1;
    }
  }
  if (devnum <= 127) {
    set_bit((unsigned int )devnum, (unsigned long volatile   *)(& bus->devmap.devicemap));
    udev->devnum = devnum;
  }
  return;
}
}
static void release_devnum(struct usb_device *udev ) 
{ 

  {
  if (udev->devnum > 0) {
    clear_bit(udev->devnum, (unsigned long volatile   *)(& (udev->bus)->devmap.devicemap));
    udev->devnum = -1;
  }
  return;
}
}
static void update_devnum(struct usb_device *udev , int devnum ) 
{ 

  {
  if ((unsigned int )*((unsigned char *)udev + 1588UL) == 0U) {
    udev->devnum = devnum;
  }
  return;
}
}
static void hub_free_dev(struct usb_device *udev ) 
{ struct usb_hcd *hcd ;
  struct usb_hcd *tmp ;

  {
  tmp = bus_to_hcd(udev->bus);
  hcd = tmp;
  if ((unsigned long )(hcd->driver)->free_dev != (unsigned long )((void (*)(struct usb_hcd * ,
                                                                            struct usb_device * ))0) && (unsigned long )udev->parent != (unsigned long )((struct usb_device *)0)) {
    (*((hcd->driver)->free_dev))(hcd, udev);
  }
  return;
}
}
void usb_disconnect(struct usb_device **pdev ) 
{ struct usb_device *udev ;
  struct usb_hub *hub ;
  struct usb_hub *tmp ;
  int i ;
  struct _ddebug descriptor ;
  long tmp___0 ;
  struct usb_hub *hub___0 ;
  struct usb_hub *tmp___1 ;
  struct usb_port *port_dev ;

  {
  udev = *pdev;
  tmp = usb_hub_to_struct_hub(udev);
  hub = tmp;
  usb_set_device_state(udev, 0);
  _dev_info((struct device  const  *)(& udev->dev), "USB disconnect, device number %d\n",
            udev->devnum);
  device_lock(& udev->dev);
  i = 0;
  goto ldv_31435;
  ldv_31434: ;
  if ((unsigned long )(*(hub->ports + (unsigned long )i))->child != (unsigned long )((struct usb_device *)0)) {
    usb_disconnect(& (*(hub->ports + (unsigned long )i))->child);
  }
  i ++;
  ldv_31435: ;
  if (udev->maxchild > i) {
    goto ldv_31434;
  }
  descriptor.modname = "usbcore";
  descriptor.function = "usb_disconnect";
  descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
  descriptor.format = "unregistering device\n";
  descriptor.lineno = 2104U;
  descriptor.flags = 1U;
  tmp___0 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
  if (tmp___0 != 0L) {
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& udev->dev), "unregistering device\n");
  }
  usb_disable_device(udev, 0);
  usb_hcd_synchronize_unlinks(udev);
  if ((unsigned long )udev->parent != (unsigned long )((struct usb_device *)0)) {
    tmp___1 = usb_hub_to_struct_hub(udev->parent);
    hub___0 = tmp___1;
    port_dev = *(hub___0->ports + ((unsigned long )udev->portnum + 0xffffffffffffffffUL));
    sysfs_remove_link(& udev->dev.kobj, "port");
    sysfs_remove_link(& port_dev->dev.kobj, "device");
    if ((unsigned int )*((unsigned char *)port_dev + 1157UL) == 0U) {
      pm_runtime_put(& port_dev->dev);
    } else {
      port_dev->did_runtime_put = 0U;
    }
  }
  usb_remove_ep_devs(& udev->ep0);
  device_unlock(& udev->dev);
  device_del(& udev->dev);
  release_devnum(udev);
  spin_lock_irq(& device_state_lock);
  *pdev = 0;
  spin_unlock_irq(& device_state_lock);
  hub_free_dev(udev);
  put_device(& udev->dev);
  return;
}
}
static void show_string(struct usb_device *udev , char *id , char *string ) 
{ 

  {
  if ((unsigned long )string == (unsigned long )((char *)0)) {
    return;
  }
  _dev_info((struct device  const  *)(& udev->dev), "%s: %s\n", id, string);
  return;
}
}
static void announce_device(struct usb_device *udev ) 
{ 

  {
  _dev_info((struct device  const  *)(& udev->dev), "New USB device found, idVendor=%04x, idProduct=%04x\n",
            (int )udev->descriptor.idVendor, (int )udev->descriptor.idProduct);
  _dev_info((struct device  const  *)(& udev->dev), "New USB device strings: Mfr=%d, Product=%d, SerialNumber=%d\n",
            (int )udev->descriptor.iManufacturer, (int )udev->descriptor.iProduct,
            (int )udev->descriptor.iSerialNumber);
  show_string(udev, (char *)"Product", udev->product);
  show_string(udev, (char *)"Manufacturer", udev->manufacturer);
  show_string(udev, (char *)"SerialNumber", udev->serial);
  return;
}
}
static int usb_enumerate_device_otg(struct usb_device *udev ) 
{ int err ;

  {
  err = 0;
  return (err);
}
}
static int usb_enumerate_device(struct usb_device *udev ) 
{ int err ;

  {
  if ((unsigned long )udev->config == (unsigned long )((struct usb_host_config *)0)) {
    err = usb_get_configuration(udev);
    if (err < 0) {
      if (err != -19) {
        dev_err((struct device  const  *)(& udev->dev), "can\'t read configurations, error %d\n",
                err);
      }
      return (err);
    }
  }
  if ((unsigned int )*((unsigned char *)udev + 1588UL) != 0U && (unsigned int )*((unsigned char *)udev + 1588UL) == 0U) {
    udev->product = kstrdup("n/a (unauthorized)", 208U);
    udev->manufacturer = kstrdup("n/a (unauthorized)", 208U);
    udev->serial = kstrdup("n/a (unauthorized)", 208U);
  } else {
    udev->product = usb_cache_string(udev, (int )udev->descriptor.iProduct);
    udev->manufacturer = usb_cache_string(udev, (int )udev->descriptor.iManufacturer);
    udev->serial = usb_cache_string(udev, (int )udev->descriptor.iSerialNumber);
  }
  err = usb_enumerate_device_otg(udev);
  if (err < 0) {
    return (err);
  }
  usb_detect_interface_quirks(udev);
  return (0);
}
}
static void set_usb_port_removable(struct usb_device *udev ) 
{ struct usb_device *hdev ;
  struct usb_hub *hub ;
  u8 port ;
  u16 wHubCharacteristics ;
  bool removable ;
  int tmp ;

  {
  hdev = udev->parent;
  port = udev->portnum;
  removable = 1;
  if ((unsigned long )hdev == (unsigned long )((struct usb_device *)0)) {
    return;
  }
  hub = usb_hub_to_struct_hub(udev->parent);
  wHubCharacteristics = (hub->descriptor)->wHubCharacteristics;
  if (((int )wHubCharacteristics & 4) == 0) {
    return;
  }
  tmp = hub_is_superspeed(hdev);
  if (tmp != 0) {
    if (((int )(hub->descriptor)->u.ss.DeviceRemovable >> (int )port) & 1) {
      removable = 0;
    }
  } else
  if (((int )(hub->descriptor)->u.hs.DeviceRemovable[(int )((unsigned int )port / 8U)] >> ((int )port & 7)) & 1) {
    removable = 0;
  }
  if ((int )removable) {
    udev->removable = 1;
  } else {
    udev->removable = 2;
  }
  return;
}
}
int usb_new_device(struct usb_device *udev ) 
{ int err ;
  struct _ddebug descriptor ;
  long tmp ;
  size_t tmp___0 ;
  size_t tmp___1 ;
  size_t tmp___2 ;
  struct usb_hub *hub ;
  struct usb_hub *tmp___3 ;
  struct usb_port *port_dev ;

  {
  if ((unsigned long )udev->parent != (unsigned long )((struct usb_device *)0)) {
    device_init_wakeup(& udev->dev, 0);
  }
  pm_runtime_set_active(& udev->dev);
  pm_runtime_get_noresume(& udev->dev);
  pm_runtime_use_autosuspend(& udev->dev);
  pm_runtime_enable(& udev->dev);
  usb_disable_autosuspend(udev);
  err = usb_enumerate_device(udev);
  if (err < 0) {
    goto fail;
  }
  descriptor.modname = "usbcore";
  descriptor.function = "usb_new_device";
  descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
  descriptor.format = "udev %d, busnum %d, minor = %d\n";
  descriptor.lineno = 2378U;
  descriptor.flags = 1U;
  tmp = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
  if (tmp != 0L) {
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& udev->dev), "udev %d, busnum %d, minor = %d\n",
                      udev->devnum, (udev->bus)->busnum, ((udev->bus)->busnum + -1) * 128 + (udev->devnum + -1));
  }
  udev->dev.devt = (dev_t )((((udev->bus)->busnum + -1) * 128 + (udev->devnum + -1)) | 198180864);
  announce_device(udev);
  if ((unsigned long )udev->serial != (unsigned long )((char *)0)) {
    tmp___0 = strlen((char const   *)udev->serial);
    add_device_randomness((void const   *)udev->serial, (unsigned int )tmp___0);
  }
  if ((unsigned long )udev->product != (unsigned long )((char *)0)) {
    tmp___1 = strlen((char const   *)udev->product);
    add_device_randomness((void const   *)udev->product, (unsigned int )tmp___1);
  }
  if ((unsigned long )udev->manufacturer != (unsigned long )((char *)0)) {
    tmp___2 = strlen((char const   *)udev->manufacturer);
    add_device_randomness((void const   *)udev->manufacturer, (unsigned int )tmp___2);
  }
  device_enable_async_suspend(& udev->dev);
  if ((unsigned long )udev->parent != (unsigned long )((struct usb_device *)0)) {
    set_usb_port_removable(udev);
  }
  err = device_add(& udev->dev);
  if (err != 0) {
    dev_err((struct device  const  *)(& udev->dev), "can\'t device_add, error %d\n",
            err);
    goto fail;
  }
  if ((unsigned long )udev->parent != (unsigned long )((struct usb_device *)0)) {
    tmp___3 = usb_hub_to_struct_hub(udev->parent);
    hub = tmp___3;
    port_dev = *(hub->ports + ((unsigned long )udev->portnum + 0xffffffffffffffffUL));
    err = sysfs_create_link(& udev->dev.kobj, & port_dev->dev.kobj, "port");
    if (err != 0) {
      goto fail;
    }
    err = sysfs_create_link(& port_dev->dev.kobj, & udev->dev.kobj, "device");
    if (err != 0) {
      sysfs_remove_link(& udev->dev.kobj, "port");
      goto fail;
    }
    pm_runtime_get_sync(& port_dev->dev);
  }
  usb_create_ep_devs(& udev->dev, & udev->ep0, udev);
  usb_mark_last_busy(udev);
  pm_runtime_put_sync_autosuspend(& udev->dev);
  return (err);
  fail: 
  usb_set_device_state(udev, 0);
  pm_runtime_disable(& udev->dev);
  pm_runtime_set_suspended(& udev->dev);
  return (err);
}
}
int usb_deauthorize_device(struct usb_device *usb_dev ) 
{ 

  {
  device_lock(& usb_dev->dev);
  if ((unsigned int )*((unsigned char *)usb_dev + 1588UL) == 0U) {
    goto out_unauthorized;
  }
  usb_dev->authorized = 0U;
  usb_set_configuration(usb_dev, -1);
  kfree((void const   *)usb_dev->product);
  usb_dev->product = kstrdup("n/a (unauthorized)", 208U);
  kfree((void const   *)usb_dev->manufacturer);
  usb_dev->manufacturer = kstrdup("n/a (unauthorized)", 208U);
  kfree((void const   *)usb_dev->serial);
  usb_dev->serial = kstrdup("n/a (unauthorized)", 208U);
  usb_destroy_configuration(usb_dev);
  usb_dev->descriptor.bNumConfigurations = 0U;
  out_unauthorized: 
  device_unlock(& usb_dev->dev);
  return (0);
}
}
int usb_authorize_device(struct usb_device *usb_dev ) 
{ int result ;
  int c ;

  {
  result = 0;
  device_lock(& usb_dev->dev);
  if ((unsigned int )*((unsigned char *)usb_dev + 1588UL) != 0U) {
    goto out_authorized;
  }
  result = usb_autoresume_device(usb_dev);
  if (result < 0) {
    dev_err((struct device  const  *)(& usb_dev->dev), "can\'t autoresume for authorization: %d\n",
            result);
    goto error_autoresume;
  }
  result = usb_get_device_descriptor(usb_dev, 18U);
  if (result < 0) {
    dev_err((struct device  const  *)(& usb_dev->dev), "can\'t re-read device descriptor for authorization: %d\n",
            result);
    goto error_device_descriptor;
  }
  kfree((void const   *)usb_dev->product);
  usb_dev->product = 0;
  kfree((void const   *)usb_dev->manufacturer);
  usb_dev->manufacturer = 0;
  kfree((void const   *)usb_dev->serial);
  usb_dev->serial = 0;
  usb_dev->authorized = 1U;
  result = usb_enumerate_device(usb_dev);
  if (result < 0) {
    goto error_enumerate;
  }
  c = usb_choose_configuration(usb_dev);
  if (c >= 0) {
    result = usb_set_configuration(usb_dev, c);
    if (result != 0) {
      dev_err((struct device  const  *)(& usb_dev->dev), "can\'t set config #%d, error %d\n",
              c, result);
    }
  }
  _dev_info((struct device  const  *)(& usb_dev->dev), "authorized to connect\n");
  error_enumerate: ;
  error_device_descriptor: 
  usb_autosuspend_device(usb_dev);
  error_autoresume: ;
  out_authorized: 
  device_unlock(& usb_dev->dev);
  return (result);
}
}
static unsigned int hub_is_wusb(struct usb_hub *hub ) 
{ struct usb_hcd *hcd ;
  struct usb_bus  const  *__mptr ;

  {
  if ((unsigned long )(hub->hdev)->parent != (unsigned long )((struct usb_device *)0)) {
    return (0U);
  }
  __mptr = (struct usb_bus  const  *)(hub->hdev)->bus;
  hcd = (struct usb_hcd *)__mptr;
  return ((unsigned int )hcd->wireless);
}
}
static int hub_port_reset(struct usb_hub *hub , int port1 , struct usb_device *udev ,
                          unsigned int delay , bool warm ) ;
static bool hub_port_warm_reset_required(struct usb_hub *hub , u16 portstatus ) 
{ int tmp ;

  {
  tmp = hub_is_superspeed(hub->hdev);
  return ((bool )(tmp != 0 && (((int )portstatus & 480) == 192 || ((int )portstatus & 480) == 320)));
}
}
static int hub_port_wait_reset(struct usb_hub *hub , int port1 , struct usb_device *udev ,
                               unsigned int delay , bool warm ) 
{ int delay_time ;
  int ret ;
  u16 portstatus ;
  u16 portchange ;
  struct _ddebug descriptor ;
  long tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;
  char *tmp___4 ;

  {
  delay_time = 0;
  goto ldv_31518;
  ldv_31517: 
  msleep(delay);
  ret = hub_port_status(hub, port1, & portstatus, & portchange);
  if (ret < 0) {
    return (ret);
  }
  if (((int )portstatus & 16) == 0) {
    goto ldv_31514;
  }
  if (delay_time > 19) {
    delay = 200U;
  }
  descriptor.modname = "usbcore";
  descriptor.function = "hub_port_wait_reset";
  descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
  descriptor.format = "port %d not %sreset yet, waiting %dms\n";
  descriptor.lineno = 2605U;
  descriptor.flags = 1U;
  tmp = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
  if (tmp != 0L) {
    if ((int )warm) {
      tmp___4 = (char *)"warm ";
    } else {
      tmp___4 = (char *)"";
    }
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)hub->intfdev, "port %d not %sreset yet, waiting %dms\n",
                      port1, tmp___4, delay);
  }
  delay_time = (int )((unsigned int )delay_time + delay);
  ldv_31518: ;
  if (delay_time <= 799) {
    goto ldv_31517;
  }
  ldv_31514: ;
  if (((int )portstatus & 16) != 0) {
    return (-16);
  }
  tmp___0 = hub_port_warm_reset_required(hub, (int )portstatus);
  if ((int )tmp___0) {
    return (-107);
  }
  if (((int )portstatus & 1) == 0) {
    return (-107);
  }
  tmp___1 = hub_is_superspeed(hub->hdev);
  if (tmp___1 == 0 && (int )portchange & 1) {
    return (-107);
  }
  if (((int )portstatus & 2) == 0) {
    return (-16);
  }
  if ((unsigned long )udev == (unsigned long )((struct usb_device *)0)) {
    return (0);
  }
  tmp___3 = hub_is_wusb(hub);
  if (tmp___3 != 0U) {
    udev->speed = 4;
  } else {
    tmp___2 = hub_is_superspeed(hub->hdev);
    if (tmp___2 != 0) {
      udev->speed = 5;
    } else
    if (((int )portstatus & 1024) != 0) {
      udev->speed = 3;
    } else
    if (((int )portstatus & 512) != 0) {
      udev->speed = 1;
    } else {
      udev->speed = 2;
    }
  }
  return (0);
}
}
static void hub_port_finish_reset(struct usb_hub *hub , int port1 , struct usb_device *udev ,
                                  int *status ) 
{ struct usb_hcd *hcd ;
  struct usb_hcd *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  switch (*status) {
  case 0: 
  msleep(50U);
  if ((unsigned long )udev != (unsigned long )((struct usb_device *)0)) {
    tmp = bus_to_hcd(udev->bus);
    hcd = tmp;
    update_devnum(udev, 0);
    if ((unsigned long )(hcd->driver)->reset_device != (unsigned long )((int (*)(struct usb_hcd * ,
                                                                                 struct usb_device * ))0)) {
      (*((hcd->driver)->reset_device))(hcd, udev);
    }
  }
  case -107: ;
  case -19: 
  usb_clear_port_feature(hub->hdev, port1, 20);
  tmp___0 = hub_is_superspeed(hub->hdev);
  if (tmp___0 != 0) {
    usb_clear_port_feature(hub->hdev, port1, 29);
    usb_clear_port_feature(hub->hdev, port1, 25);
    usb_clear_port_feature(hub->hdev, port1, 16);
  }
  if ((unsigned long )udev != (unsigned long )((struct usb_device *)0)) {
    if (*status != 0) {
      tmp___1 = 0;
    } else {
      tmp___1 = 5;
    }
    usb_set_device_state(udev, tmp___1);
  }
  goto ldv_31529;
  }
  ldv_31529: ;
  return;
}
}
static int hub_port_reset(struct usb_hub *hub , int port1 , struct usb_device *udev ,
                          unsigned int delay , bool warm ) 
{ int i ;
  int status ;
  u16 portchange ;
  u16 portstatus ;
  bool tmp ;
  int tmp___0 ;
  struct _ddebug descriptor ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  bool tmp___4 ;
  int tmp___5 ;
  struct _ddebug descriptor___0 ;
  long tmp___6 ;
  struct _ddebug descriptor___1 ;
  long tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  char *tmp___10 ;
  char *tmp___11 ;

  {
  tmp___0 = hub_is_superspeed(hub->hdev);
  if (tmp___0 == 0) {
    if ((int )warm) {
      dev_err((struct device  const  *)hub->intfdev, "only USB3 hub support warm reset\n");
      return (-22);
    }
    down_read(& ehci_cf_port_reset_rwsem);
  } else
  if (! warm) {
    status = hub_port_status(hub, port1, & portstatus, & portchange);
    if (status < 0) {
      goto done;
    }
    tmp = hub_port_warm_reset_required(hub, (int )portstatus);
    if ((int )tmp) {
      warm = 1;
    }
  }
  i = 0;
  goto ldv_31547;
  ldv_31546: 
  if ((int )warm) {
    tmp___9 = 28;
  } else {
    tmp___9 = 4;
  }
  status = set_port_feature(hub->hdev, port1, tmp___9);
  if (! (status == -19)) {
    if (status != 0) {
      if ((int )warm) {
        tmp___10 = (char *)"warm ";
      } else {
        tmp___10 = (char *)"";
      }
      dev_err((struct device  const  *)hub->intfdev, "cannot %sreset port %d (err = %d)\n",
              tmp___10, port1, status);
    } else {
      status = hub_port_wait_reset(hub, port1, udev, delay, (int )warm);
      if ((status != 0 && status != -107) && status != -19) {
        descriptor.modname = "usbcore";
        descriptor.function = "hub_port_reset";
        descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
        descriptor.format = "port_wait_reset: err = %d\n";
        descriptor.lineno = 2731U;
        descriptor.flags = 1U;
        tmp___1 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
        if (tmp___1 != 0L) {
          __dynamic_dev_dbg(& descriptor, (struct device  const  *)hub->intfdev, "port_wait_reset: err = %d\n",
                            status);
        }
      }
    }
  }
  if ((status == 0 || status == -107) || status == -19) {
    hub_port_finish_reset(hub, port1, udev, & status);
    tmp___2 = hub_is_superspeed(hub->hdev);
    if (tmp___2 == 0) {
      goto done;
    }
    tmp___3 = hub_port_status(hub, port1, & portstatus, & portchange);
    if (tmp___3 < 0) {
      goto done;
    }
    tmp___4 = hub_port_warm_reset_required(hub, (int )portstatus);
    if (tmp___4) {
      tmp___5 = 0;
    } else {
      tmp___5 = 1;
    }
    if (tmp___5) {
      goto done;
    }
    if (! warm) {
      descriptor___0.modname = "usbcore";
      descriptor___0.function = "hub_port_reset";
      descriptor___0.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
      descriptor___0.format = "hot reset failed, warm reset port %d\n";
      descriptor___0.lineno = 2758U;
      descriptor___0.flags = 1U;
      tmp___6 = ldv__builtin_expect((long )descriptor___0.flags & 1L, 0L);
      if (tmp___6 != 0L) {
        __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)hub->intfdev,
                          "hot reset failed, warm reset port %d\n", port1);
      }
      warm = 1;
    }
  }
  descriptor___1.modname = "usbcore";
  descriptor___1.function = "hub_port_reset";
  descriptor___1.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
  descriptor___1.format = "port %d not enabled, trying %sreset again...\n";
  descriptor___1.lineno = 2765U;
  descriptor___1.flags = 1U;
  tmp___7 = ldv__builtin_expect((long )descriptor___1.flags & 1L, 0L);
  if (tmp___7 != 0L) {
    if ((int )warm) {
      tmp___11 = (char *)"warm ";
    } else {
      tmp___11 = (char *)"";
    }
    __dynamic_dev_dbg(& descriptor___1, (struct device  const  *)hub->intfdev, "port %d not enabled, trying %sreset again...\n",
                      port1, tmp___11);
  }
  delay = 200U;
  i ++;
  ldv_31547: ;
  if (i <= 4) {
    goto ldv_31546;
  }
  dev_err((struct device  const  *)hub->intfdev, "Cannot enable port %i.  Maybe the USB cable is bad?\n",
          port1);
  done: 
  tmp___8 = hub_is_superspeed(hub->hdev);
  if (tmp___8 == 0) {
    up_read(& ehci_cf_port_reset_rwsem);
  }
  return (status);
}
}
static int port_is_power_on(struct usb_hub *hub , unsigned int portstatus ) 
{ int ret ;
  int tmp ;

  {
  ret = 0;
  tmp = hub_is_superspeed(hub->hdev);
  if (tmp != 0) {
    if ((portstatus & 512U) != 0U) {
      ret = 1;
    }
  } else
  if ((portstatus & 256U) != 0U) {
    ret = 1;
  }
  return (ret);
}
}
static int port_is_suspended(struct usb_hub *hub , unsigned int portstatus ) 
{ int ret ;
  int tmp ;

  {
  ret = 0;
  tmp = hub_is_superspeed(hub->hdev);
  if (tmp != 0) {
    if ((portstatus & 480U) == 96U) {
      ret = 1;
    }
  } else
  if ((portstatus & 4U) != 0U) {
    ret = 1;
  }
  return (ret);
}
}
static int check_port_resume_type(struct usb_device *udev , struct usb_hub *hub ,
                                  int port1 , int status , unsigned int portchange ,
                                  unsigned int portstatus ) 
{ int tmp ;
  int tmp___0 ;
  struct _ddebug descriptor ;
  long tmp___1 ;

  {
  if (status != 0) {
    goto _L;
  } else {
    tmp = port_is_suspended(hub, portstatus);
    if (tmp != 0) {
      goto _L;
    } else {
      tmp___0 = port_is_power_on(hub, portstatus);
      if (tmp___0 == 0) {
        goto _L;
      } else
      if ((portstatus & 1U) == 0U) {
        _L: 
        if (status >= 0) {
          status = -19;
        }
      } else
      if ((portstatus & 2U) == 0U && (unsigned int )*((unsigned char *)udev + 1672UL) == 0U) {
        if ((unsigned int )*((unsigned char *)udev + 1588UL) != 0U) {
          udev->reset_resume = 1U;
        } else {
          status = -19;
        }
      }
    }
  }
  if (status != 0) {
    descriptor.modname = "usbcore";
    descriptor.function = "check_port_resume_type";
    descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
    descriptor.format = "port %d status %04x.%04x after resume, %d\n";
    descriptor.lineno = 2843U;
    descriptor.flags = 1U;
    tmp___1 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
    if (tmp___1 != 0L) {
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)hub->intfdev, "port %d status %04x.%04x after resume, %d\n",
                        port1, portchange, portstatus, status);
    }
  } else
  if ((unsigned int )*((unsigned char *)udev + 1672UL) != 0U) {
    if ((int )portchange & 1) {
      usb_clear_port_feature(hub->hdev, port1, 16);
    }
    if ((portchange & 2U) != 0U) {
      usb_clear_port_feature(hub->hdev, port1, 17);
    }
  }
  return (status);
}
}
int usb_disable_ltm(struct usb_device *udev ) 
{ struct usb_hcd *hcd ;
  struct usb_hcd *tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  bool tmp___2 ;
  int tmp___3 ;
  unsigned int tmp___4 ;
  int tmp___5 ;

  {
  tmp = bus_to_hcd(udev->bus);
  hcd = tmp;
  tmp___0 = usb_device_supports_ltm(hcd->self.root_hub);
  if (tmp___0) {
    tmp___1 = 0;
  } else {
    tmp___1 = 1;
  }
  if (tmp___1) {
    return (0);
  } else {
    tmp___2 = usb_device_supports_ltm(udev);
    if (tmp___2) {
      tmp___3 = 0;
    } else {
      tmp___3 = 1;
    }
    if (tmp___3) {
      return (0);
    }
  }
  if ((unsigned long )udev->actconfig == (unsigned long )((struct usb_host_config *)0)) {
    return (0);
  }
  tmp___4 = __create_pipe(udev, 0U);
  tmp___5 = usb_control_msg(udev, tmp___4 | 2147483648U, 1, 0, 50, 0, 0, 0, 5000);
  return (tmp___5);
}
}
void usb_enable_ltm(struct usb_device *udev ) 
{ struct usb_hcd *hcd ;
  struct usb_hcd *tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  bool tmp___2 ;
  int tmp___3 ;
  unsigned int tmp___4 ;

  {
  tmp = bus_to_hcd(udev->bus);
  hcd = tmp;
  tmp___0 = usb_device_supports_ltm(hcd->self.root_hub);
  if (tmp___0) {
    tmp___1 = 0;
  } else {
    tmp___1 = 1;
  }
  if (tmp___1) {
    return;
  } else {
    tmp___2 = usb_device_supports_ltm(udev);
    if (tmp___2) {
      tmp___3 = 0;
    } else {
      tmp___3 = 1;
    }
    if (tmp___3) {
      return;
    }
  }
  if ((unsigned long )udev->actconfig == (unsigned long )((struct usb_host_config *)0)) {
    return;
  }
  tmp___4 = __create_pipe(udev, 0U);
  usb_control_msg(udev, tmp___4 | 2147483648U, 3, 0, 50, 0, 0, 0, 5000);
  return;
}
}
static int usb_disable_function_remotewakeup(struct usb_device *udev ) 
{ unsigned int tmp ;
  int tmp___0 ;

  {
  tmp = __create_pipe(udev, 0U);
  tmp___0 = usb_control_msg(udev, tmp | 2147483648U, 1, 1, 0, 0, 0, 0, 5000);
  return (tmp___0);
}
}
int usb_port_suspend(struct usb_device *udev , pm_message_t msg ) 
{ struct usb_hub *hub ;
  struct usb_hub *tmp ;
  struct usb_port *port_dev ;
  enum pm_qos_flags_status pm_qos_stat ;
  int port1 ;
  int status ;
  bool really_suspend ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;
  struct _ddebug descriptor ;
  long tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  struct _ddebug descriptor___0 ;
  long tmp___7 ;
  unsigned int tmp___8 ;
  int tmp___9 ;
  struct _ddebug descriptor___1 ;
  long tmp___10 ;
  char *tmp___11 ;

  {
  tmp = usb_hub_to_struct_hub(udev->parent);
  hub = tmp;
  port_dev = *(hub->ports + ((unsigned long )udev->portnum + 0xffffffffffffffffUL));
  port1 = (int )udev->portnum;
  really_suspend = 1;
  if ((unsigned int )*((unsigned char *)udev + 1672UL) != 0U) {
    tmp___2 = hub_is_superspeed(hub->hdev);
    if (tmp___2 == 0) {
      tmp___0 = __create_pipe(udev, 0U);
      status = usb_control_msg(udev, tmp___0 | 2147483648U, 3, 0, 1, 0, 0, 0, 5000);
    } else {
      tmp___1 = __create_pipe(udev, 0U);
      status = usb_control_msg(udev, tmp___1 | 2147483648U, 3, 1, 0, 768, 0, 0, 5000);
    }
    if (status != 0) {
      descriptor.modname = "usbcore";
      descriptor.function = "usb_port_suspend";
      descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
      descriptor.format = "won\'t remote wakeup, status %d\n";
      descriptor.lineno = 3008U;
      descriptor.flags = 1U;
      tmp___3 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
      if (tmp___3 != 0L) {
        __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& udev->dev), "won\'t remote wakeup, status %d\n",
                          status);
      }
      if ((msg.event & 1024) != 0) {
        return (status);
      }
    }
  }
  if ((unsigned int )*((unsigned char *)udev + 1589UL) != 0U) {
    usb_set_usb2_hardware_lpm(udev, 0);
  }
  tmp___4 = usb_disable_ltm(udev);
  if (tmp___4 != 0) {
    dev_err((struct device  const  *)(& udev->dev), "%s Failed to disable LTM before suspend\n.",
            "usb_port_suspend");
    return (-12);
  }
  tmp___5 = usb_unlocked_disable_lpm(udev);
  if (tmp___5 != 0) {
    dev_err((struct device  const  *)(& udev->dev), "%s Failed to disable LPM before suspend\n.",
            "usb_port_suspend");
    return (-12);
  }
  tmp___6 = hub_is_superspeed(hub->hdev);
  if (tmp___6 != 0) {
    status = hub_set_port_link_state(hub, port1, 96U);
  } else
  if ((msg.event & 1024) != 0) {
    status = set_port_feature(hub->hdev, port1, 2);
  } else {
    really_suspend = 0;
    status = 0;
  }
  if (status != 0) {
    descriptor___0.modname = "usbcore";
    descriptor___0.function = "usb_port_suspend";
    descriptor___0.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
    descriptor___0.format = "can\'t suspend port %d, status %d\n";
    descriptor___0.lineno = 3048U;
    descriptor___0.flags = 1U;
    tmp___7 = ldv__builtin_expect((long )descriptor___0.flags & 1L, 0L);
    if (tmp___7 != 0L) {
      __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)hub->intfdev, "can\'t suspend port %d, status %d\n",
                        port1, status);
    }
    if ((unsigned int )*((unsigned char *)udev + 1672UL) != 0U) {
      tmp___9 = hub_is_superspeed(hub->hdev);
      if (tmp___9 == 0) {
        tmp___8 = __create_pipe(udev, 0U);
        usb_control_msg(udev, tmp___8 | 2147483648U, 1, 0, 1, 0, 0, 0, 5000);
      } else {
        usb_disable_function_remotewakeup(udev);
      }
    }
    if ((unsigned int )*((unsigned char *)udev + 1588UL) != 0U) {
      usb_set_usb2_hardware_lpm(udev, 1);
    }
    usb_enable_ltm(udev);
    usb_unlocked_enable_lpm(udev);
    if ((msg.event & 1024) == 0) {
      status = 0;
    }
  } else {
    descriptor___1.modname = "usbcore";
    descriptor___1.function = "usb_port_suspend";
    descriptor___1.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
    descriptor___1.format = "usb %ssuspend, wakeup %d\n";
    descriptor___1.lineno = 3079U;
    descriptor___1.flags = 1U;
    tmp___10 = ldv__builtin_expect((long )descriptor___1.flags & 1L, 0L);
    if (tmp___10 != 0L) {
      if ((msg.event & 1024) != 0) {
        tmp___11 = (char *)"auto-";
      } else {
        tmp___11 = (char *)"";
      }
      __dynamic_dev_dbg(& descriptor___1, (struct device  const  *)(& udev->dev),
                        "usb %ssuspend, wakeup %d\n", tmp___11, (int )udev->do_remote_wakeup);
    }
    usb_set_device_state(udev, 8);
    if ((int )really_suspend) {
      udev->port_is_suspended = 1U;
      msleep(10U);
    }
  }
  pm_qos_stat = dev_pm_qos_flags(& port_dev->dev, 1);
  if ((((unsigned int )*((unsigned char *)udev + 1672UL) == 0U && (int )pm_qos_stat != 2) && (unsigned int )*((unsigned char *)udev + 1588UL) != 0U) && status == 0) {
    pm_runtime_put_sync(& port_dev->dev);
    port_dev->did_runtime_put = 1U;
  }
  usb_mark_last_busy(hub->hdev);
  return (status);
}
}
static int finish_port_resume(struct usb_device *udev ) 
{ int status ;
  u16 devstatus ;
  struct _ddebug descriptor ;
  long tmp ;
  struct _ddebug descriptor___0 ;
  long tmp___0 ;
  struct _ddebug descriptor___1 ;
  long tmp___1 ;
  unsigned int tmp___2 ;
  int tmp___3 ;
  struct _ddebug descriptor___2 ;
  long tmp___4 ;
  char *tmp___5 ;
  int tmp___6 ;

  {
  status = 0;
  devstatus = 0U;
  descriptor.modname = "usbcore";
  descriptor.function = "finish_port_resume";
  descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
  descriptor.format = "%s\n";
  descriptor.lineno = 3123U;
  descriptor.flags = 1U;
  tmp = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
  if (tmp != 0L) {
    if ((unsigned int )*((unsigned char *)udev + 1672UL) != 0U) {
      tmp___5 = (char *)"finish reset-resume";
    } else {
      tmp___5 = (char *)"finish resume";
    }
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& udev->dev), "%s\n",
                      tmp___5);
  }
  if ((unsigned long )udev->actconfig != (unsigned long )((struct usb_host_config *)0)) {
    tmp___6 = 7;
  } else {
    tmp___6 = 6;
  }
  usb_set_device_state(udev, tmp___6);
  if ((unsigned int )*((unsigned char *)udev + 1672UL) != 0U) {
    retry_reset_resume: 
    status = usb_reset_and_verify_device(udev);
  }
  if (status == 0) {
    devstatus = 0U;
    status = usb_get_status(udev, 0, 0, (void *)(& devstatus));
    if (status >= 0) {
      if (status > 0) {
        status = 0;
      } else {
        status = -19;
      }
    }
    if ((status != 0 && (unsigned int )*((unsigned char *)udev + 1672UL) == 0U) && (unsigned int )*((unsigned char *)udev + 1588UL) != 0U) {
      descriptor___0.modname = "usbcore";
      descriptor___0.function = "finish_port_resume";
      descriptor___0.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
      descriptor___0.format = "retry with reset-resume\n";
      descriptor___0.lineno = 3155U;
      descriptor___0.flags = 1U;
      tmp___0 = ldv__builtin_expect((long )descriptor___0.flags & 1L, 0L);
      if (tmp___0 != 0L) {
        __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)(& udev->dev),
                          "retry with reset-resume\n");
      }
      udev->reset_resume = 1U;
      goto retry_reset_resume;
    }
  }
  if (status != 0) {
    descriptor___1.modname = "usbcore";
    descriptor___1.function = "finish_port_resume";
    descriptor___1.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
    descriptor___1.format = "gone after usb resume? status %d\n";
    descriptor___1.lineno = 3163U;
    descriptor___1.flags = 1U;
    tmp___1 = ldv__builtin_expect((long )descriptor___1.flags & 1L, 0L);
    if (tmp___1 != 0L) {
      __dynamic_dev_dbg(& descriptor___1, (struct device  const  *)(& udev->dev),
                        "gone after usb resume? status %d\n", status);
    }
  } else
  if ((unsigned long )udev->actconfig != (unsigned long )((struct usb_host_config *)0) && (unsigned int )*((unsigned char *)udev + 1672UL) == 0U) {
    tmp___3 = hub_is_superspeed(udev->parent);
    if (tmp___3 == 0) {
      if (((int )devstatus & 2) != 0) {
        tmp___2 = __create_pipe(udev, 0U);
        status = usb_control_msg(udev, tmp___2 | 2147483648U, 1, 0, 1, 0, 0, 0, 5000);
      }
    } else {
      status = usb_get_status(udev, 1, 0, (void *)(& devstatus));
      if (status == 0 && ((int )devstatus & 3) != 0) {
        status = usb_disable_function_remotewakeup(udev);
      }
    }
    if (status != 0) {
      descriptor___2.modname = "usbcore";
      descriptor___2.function = "finish_port_resume";
      descriptor___2.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
      descriptor___2.format = "disable remote wakeup, status %d\n";
      descriptor___2.lineno = 3194U;
      descriptor___2.flags = 1U;
      tmp___4 = ldv__builtin_expect((long )descriptor___2.flags & 1L, 0L);
      if (tmp___4 != 0L) {
        __dynamic_dev_dbg(& descriptor___2, (struct device  const  *)(& udev->dev),
                          "disable remote wakeup, status %d\n", status);
      }
    }
    status = 0;
  }
  return (status);
}
}
int usb_port_resume(struct usb_device *udev , pm_message_t msg ) 
{ struct usb_hub *hub ;
  struct usb_hub *tmp ;
  struct usb_port *port_dev ;
  int port1 ;
  int status ;
  u16 portchange ;
  u16 portstatus ;
  struct _ddebug descriptor ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct _ddebug descriptor___0 ;
  long tmp___3 ;
  struct _ddebug descriptor___1 ;
  long tmp___4 ;
  int tmp___5 ;
  struct _ddebug descriptor___2 ;
  long tmp___6 ;
  char *tmp___7 ;

  {
  tmp = usb_hub_to_struct_hub(udev->parent);
  hub = tmp;
  port_dev = *(hub->ports + ((unsigned long )udev->portnum + 0xffffffffffffffffUL));
  port1 = (int )udev->portnum;
  if ((unsigned int )*((unsigned char *)port_dev + 1157UL) != 0U) {
    status = pm_runtime_get_sync(& port_dev->dev);
    port_dev->did_runtime_put = 0U;
    if (status < 0) {
      descriptor.modname = "usbcore";
      descriptor.function = "usb_port_resume";
      descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
      descriptor.format = "can\'t resume usb port, status %d\n";
      descriptor.lineno = 3247U;
      descriptor.flags = 1U;
      tmp___0 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
      if (tmp___0 != 0L) {
        __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& udev->dev), "can\'t resume usb port, status %d\n",
                          status);
      }
      return (status);
    }
  }
  status = hub_port_status(hub, port1, & portstatus, & portchange);
  if (status == 0) {
    tmp___1 = port_is_suspended(hub, (unsigned int )portstatus);
    if (tmp___1 == 0) {
      goto SuspendCleared;
    }
  }
  set_bit((unsigned int )port1, (unsigned long volatile   *)(& hub->busy_bits));
  tmp___2 = hub_is_superspeed(hub->hdev);
  if (tmp___2 != 0) {
    status = hub_set_port_link_state(hub, port1, 0U);
  } else {
    status = usb_clear_port_feature(hub->hdev, port1, 2);
  }
  if (status != 0) {
    descriptor___0.modname = "usbcore";
    descriptor___0.function = "usb_port_resume";
    descriptor___0.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
    descriptor___0.format = "can\'t resume port %d, status %d\n";
    descriptor___0.lineno = 3269U;
    descriptor___0.flags = 1U;
    tmp___3 = ldv__builtin_expect((long )descriptor___0.flags & 1L, 0L);
    if (tmp___3 != 0L) {
      __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)hub->intfdev, "can\'t resume port %d, status %d\n",
                        port1, status);
    }
  } else {
    descriptor___1.modname = "usbcore";
    descriptor___1.function = "usb_port_resume";
    descriptor___1.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
    descriptor___1.format = "usb %sresume\n";
    descriptor___1.lineno = 3273U;
    descriptor___1.flags = 1U;
    tmp___4 = ldv__builtin_expect((long )descriptor___1.flags & 1L, 0L);
    if (tmp___4 != 0L) {
      if ((msg.event & 1024) != 0) {
        tmp___7 = (char *)"auto-";
      } else {
        tmp___7 = (char *)"";
      }
      __dynamic_dev_dbg(& descriptor___1, (struct device  const  *)(& udev->dev),
                        "usb %sresume\n", tmp___7);
    }
    msleep(25U);
    status = hub_port_status(hub, port1, & portstatus, & portchange);
    msleep(10U);
  }
  SuspendCleared: ;
  if (status == 0) {
    udev->port_is_suspended = 0U;
    tmp___5 = hub_is_superspeed(hub->hdev);
    if (tmp___5 != 0) {
      if (((int )portchange & 64) != 0) {
        usb_clear_port_feature(hub->hdev, port1, 25);
      }
    } else
    if (((int )portchange & 4) != 0) {
      usb_clear_port_feature(hub->hdev, port1, 18);
    }
  }
  clear_bit(port1, (unsigned long volatile   *)(& hub->busy_bits));
  status = check_port_resume_type(udev, hub, port1, status, (unsigned int )portchange,
                                  (unsigned int )portstatus);
  if (status == 0) {
    status = finish_port_resume(udev);
  }
  if (status < 0) {
    descriptor___2.modname = "usbcore";
    descriptor___2.function = "usb_port_resume";
    descriptor___2.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
    descriptor___2.format = "can\'t resume, status %d\n";
    descriptor___2.lineno = 3307U;
    descriptor___2.flags = 1U;
    tmp___6 = ldv__builtin_expect((long )descriptor___2.flags & 1L, 0L);
    if (tmp___6 != 0L) {
      __dynamic_dev_dbg(& descriptor___2, (struct device  const  *)(& udev->dev),
                        "can\'t resume, status %d\n", status);
    }
    hub_port_logical_disconnect(hub, port1);
  } else {
    if ((unsigned int )*((unsigned char *)udev + 1588UL) != 0U) {
      usb_set_usb2_hardware_lpm(udev, 1);
    }
    usb_enable_ltm(udev);
    usb_unlocked_enable_lpm(udev);
  }
  return (status);
}
}
int usb_remote_wakeup(struct usb_device *udev ) 
{ int status ;
  struct _ddebug descriptor ;
  long tmp ;

  {
  status = 0;
  if ((unsigned int )udev->state == 8U) {
    descriptor.modname = "usbcore";
    descriptor.function = "usb_remote_wakeup";
    descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
    descriptor.format = "usb %sresume\n";
    descriptor.lineno = 3332U;
    descriptor.flags = 1U;
    tmp = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
    if (tmp != 0L) {
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& udev->dev), "usb %sresume\n",
                        (char *)"wakeup-");
    }
    status = usb_autoresume_device(udev);
    if (status == 0) {
      usb_autosuspend_device(udev);
    }
  }
  return (status);
}
}
static int check_ports_changed(struct usb_hub *hub ) 
{ int port1 ;
  u16 portstatus ;
  u16 portchange ;
  int status ;

  {
  port1 = 1;
  goto ldv_31647;
  ldv_31646: 
  status = hub_port_status(hub, port1, & portstatus, & portchange);
  if (status == 0 && (unsigned int )portchange != 0U) {
    return (1);
  }
  port1 ++;
  ldv_31647: ;
  if ((hub->hdev)->maxchild >= port1) {
    goto ldv_31646;
  }
  return (0);
}
}
static int hub_suspend(struct usb_interface *intf , pm_message_t msg ) 
{ struct usb_hub *hub ;
  void *tmp ;
  struct usb_device *hdev ;
  unsigned int port1 ;
  int status ;
  struct usb_device *udev ;
  int tmp___0 ;
  int tmp___1 ;
  struct _ddebug descriptor ;
  long tmp___2 ;

  {
  tmp = usb_get_intfdata(intf);
  hub = (struct usb_hub *)tmp;
  hdev = hub->hdev;
  port1 = 1U;
  goto ldv_31659;
  ldv_31658: 
  udev = (*(hub->ports + (unsigned long )(port1 - 1U)))->child;
  if ((unsigned long )udev != (unsigned long )((struct usb_device *)0) && (unsigned int )*((unsigned char *)udev + 1588UL) != 0U) {
    dev_warn((struct device  const  *)(& intf->dev), "port %d nyet suspended\n", port1);
    if ((msg.event & 1024) != 0) {
      return (-16);
    }
  }
  port1 ++;
  ldv_31659: ;
  if ((unsigned int )hdev->maxchild >= port1) {
    goto ldv_31658;
  }
  if ((unsigned int )*((unsigned char *)hdev + 1672UL) != 0U && (unsigned int )*((unsigned char *)hub + 476UL) != 0U) {
    tmp___0 = check_ports_changed(hub);
    if (tmp___0 != 0) {
      if ((msg.event & 1024) != 0) {
        return (-16);
      }
      pm_wakeup_event(& hdev->dev, 2000U);
    }
  }
  tmp___1 = hub_is_superspeed(hdev);
  if (tmp___1 != 0 && (unsigned int )*((unsigned char *)hdev + 1672UL) != 0U) {
    port1 = 1U;
    goto ldv_31662;
    ldv_31661: 
    status = set_port_feature(hdev, (int )(port1 | 1792U), 27);
    port1 ++;
    ldv_31662: ;
    if ((unsigned int )hdev->maxchild >= port1) {
      goto ldv_31661;
    }
  }
  descriptor.modname = "usbcore";
  descriptor.function = "hub_suspend";
  descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
  descriptor.format = "%s\n";
  descriptor.lineno = 3399U;
  descriptor.flags = 1U;
  tmp___2 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
  if (tmp___2 != 0L) {
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& intf->dev), "%s\n",
                      "hub_suspend");
  }
  hub_quiesce(hub, 2);
  return (0);
}
}
static int hub_resume(struct usb_interface *intf ) 
{ struct usb_hub *hub ;
  void *tmp ;
  struct _ddebug descriptor ;
  long tmp___0 ;

  {
  tmp = usb_get_intfdata(intf);
  hub = (struct usb_hub *)tmp;
  descriptor.modname = "usbcore";
  descriptor.function = "hub_resume";
  descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
  descriptor.format = "%s\n";
  descriptor.lineno = 3410U;
  descriptor.flags = 1U;
  tmp___0 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
  if (tmp___0 != 0L) {
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& intf->dev), "%s\n",
                      "hub_resume");
  }
  hub_activate(hub, 4);
  return (0);
}
}
static int hub_reset_resume(struct usb_interface *intf ) 
{ struct usb_hub *hub ;
  void *tmp ;
  struct _ddebug descriptor ;
  long tmp___0 ;

  {
  tmp = usb_get_intfdata(intf);
  hub = (struct usb_hub *)tmp;
  descriptor.modname = "usbcore";
  descriptor.function = "hub_reset_resume";
  descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
  descriptor.format = "%s\n";
  descriptor.lineno = 3419U;
  descriptor.flags = 1U;
  tmp___0 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
  if (tmp___0 != 0L) {
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& intf->dev), "%s\n",
                      "hub_reset_resume");
  }
  hub_activate(hub, 5);
  return (0);
}
}
void usb_root_hub_lost_power(struct usb_device *rhdev ) 
{ 

  {
  dev_warn((struct device  const  *)(& rhdev->dev), "root hub lost power or was reset\n");
  rhdev->reset_resume = 1U;
  return;
}
}
static char const   * const  usb3_lpm_names[4U]  = {      "U0",      "U1",      "U2",      "U3"};
static int usb_req_set_sel(struct usb_device *udev , enum usb3_link_state state ) 
{ struct usb_set_sel_req *sel_values ;
  unsigned long long u1_sel ;
  unsigned long long u1_pel ;
  unsigned long long u2_sel ;
  unsigned long long u2_pel ;
  int ret ;
  struct _ddebug descriptor ;
  long tmp ;
  void *tmp___0 ;
  unsigned int tmp___1 ;

  {
  u1_sel = (unsigned long long )((udev->u1_params.sel + 999U) / 1000U);
  u1_pel = (unsigned long long )((udev->u1_params.pel + 999U) / 1000U);
  u2_sel = (unsigned long long )((udev->u2_params.sel + 999U) / 1000U);
  u2_pel = (unsigned long long )((udev->u2_params.pel + 999U) / 1000U);
  if (((unsigned int )state == 1U && (u1_sel > 255ULL || u1_pel > 255ULL)) || ((unsigned int )state == 2U && (u2_sel > 65535ULL || u2_pel > 65535ULL))) {
    descriptor.modname = "usbcore";
    descriptor.function = "usb_req_set_sel";
    descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
    descriptor.format = "Device-initiated %s disabled due to long SEL %llu us or PEL %llu us\n";
    descriptor.lineno = 3488U;
    descriptor.flags = 1U;
    tmp = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
    if (tmp != 0L) {
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& udev->dev), "Device-initiated %s disabled due to long SEL %llu us or PEL %llu us\n",
                        usb3_lpm_names[(unsigned int )state], u1_sel, u1_pel);
    }
    return (-22);
  }
  if (u1_sel > 255ULL) {
    u1_sel = 255ULL;
  }
  if (u1_pel > 255ULL) {
    u1_pel = 255ULL;
  }
  if (u2_sel > 65535ULL) {
    u2_sel = 65535ULL;
  }
  if (u2_pel > 65535ULL) {
    u2_pel = 65535ULL;
  }
  tmp___0 = kmalloc(6UL, 16U);
  sel_values = (struct usb_set_sel_req *)tmp___0;
  if ((unsigned long )sel_values == (unsigned long )((struct usb_set_sel_req *)0)) {
    return (-12);
  }
  sel_values->u1_sel = (__u8 )u1_sel;
  sel_values->u1_pel = (__u8 )u1_pel;
  sel_values->u2_sel = (unsigned short )u2_sel;
  sel_values->u2_pel = (unsigned short )u2_pel;
  tmp___1 = __create_pipe(udev, 0U);
  ret = usb_control_msg(udev, tmp___1 | 2147483648U, 48, 0, 0, 0, (void *)sel_values,
                        6, 5000);
  kfree((void const   *)sel_values);
  return (ret);
}
}
static int usb_set_device_initiated_lpm(struct usb_device *udev , enum usb3_link_state state ,
                                        bool enable ) 
{ int ret ;
  int feature ;
  struct _ddebug descriptor ;
  long tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;
  char *tmp___2 ;
  char *tmp___3 ;
  char *tmp___4 ;

  {
  switch ((unsigned int )state) {
  case 1U: 
  feature = 48;
  goto ldv_31708;
  case 2U: 
  feature = 49;
  goto ldv_31708;
  default: 
  if ((int )enable) {
    tmp___2 = (char *)"enable";
  } else {
    tmp___2 = (char *)"disable";
  }
  dev_warn((struct device  const  *)(& udev->dev), "%s: Can\'t %s non-U1 or U2 state.\n",
           "usb_set_device_initiated_lpm", tmp___2);
  return (-22);
  }
  ldv_31708: ;
  if ((unsigned int )udev->state != 7U) {
    descriptor.modname = "usbcore";
    descriptor.function = "usb_set_device_initiated_lpm";
    descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
    descriptor.format = "%s: Can\'t %s %s state for unconfigured device.\n";
    descriptor.lineno = 3559U;
    descriptor.flags = 1U;
    tmp = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
    if (tmp != 0L) {
      if ((int )enable) {
        tmp___3 = (char *)"enable";
      } else {
        tmp___3 = (char *)"disable";
      }
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& udev->dev), "%s: Can\'t %s %s state for unconfigured device.\n",
                        "usb_set_device_initiated_lpm", tmp___3, usb3_lpm_names[(unsigned int )state]);
    }
    return (0);
  }
  if ((int )enable) {
    tmp___0 = __create_pipe(udev, 0U);
    ret = usb_control_msg(udev, tmp___0 | 2147483648U, 3, 0, (int )((__u16 )feature),
                          0, 0, 0, 5000);
  } else {
    tmp___1 = __create_pipe(udev, 0U);
    ret = usb_control_msg(udev, tmp___1 | 2147483648U, 1, 0, (int )((__u16 )feature),
                          0, 0, 0, 5000);
  }
  if (ret < 0) {
    if ((int )enable) {
      tmp___4 = (char *)"Enable";
    } else {
      tmp___4 = (char *)"Disable";
    }
    dev_warn((struct device  const  *)(& udev->dev), "%s of device-initiated %s failed.\n",
             tmp___4, usb3_lpm_names[(unsigned int )state]);
    return (-16);
  }
  return (0);
}
}
static int usb_set_lpm_timeout(struct usb_device *udev , enum usb3_link_state state ,
                               int timeout ) 
{ int ret ;
  int feature ;

  {
  switch ((unsigned int )state) {
  case 1U: 
  feature = 23;
  goto ldv_31721;
  case 2U: 
  feature = 24;
  goto ldv_31721;
  default: 
  dev_warn((struct device  const  *)(& udev->dev), "%s: Can\'t set timeout for non-U1 or U2 state.\n",
           "usb_set_lpm_timeout");
  return (-22);
  }
  ldv_31721: ;
  if (((unsigned int )state == 1U && timeout > 127) && timeout != 255) {
    dev_warn((struct device  const  *)(& udev->dev), "Failed to set %s timeout to 0x%x, which is a reserved value.\n",
             usb3_lpm_names[(unsigned int )state], timeout);
    return (-22);
  }
  ret = set_port_feature(udev->parent, ((timeout << 8) & 65535) | (int )udev->portnum,
                         feature);
  if (ret < 0) {
    dev_warn((struct device  const  *)(& udev->dev), "Failed to set %s timeout to 0x%x,error code %i\n",
             usb3_lpm_names[(unsigned int )state], timeout, ret);
    return (-16);
  }
  if ((unsigned int )state == 1U) {
    udev->u1_params.timeout = timeout;
  } else {
    udev->u2_params.timeout = timeout;
  }
  return (0);
}
}
static void usb_enable_link_state(struct usb_hcd *hcd , struct usb_device *udev ,
                                  enum usb3_link_state state ) 
{ int timeout ;
  int ret ;
  __u8 u1_mel ;
  __le16 u2_mel ;
  int tmp ;

  {
  u1_mel = ((udev->bos)->ss_cap)->bU1devExitLat;
  u2_mel = ((udev->bos)->ss_cap)->bU2DevExitLat;
  if (((unsigned int )state == 1U && (unsigned int )u1_mel == 0U) || ((unsigned int )state == 2U && (unsigned int )u2_mel == 0U)) {
    return;
  }
  ret = usb_req_set_sel(udev, state);
  if (ret < 0) {
    dev_warn((struct device  const  *)(& udev->dev), "Set SEL for device-initiated %s failed.\n",
             usb3_lpm_names[(unsigned int )state]);
    return;
  }
  timeout = (*((hcd->driver)->enable_usb3_lpm_timeout))(hcd, udev, state);
  if (timeout == 0) {
    return;
  }
  if (timeout < 0) {
    dev_warn((struct device  const  *)(& udev->dev), "Could not enable %s link state, xHCI error %i.\n",
             usb3_lpm_names[(unsigned int )state], timeout);
    return;
  }
  tmp = usb_set_lpm_timeout(udev, state, timeout);
  if (tmp != 0) {
    (*((hcd->driver)->disable_usb3_lpm_timeout))(hcd, udev, state);
  } else
  if ((unsigned long )udev->actconfig != (unsigned long )((struct usb_host_config *)0)) {
    usb_set_device_initiated_lpm(udev, state, 1);
  }
  return;
}
}
static int usb_disable_link_state(struct usb_hcd *hcd , struct usb_device *udev ,
                                  enum usb3_link_state state ) 
{ int feature ;
  int tmp ;
  int tmp___0 ;

  {
  switch ((unsigned int )state) {
  case 1U: 
  feature = 23;
  goto ldv_31741;
  case 2U: 
  feature = 24;
  goto ldv_31741;
  default: 
  dev_warn((struct device  const  *)(& udev->dev), "%s: Can\'t disable non-U1 or U2 state.\n",
           "usb_disable_link_state");
  return (-22);
  }
  ldv_31741: 
  tmp = usb_set_lpm_timeout(udev, state, 0);
  if (tmp != 0) {
    return (-16);
  }
  usb_set_device_initiated_lpm(udev, state, 0);
  tmp___0 = (*((hcd->driver)->disable_usb3_lpm_timeout))(hcd, udev, state);
  if (tmp___0 != 0) {
    dev_warn((struct device  const  *)(& udev->dev), "Could not disable xHCI %s timeout, bus schedule bandwidth may be impacted.\n",
             usb3_lpm_names[(unsigned int )state]);
  }
  return (0);
}
}
int usb_disable_lpm(struct usb_device *udev ) 
{ struct usb_hcd *hcd ;
  int tmp ;
  int tmp___0 ;

  {
  if ((((unsigned long )udev == (unsigned long )((struct usb_device *)0) || (unsigned long )udev->parent == (unsigned long )((struct usb_device *)0)) || (unsigned int )udev->speed != 5U) || (unsigned int )*((unsigned char *)udev + 1588UL) == 0U) {
    return (0);
  }
  hcd = bus_to_hcd(udev->bus);
  if ((unsigned long )hcd == (unsigned long )((struct usb_hcd *)0) || (unsigned long )(hcd->driver)->disable_usb3_lpm_timeout == (unsigned long )((int (*)(struct usb_hcd * ,
                                                                                                                                                           struct usb_device * ,
                                                                                                                                                           enum usb3_link_state  ))0)) {
    return (0);
  }
  (udev->lpm_disable_count) ++;
  if (udev->u1_params.timeout == 0 && udev->u2_params.timeout == 0) {
    return (0);
  }
  tmp = usb_disable_link_state(hcd, udev, 1);
  if (tmp != 0) {
    goto enable_lpm;
  }
  tmp___0 = usb_disable_link_state(hcd, udev, 2);
  if (tmp___0 != 0) {
    goto enable_lpm;
  }
  return (0);
  enable_lpm: 
  usb_enable_lpm(udev);
  return (-16);
}
}
int usb_unlocked_disable_lpm(struct usb_device *udev ) 
{ struct usb_hcd *hcd ;
  struct usb_hcd *tmp ;
  int ret ;

  {
  tmp = bus_to_hcd(udev->bus);
  hcd = tmp;
  if ((unsigned long )hcd == (unsigned long )((struct usb_hcd *)0)) {
    return (-22);
  }
  ldv_mutex_lock_20(hcd->bandwidth_mutex);
  ret = usb_disable_lpm(udev);
  ldv_mutex_unlock_21(hcd->bandwidth_mutex);
  return (ret);
}
}
void usb_enable_lpm(struct usb_device *udev ) 
{ struct usb_hcd *hcd ;

  {
  if ((((unsigned long )udev == (unsigned long )((struct usb_device *)0) || (unsigned long )udev->parent == (unsigned long )((struct usb_device *)0)) || (unsigned int )udev->speed != 5U) || (unsigned int )*((unsigned char *)udev + 1588UL) == 0U) {
    return;
  }
  (udev->lpm_disable_count) --;
  hcd = bus_to_hcd(udev->bus);
  if (((unsigned long )hcd == (unsigned long )((struct usb_hcd *)0) || (unsigned long )(hcd->driver)->enable_usb3_lpm_timeout == (unsigned long )((int (*)(struct usb_hcd * ,
                                                                                                                                                           struct usb_device * ,
                                                                                                                                                           enum usb3_link_state  ))0)) || (unsigned long )(hcd->driver)->disable_usb3_lpm_timeout == (unsigned long )((int (*)(struct usb_hcd * ,
                                                                                                                                                                                                                                                                               struct usb_device * ,
                                                                                                                                                                                                                                                                               enum usb3_link_state  ))0)) {
    return;
  }
  if (udev->lpm_disable_count != 0U) {
    return;
  }
  usb_enable_link_state(hcd, udev, 1);
  usb_enable_link_state(hcd, udev, 2);
  return;
}
}
void usb_unlocked_enable_lpm(struct usb_device *udev ) 
{ struct usb_hcd *hcd ;
  struct usb_hcd *tmp ;

  {
  tmp = bus_to_hcd(udev->bus);
  hcd = tmp;
  if ((unsigned long )hcd == (unsigned long )((struct usb_hcd *)0)) {
    return;
  }
  ldv_mutex_lock_22(hcd->bandwidth_mutex);
  usb_enable_lpm(udev);
  ldv_mutex_unlock_23(hcd->bandwidth_mutex);
  return;
}
}
int hub_port_debounce(struct usb_hub *hub , int port1 , bool must_be_connected ) 
{ int ret ;
  int total_time ;
  int stable_time ;
  u16 portchange ;
  u16 portstatus ;
  unsigned int connection ;
  struct _ddebug descriptor ;
  long tmp ;

  {
  stable_time = 0;
  connection = 65535U;
  total_time = 0;
  ldv_31799: 
  ret = hub_port_status(hub, port1, & portstatus, & portchange);
  if (ret < 0) {
    return (ret);
  }
  if (((int )portchange & 1) == 0 && ((unsigned int )portstatus & 1U) == connection) {
    if (! must_be_connected || connection == 1U) {
      stable_time += 25;
    }
    if (stable_time > 99) {
      goto ldv_31798;
    }
  } else {
    stable_time = 0;
    connection = (unsigned int )portstatus & 1U;
  }
  if ((int )portchange & 1) {
    usb_clear_port_feature(hub->hdev, port1, 16);
  }
  if (total_time > 1999) {
    goto ldv_31798;
  }
  msleep(25U);
  total_time += 25;
  goto ldv_31799;
  ldv_31798: 
  descriptor.modname = "usbcore";
  descriptor.function = "hub_port_debounce";
  descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
  descriptor.format = "debounce: port %d: total %dms stable %dms status 0x%x\n";
  descriptor.lineno = 3938U;
  descriptor.flags = 1U;
  tmp = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
  if (tmp != 0L) {
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)hub->intfdev, "debounce: port %d: total %dms stable %dms status 0x%x\n",
                      port1, total_time, stable_time, (int )portstatus);
  }
  if (stable_time <= 99) {
    return (-110);
  }
  return ((int )portstatus);
}
}
void usb_ep0_reinit(struct usb_device *udev ) 
{ 

  {
  usb_disable_endpoint(udev, 128U, 1);
  usb_disable_endpoint(udev, 0U, 1);
  usb_enable_endpoint(udev, & udev->ep0, 1);
  return;
}
}
static int hub_set_address(struct usb_device *udev , int devnum ) 
{ int retval ;
  struct usb_hcd *hcd ;
  struct usb_hcd *tmp ;

  {
  tmp = bus_to_hcd(udev->bus);
  hcd = tmp;
  if ((unsigned long )(hcd->driver)->address_device == (unsigned long )((int (*)(struct usb_hcd * ,
                                                                                 struct usb_device * ))0) && devnum <= 1) {
    return (-22);
  }
  if ((unsigned int )udev->state == 6U) {
    return (0);
  }
  if ((unsigned int )udev->state != 5U) {
    return (-22);
  }
  if ((unsigned long )(hcd->driver)->address_device != (unsigned long )((int (*)(struct usb_hcd * ,
                                                                                 struct usb_device * ))0)) {
    retval = (*((hcd->driver)->address_device))(hcd, udev);
  } else {
    retval = usb_control_msg(udev, 2147483648U, 5, 0, (int )((__u16 )devnum), 0, 0,
                             0, 5000);
  }
  if (retval == 0) {
    update_devnum(udev, devnum);
    usb_set_device_state(udev, 6);
    usb_ep0_reinit(udev);
  }
  return (retval);
}
}
static int hub_port_init(struct usb_hub *hub , struct usb_device *udev , int port1 ,
                         int retry_counter ) 
{ struct mutex usb_address0_mutex ;
  struct usb_device *hdev ;
  struct usb_hcd *hcd ;
  struct usb_hcd *tmp ;
  int i ;
  int j ;
  int retval ;
  unsigned int delay ;
  enum usb_device_speed oldspeed ;
  char const   *speed ;
  int devnum ;
  struct _ddebug descriptor ;
  long tmp___0 ;
  struct usb_device_descriptor *buf ;
  int r ;
  void *tmp___1 ;
  struct _ddebug descriptor___0 ;
  long tmp___2 ;
  struct _ddebug descriptor___1 ;
  long tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  char *tmp___6 ;
  char *tmp___7 ;

  {
  usb_address0_mutex.count.counter = 1;
  usb_address0_mutex.wait_lock.ldv_6014.rlock.raw_lock.ldv_2043.head_tail = 0U;
  usb_address0_mutex.wait_lock.ldv_6014.rlock.magic = 3735899821U;
  usb_address0_mutex.wait_lock.ldv_6014.rlock.owner_cpu = 4294967295U;
  usb_address0_mutex.wait_lock.ldv_6014.rlock.owner = 0xffffffffffffffffUL;
  usb_address0_mutex.wait_lock.ldv_6014.rlock.dep_map.key = 0;
  usb_address0_mutex.wait_lock.ldv_6014.rlock.dep_map.class_cache[0] = 0;
  usb_address0_mutex.wait_lock.ldv_6014.rlock.dep_map.class_cache[1] = 0;
  usb_address0_mutex.wait_lock.ldv_6014.rlock.dep_map.name = "usb_address0_mutex.wait_lock";
  usb_address0_mutex.wait_lock.ldv_6014.rlock.dep_map.cpu = 0;
  usb_address0_mutex.wait_lock.ldv_6014.rlock.dep_map.ip = 0UL;
  usb_address0_mutex.wait_list.next = & usb_address0_mutex.wait_list;
  usb_address0_mutex.wait_list.prev = & usb_address0_mutex.wait_list;
  usb_address0_mutex.owner = 0;
  usb_address0_mutex.name = 0;
  usb_address0_mutex.magic = (void *)(& usb_address0_mutex);
  usb_address0_mutex.dep_map.key = 0;
  usb_address0_mutex.dep_map.class_cache[0] = 0;
  usb_address0_mutex.dep_map.class_cache[1] = 0;
  usb_address0_mutex.dep_map.name = "usb_address0_mutex";
  usb_address0_mutex.dep_map.cpu = 0;
  usb_address0_mutex.dep_map.ip = 0UL;
  hdev = hub->hdev;
  tmp = bus_to_hcd(hdev->bus);
  hcd = tmp;
  delay = 10U;
  oldspeed = udev->speed;
  devnum = udev->devnum;
  if ((unsigned long )hdev->parent == (unsigned long )((struct usb_device *)0)) {
    delay = 50U;
    if ((int )(hdev->bus)->otg_port == port1) {
      (hdev->bus)->b_hnp_enable = 0U;
    }
  }
  if ((unsigned int )oldspeed == 1U) {
    delay = 200U;
  }
  ldv_mutex_lock_24(& usb_address0_mutex);
  retval = hub_port_reset(hub, port1, udev, delay, 0);
  if (retval < 0) {
    goto fail;
  }
  retval = -19;
  if ((unsigned int )oldspeed != 0U && (unsigned int )udev->speed != (unsigned int )oldspeed) {
    descriptor.modname = "usbcore";
    descriptor.function = "hub_port_init";
    descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
    descriptor.format = "device reset changed speed!\n";
    descriptor.lineno = 4035U;
    descriptor.flags = 1U;
    tmp___0 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
    if (tmp___0 != 0L) {
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& udev->dev), "device reset changed speed!\n");
    }
    goto fail;
  }
  oldspeed = udev->speed;
  switch ((unsigned int )udev->speed) {
  case 5U: ;
  case 4U: 
  udev->ep0.desc.wMaxPacketSize = 512U;
  goto ldv_31839;
  case 3U: 
  udev->ep0.desc.wMaxPacketSize = 64U;
  goto ldv_31839;
  case 2U: 
  udev->ep0.desc.wMaxPacketSize = 64U;
  goto ldv_31839;
  case 1U: 
  udev->ep0.desc.wMaxPacketSize = 8U;
  goto ldv_31839;
  default: ;
  goto fail;
  }
  ldv_31839: ;
  if ((unsigned int )udev->speed == 4U) {
    speed = "variable speed Wireless";
  } else {
    speed = usb_speed_string(udev->speed);
  }
  if ((unsigned int )udev->speed != 5U) {
    if ((unsigned long )udev->config != (unsigned long )((struct usb_host_config *)0)) {
      tmp___6 = (char *)"reset";
    } else {
      tmp___6 = (char *)"new";
    }
    _dev_info((struct device  const  *)(& udev->dev), "%s %s USB device number %d using %s\n",
              tmp___6, speed, devnum, (((udev->bus)->controller)->driver)->name);
  }
  if ((unsigned long )hdev->tt != (unsigned long )((struct usb_tt *)0)) {
    udev->tt = hdev->tt;
    udev->ttport = hdev->ttport;
  } else
  if ((unsigned int )udev->speed != 3U && (unsigned int )hdev->speed == 3U) {
    if ((unsigned long )hub->tt.hub == (unsigned long )((struct usb_device *)0)) {
      dev_err((struct device  const  *)(& udev->dev), "parent hub has no TT\n");
      retval = -22;
      goto fail;
    }
    udev->tt = & hub->tt;
    udev->ttport = port1;
  }
  i = 0;
  goto ldv_31863;
  ldv_31862: ;
  if (retry_counter / 2 == (int )old_scheme_first && ((int )(hcd->driver)->flags & 64) == 0) {
    r = 0;
    tmp___1 = kmalloc(64UL, 16U);
    buf = (struct usb_device_descriptor *)tmp___1;
    if ((unsigned long )buf == (unsigned long )((struct usb_device_descriptor *)0)) {
      retval = -12;
      goto ldv_31846;
    }
    j = 0;
    goto ldv_31856;
    ldv_31855: 
    buf->bMaxPacketSize0 = 0U;
    r = usb_control_msg(udev, 2147483776U, 6, 128, 256, 0, (void *)buf, 64, initial_descriptor_timeout);
    switch ((int )buf->bMaxPacketSize0) {
    case 8: ;
    case 16: ;
    case 32: ;
    case 64: ;
    case 255: ;
    if ((unsigned int )buf->bDescriptorType == 1U) {
      r = 0;
      goto ldv_31852;
    }
    default: ;
    if (r == 0) {
      r = -71;
    }
    goto ldv_31852;
    }
    ldv_31852: ;
    if (r == 0) {
      goto ldv_31854;
    }
    j ++;
    ldv_31856: ;
    if (j <= 2) {
      goto ldv_31855;
    }
    ldv_31854: 
    udev->descriptor.bMaxPacketSize0 = buf->bMaxPacketSize0;
    kfree((void const   *)buf);
    retval = hub_port_reset(hub, port1, udev, delay, 0);
    if (retval < 0) {
      goto fail;
    }
    if ((unsigned int )udev->speed != (unsigned int )oldspeed) {
      descriptor___0.modname = "usbcore";
      descriptor___0.function = "hub_port_init";
      descriptor___0.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
      descriptor___0.format = "device reset changed speed!\n";
      descriptor___0.lineno = 4153U;
      descriptor___0.flags = 1U;
      tmp___2 = ldv__builtin_expect((long )descriptor___0.flags & 1L, 0L);
      if (tmp___2 != 0L) {
        __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)(& udev->dev),
                          "device reset changed speed!\n");
      }
      retval = -19;
      goto fail;
    }
    if (r != 0) {
      if (r != -19) {
        dev_err((struct device  const  *)(& udev->dev), "device descriptor read/64, error %d\n",
                r);
      }
      retval = -90;
      goto ldv_31846;
    }
  }
  if ((unsigned int )*((unsigned char *)udev + 1588UL) == 0U) {
    j = 0;
    goto ldv_31860;
    ldv_31859: 
    retval = hub_set_address(udev, devnum);
    if (retval >= 0) {
      goto ldv_31858;
    }
    msleep(200U);
    j ++;
    ldv_31860: ;
    if (j <= 1) {
      goto ldv_31859;
    }
    ldv_31858: ;
    if (retval < 0) {
      if (retval != -19) {
        dev_err((struct device  const  *)(& udev->dev), "device not accepting address %d, error %d\n",
                devnum, retval);
      }
      goto fail;
    }
    if ((unsigned int )udev->speed == 5U) {
      devnum = udev->devnum;
      if ((unsigned long )udev->config != (unsigned long )((struct usb_host_config *)0)) {
        tmp___7 = (char *)"reset";
      } else {
        tmp___7 = (char *)"new";
      }
      _dev_info((struct device  const  *)(& udev->dev), "%s SuperSpeed USB device number %d using %s\n",
                tmp___7, devnum, (((udev->bus)->controller)->driver)->name);
    }
    msleep(10U);
    if (retry_counter / 2 == (int )old_scheme_first && ((int )(hcd->driver)->flags & 64) == 0) {
      goto ldv_31861;
    }
  }
  retval = usb_get_device_descriptor(udev, 8U);
  if (retval <= 7) {
    if (retval != -19) {
      dev_err((struct device  const  *)(& udev->dev), "device descriptor read/8, error %d\n",
              retval);
    }
    if (retval >= 0) {
      retval = -90;
    }
  } else {
    retval = 0;
    goto ldv_31861;
  }
  ldv_31846: 
  i ++;
  msleep(100U);
  ldv_31863: ;
  if (i <= 1) {
    goto ldv_31862;
  }
  ldv_31861: ;
  if (retval != 0) {
    goto fail;
  }
  if ((unsigned long )hcd->phy != (unsigned long )((struct usb_phy *)0) && (unsigned long )hdev->parent == (unsigned long )((struct usb_device *)0)) {
    usb_phy_notify_connect(hcd->phy, udev->speed);
  }
  if ((unsigned int )udev->speed == 5U && (unsigned int )udev->descriptor.bcdUSB <= 767U) {
    dev_err((struct device  const  *)(& udev->dev), "got a wrong device descriptor, warm reset device\n");
    hub_port_reset(hub, port1, udev, 50U, 1);
    retval = -22;
    goto fail;
  }
  if ((unsigned int )udev->descriptor.bMaxPacketSize0 == 255U || (unsigned int )udev->speed == 5U) {
    i = 512;
  } else {
    i = (int )udev->descriptor.bMaxPacketSize0;
  }
  tmp___4 = usb_endpoint_maxp((struct usb_endpoint_descriptor  const  *)(& udev->ep0.desc));
  if (tmp___4 != i) {
    if ((unsigned int )udev->speed == 1U || (((i != 8 && i != 16) && i != 32) && i != 64)) {
      dev_err((struct device  const  *)(& udev->dev), "Invalid ep0 maxpacket: %d\n",
              i);
      retval = -90;
      goto fail;
    }
    if ((unsigned int )udev->speed == 2U) {
      descriptor___1.modname = "usbcore";
      descriptor___1.function = "hub_port_init";
      descriptor___1.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
      descriptor___1.format = "ep0 maxpacket = %d\n";
      descriptor___1.lineno = 4250U;
      descriptor___1.flags = 1U;
      tmp___3 = ldv__builtin_expect((long )descriptor___1.flags & 1L, 0L);
      if (tmp___3 != 0L) {
        __dynamic_dev_dbg(& descriptor___1, (struct device  const  *)(& udev->dev),
                          "ep0 maxpacket = %d\n", i);
      }
    } else {
      dev_warn((struct device  const  *)(& udev->dev), "Using ep0 maxpacket: %d\n",
               i);
    }
    udev->ep0.desc.wMaxPacketSize = (unsigned short )i;
    usb_ep0_reinit(udev);
  }
  retval = usb_get_device_descriptor(udev, 18U);
  if (retval <= 17) {
    if (retval != -19) {
      dev_err((struct device  const  *)(& udev->dev), "device descriptor read/all, error %d\n",
              retval);
    }
    if (retval >= 0) {
      retval = -42;
    }
    goto fail;
  }
  if ((unsigned int )*((unsigned char *)udev + 1588UL) == 0U && (unsigned int )udev->descriptor.bcdUSB > 512U) {
    retval = usb_get_bos_descriptor(udev);
    if (retval == 0) {
      tmp___5 = usb_device_supports_lpm(udev);
      udev->lpm_capable = (unsigned char )tmp___5;
      usb_set_lpm_parameters(udev);
    }
  }
  retval = 0;
  if ((unsigned long )(hcd->driver)->update_device != (unsigned long )((int (*)(struct usb_hcd * ,
                                                                                struct usb_device * ))0)) {
    (*((hcd->driver)->update_device))(hcd, udev);
  }
  fail: ;
  if (retval != 0) {
    hub_port_disable(hub, port1, 0);
    update_devnum(udev, devnum);
  }
  ldv_mutex_unlock_25(& usb_address0_mutex);
  return (retval);
}
}
static void check_highspeed(struct usb_hub *hub , struct usb_device *udev , int port1 ) 
{ struct usb_qualifier_descriptor *qual ;
  int status ;
  void *tmp ;

  {
  tmp = kmalloc(10UL, 208U);
  qual = (struct usb_qualifier_descriptor *)tmp;
  if ((unsigned long )qual == (unsigned long )((struct usb_qualifier_descriptor *)0)) {
    return;
  }
  status = usb_get_descriptor(udev, 6, 0, (void *)qual, 10);
  if (status == 10) {
    _dev_info((struct device  const  *)(& udev->dev), "not running at top speed; connect to a high speed hub\n");
    if ((unsigned int )*((unsigned char *)hub + 476UL) != 0U) {
      hub->indicator[port1 + -1] = 2U;
      schedule_delayed_work(& hub->leds, 0UL);
    }
  }
  kfree((void const   *)qual);
  return;
}
}
static unsigned int hub_power_remaining(struct usb_hub *hub ) 
{ struct usb_device *hdev ;
  int remaining ;
  int port1 ;
  struct usb_device *udev ;
  int delta ;
  unsigned int unit_load ;
  int tmp ;
  unsigned int tmp___0 ;

  {
  hdev = hub->hdev;
  if ((unsigned int )*((unsigned char *)hub + 476UL) == 0U) {
    return (0U);
  }
  remaining = (int )hdev->bus_mA - (int )(hub->descriptor)->bHubContrCurrent;
  port1 = 1;
  goto ldv_31883;
  ldv_31882: 
  udev = (*(hub->ports + ((unsigned long )port1 + 0xffffffffffffffffUL)))->child;
  if ((unsigned long )udev == (unsigned long )((struct usb_device *)0)) {
    goto ldv_31881;
  }
  tmp = hub_is_superspeed(udev);
  if (tmp != 0) {
    unit_load = 150U;
  } else {
    unit_load = 100U;
  }
  if ((unsigned long )udev->actconfig != (unsigned long )((struct usb_host_config *)0)) {
    tmp___0 = usb_get_max_power(udev, udev->actconfig);
    delta = (int )tmp___0;
  } else
  if ((int )(udev->bus)->otg_port != port1 || (unsigned long )hdev->parent != (unsigned long )((struct usb_device *)0)) {
    delta = (int )unit_load;
  } else {
    delta = 8;
  }
  if ((unsigned int )delta > hub->mA_per_port) {
    dev_warn((struct device  const  *)(& udev->dev), "%dmA is over %umA budget for port %d!\n",
             delta, hub->mA_per_port, port1);
  }
  remaining -= delta;
  ldv_31881: 
  port1 ++;
  ldv_31883: ;
  if (hdev->maxchild >= port1) {
    goto ldv_31882;
  }
  if (remaining < 0) {
    dev_warn((struct device  const  *)hub->intfdev, "%dmA over power budget!\n", - remaining);
    remaining = 0;
  }
  return ((unsigned int )remaining);
}
}
static void hub_port_connect_change(struct usb_hub *hub , int port1 , u16 portstatus ,
                                    u16 portchange ) 
{ struct usb_device *hdev ;
  struct device *hub_dev ;
  struct usb_hcd *hcd ;
  struct usb_hcd *tmp ;
  unsigned int wHubCharacteristics ;
  struct usb_device *udev ;
  int status ;
  int i ;
  unsigned int unit_load ;
  struct _ddebug descriptor ;
  char *tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  unsigned int tmp___6 ;
  int tmp___7 ;
  u16 devstat ;
  struct _ddebug descriptor___0 ;
  long tmp___8 ;
  unsigned int tmp___9 ;
  struct _ddebug descriptor___1 ;
  long tmp___10 ;
  int tmp___11 ;

  {
  hdev = hub->hdev;
  hub_dev = hub->intfdev;
  tmp = bus_to_hcd(hdev->bus);
  hcd = tmp;
  wHubCharacteristics = (unsigned int )(hub->descriptor)->wHubCharacteristics;
  descriptor.modname = "usbcore";
  descriptor.function = "hub_port_connect_change";
  descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
  descriptor.format = "port %d, status %04x, change %04x, %s\n";
  descriptor.lineno = 4381U;
  descriptor.flags = 1U;
  tmp___1 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
  if (tmp___1 != 0L) {
    tmp___0 = portspeed(hub, (int )portstatus);
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)hub_dev, "port %d, status %04x, change %04x, %s\n",
                      port1, (int )portstatus, (int )portchange, tmp___0);
  }
  if ((unsigned int )*((unsigned char *)hub + 476UL) != 0U) {
    set_port_led(hub, port1, 0);
    hub->indicator[port1 + -1] = 0U;
  }
  udev = (*(hub->ports + ((unsigned long )port1 + 0xffffffffffffffffUL)))->child;
  if (((int )portstatus & 1 && (unsigned long )udev != (unsigned long )((struct usb_device *)0)) && (unsigned int )udev->state != 0U) {
    device_lock(& udev->dev);
    if (((int )portstatus & 2) != 0) {
      status = 0;
    } else
    if ((unsigned int )udev->state == 8U && (unsigned int )*((unsigned char *)udev + 1588UL) != 0U) {
      status = usb_remote_wakeup(udev);
    } else {
      status = -19;
    }
    device_unlock(& udev->dev);
    if (status == 0) {
      clear_bit(port1, (unsigned long volatile   *)(& hub->change_bits));
      return;
    }
  }
  if ((unsigned long )udev != (unsigned long )((struct usb_device *)0)) {
    if (((unsigned long )hcd->phy != (unsigned long )((struct usb_phy *)0) && (unsigned long )hdev->parent == (unsigned long )((struct usb_device *)0)) && ((int )portstatus & 1) == 0) {
      usb_phy_notify_disconnect(hcd->phy, udev->speed);
    }
    usb_disconnect(& (*(hub->ports + ((unsigned long )port1 + 0xffffffffffffffffUL)))->child);
  }
  clear_bit(port1, (unsigned long volatile   *)(& hub->change_bits));
  if (((int )portstatus & 1) == 0 || (int )portchange & 1) {
    clear_bit(port1, (unsigned long volatile   *)(& hub->removed_bits));
  }
  if (((int )portchange & 3) != 0) {
    status = hub_port_debounce_be_stable(hub, port1);
    if (status < 0) {
      if (status != -19) {
        tmp___2 = __printk_ratelimit("hub_port_connect_change");
        if (tmp___2 != 0) {
          dev_err((struct device  const  *)hub_dev, "connect-debounce failed, port %d disabled\n",
                  port1);
        }
      }
      portstatus = (unsigned int )portstatus & 65534U;
    } else {
      portstatus = (u16 )status;
    }
  }
  if (((int )portstatus & 1) == 0) {
    goto _L;
  } else {
    tmp___4 = variable_test_bit(port1, (unsigned long const volatile   *)(& hub->removed_bits));
    if (tmp___4 != 0) {
      _L: 
      if ((wHubCharacteristics & 3U) <= 1U) {
        tmp___3 = port_is_power_on(hub, (unsigned int )portstatus);
        if (tmp___3 == 0) {
          set_port_feature(hdev, port1, 8);
        }
      }
      if (((int )portstatus & 2) != 0) {
        goto done;
      }
      return;
    }
  }
  tmp___5 = hub_is_superspeed(hub->hdev);
  if (tmp___5 != 0) {
    unit_load = 150U;
  } else {
    unit_load = 100U;
  }
  status = 0;
  i = 0;
  goto ldv_31909;
  ldv_31908: 
  udev = usb_alloc_dev(hdev, hdev->bus, (unsigned int )port1);
  if ((unsigned long )udev == (unsigned long )((struct usb_device *)0)) {
    dev_err((struct device  const  *)hub_dev, "couldn\'t allocate port %d usb_device\n",
            port1);
    goto done;
  }
  usb_set_device_state(udev, 2);
  udev->bus_mA = (unsigned short )hub->mA_per_port;
  udev->level = (unsigned int )hdev->level + 1U;
  tmp___6 = hub_is_wusb(hub);
  udev->wusb = (unsigned char )tmp___6;
  tmp___7 = hub_is_superspeed(hub->hdev);
  if (tmp___7 != 0) {
    udev->speed = 5;
  } else {
    udev->speed = 0;
  }
  choose_devnum(udev);
  if (udev->devnum <= 0) {
    status = -107;
    goto loop;
  }
  status = hub_port_init(hub, udev, port1, i);
  if (status < 0) {
    goto loop;
  }
  usb_detect_quirks(udev);
  if ((udev->quirks & 64U) != 0U) {
    msleep(1000U);
  }
  if ((unsigned int )udev->descriptor.bDeviceClass == 9U && (unsigned int )udev->bus_mA <= unit_load) {
    status = usb_get_status(udev, 0, 0, (void *)(& devstat));
    if (status <= 1) {
      descriptor___0.modname = "usbcore";
      descriptor___0.function = "hub_port_connect_change";
      descriptor___0.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
      descriptor___0.format = "get status %d ?\n";
      descriptor___0.lineno = 4525U;
      descriptor___0.flags = 1U;
      tmp___8 = ldv__builtin_expect((long )descriptor___0.flags & 1L, 0L);
      if (tmp___8 != 0L) {
        __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)(& udev->dev),
                          "get status %d ?\n", status);
      }
      goto loop_disable;
    }
    if (((int )devstat & 1) == 0) {
      dev_err((struct device  const  *)(& udev->dev), "can\'t connect bus-powered hub to this port\n");
      if ((unsigned int )*((unsigned char *)hub + 476UL) != 0U) {
        hub->indicator[port1 + -1] = 4U;
        schedule_delayed_work(& hub->leds, 0UL);
      }
      status = -107;
      goto loop_disable;
    }
  }
  if (((unsigned int )udev->descriptor.bcdUSB > 511U && (unsigned int )udev->speed == 2U) && highspeed_hubs != 0U) {
    check_highspeed(hub, udev, port1);
  }
  status = 0;
  spin_lock_irq(& device_state_lock);
  if ((unsigned int )hdev->state == 0U) {
    status = -107;
  } else {
    (*(hub->ports + ((unsigned long )port1 + 0xffffffffffffffffUL)))->child = udev;
  }
  spin_unlock_irq(& device_state_lock);
  if (status == 0) {
    status = usb_new_device(udev);
    if (status != 0) {
      spin_lock_irq(& device_state_lock);
      (*(hub->ports + ((unsigned long )port1 + 0xffffffffffffffffUL)))->child = 0;
      spin_unlock_irq(& device_state_lock);
    }
  }
  if (status != 0) {
    goto loop_disable;
  }
  tmp___9 = hub_power_remaining(hub);
  status = (int )tmp___9;
  if (status != 0) {
    descriptor___1.modname = "usbcore";
    descriptor___1.function = "hub_port_connect_change";
    descriptor___1.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
    descriptor___1.format = "%dmA power budget left\n";
    descriptor___1.lineno = 4581U;
    descriptor___1.flags = 1U;
    tmp___10 = ldv__builtin_expect((long )descriptor___1.flags & 1L, 0L);
    if (tmp___10 != 0L) {
      __dynamic_dev_dbg(& descriptor___1, (struct device  const  *)hub_dev, "%dmA power budget left\n",
                        status);
    }
  }
  return;
  loop_disable: 
  hub_port_disable(hub, port1, 1);
  loop: 
  usb_ep0_reinit(udev);
  release_devnum(udev);
  hub_free_dev(udev);
  usb_put_dev(udev);
  if (status == -107 || status == -524) {
    goto ldv_31907;
  }
  i ++;
  ldv_31909: ;
  if (((int )use_both_schemes + 1) * 2 > i) {
    goto ldv_31908;
  }
  ldv_31907: ;
  if ((unsigned long )(hub->hdev)->parent != (unsigned long )((struct usb_device *)0) || (unsigned long )(hcd->driver)->port_handed_over == (unsigned long )((int (*)(struct usb_hcd * ,
                                                                                                                                                                      int  ))0)) {
    goto _L___0;
  } else {
    tmp___11 = (*((hcd->driver)->port_handed_over))(hcd, port1);
    if (tmp___11 == 0) {
      _L___0: 
      if (status != -107 && status != -19) {
        dev_err((struct device  const  *)hub_dev, "unable to enumerate USB device on port %d\n",
                port1);
      }
    }
  }
  done: 
  hub_port_disable(hub, port1, 1);
  if ((unsigned long )(hcd->driver)->relinquish_port != (unsigned long )((void (*)(struct usb_hcd * ,
                                                                                   int  ))0) && (unsigned long )(hub->hdev)->parent == (unsigned long )((struct usb_device *)0)) {
    (*((hcd->driver)->relinquish_port))(hcd, port1);
  }
  return;
}
}
static int hub_handle_remote_wakeup(struct usb_hub *hub , unsigned int port , u16 portstatus ,
                                    u16 portchange ) 
{ struct usb_device *hdev ;
  struct usb_device *udev ;
  int connect_change ;
  int ret ;
  int tmp ;
  struct _ddebug descriptor ;
  long tmp___0 ;

  {
  connect_change = 0;
  hdev = hub->hdev;
  udev = (*(hub->ports + (unsigned long )(port - 1U)))->child;
  tmp = hub_is_superspeed(hdev);
  if (tmp == 0) {
    if (((int )portchange & 4) == 0) {
      return (0);
    }
    usb_clear_port_feature(hdev, (int )port, 18);
  } else
  if (((unsigned long )udev == (unsigned long )((struct usb_device *)0) || (unsigned int )udev->state != 8U) || ((int )portstatus & 480) != 0) {
    return (0);
  }
  if ((unsigned long )udev != (unsigned long )((struct usb_device *)0)) {
    msleep(10U);
    device_lock(& udev->dev);
    ret = usb_remote_wakeup(udev);
    device_unlock(& udev->dev);
    if (ret < 0) {
      connect_change = 1;
    }
  } else {
    ret = -19;
    hub_port_disable(hub, (int )port, 1);
  }
  descriptor.modname = "usbcore";
  descriptor.function = "hub_handle_remote_wakeup";
  descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
  descriptor.format = "resume on port %d, status %d\n";
  descriptor.lineno = 4645U;
  descriptor.flags = 1U;
  tmp___0 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
  if (tmp___0 != 0L) {
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)hub->intfdev, "resume on port %d, status %d\n",
                      port, ret);
  }
  return (connect_change);
}
}
static void hub_events(void) 
{ struct list_head *tmp ;
  struct usb_device *hdev ;
  struct usb_interface *intf ;
  struct usb_hub *hub ;
  struct device *hub_dev ;
  u16 hubstatus ;
  u16 hubchange ;
  u16 portstatus ;
  u16 portchange ;
  int i ;
  int ret ;
  int connect_change ;
  int wakeup_change ;
  int tmp___0 ;
  struct list_head  const  *__mptr ;
  struct device  const  *__mptr___0 ;
  struct _ddebug descriptor ;
  long tmp___1 ;
  long tmp___2 ;
  struct _ddebug descriptor___0 ;
  long tmp___3 ;
  struct _ddebug descriptor___1 ;
  long tmp___4 ;
  struct _ddebug descriptor___2 ;
  long tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  struct _ddebug descriptor___3 ;
  long tmp___8 ;
  int tmp___9 ;
  u16 status ;
  u16 unused ;
  struct _ddebug descriptor___4 ;
  long tmp___10 ;
  struct _ddebug descriptor___5 ;
  long tmp___11 ;
  struct _ddebug descriptor___6 ;
  long tmp___12 ;
  int tmp___13 ;
  int status___0 ;
  struct usb_device *udev ;
  struct _ddebug descriptor___7 ;
  long tmp___14 ;
  bool tmp___15 ;
  struct _ddebug descriptor___8 ;
  long tmp___16 ;
  u16 status___1 ;
  u16 unused___0 ;
  struct _ddebug descriptor___9 ;
  long tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;

  {
  ldv_31968: 
  spin_lock_irq(& hub_event_lock);
  tmp___0 = list_empty((struct list_head  const  *)(& hub_event_list));
  if (tmp___0 != 0) {
    spin_unlock_irq(& hub_event_lock);
    goto ldv_31938;
  }
  tmp = hub_event_list.next;
  list_del_init(tmp);
  __mptr = (struct list_head  const  *)tmp;
  hub = (struct usb_hub *)__mptr + 0xffffffffffffff20UL;
  kref_get(& hub->kref);
  spin_unlock_irq(& hub_event_lock);
  hdev = hub->hdev;
  hub_dev = hub->intfdev;
  __mptr___0 = (struct device  const  *)hub_dev;
  intf = (struct usb_interface *)__mptr___0 + 0xffffffffffffffd0UL;
  descriptor.modname = "usbcore";
  descriptor.function = "hub_events";
  descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
  descriptor.format = "state %d ports %d chg %04x evt %04x\n";
  descriptor.lineno = 4694U;
  descriptor.flags = 1U;
  tmp___1 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
  if (tmp___1 != 0L) {
    if ((unsigned long )hub->descriptor != (unsigned long )((struct usb_hub_descriptor *)0)) {
      tmp___20 = (int )(hub->descriptor)->bNbrPorts;
    } else {
      tmp___20 = 0;
    }
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)hub_dev, "state %d ports %d chg %04x evt %04x\n",
                      (unsigned int )hdev->state, tmp___20, (int )((unsigned short )hub->change_bits[0]),
                      (int )((unsigned short )hub->event_bits[0]));
  }
  device_lock(& hdev->dev);
  tmp___2 = ldv__builtin_expect((unsigned int )*((unsigned char *)hub + 476UL) != 0U,
                                0L);
  if (tmp___2 != 0L) {
    goto loop_disconnected;
  }
  if ((unsigned int )hdev->state == 0U) {
    hub->error = -19;
    hub_quiesce(hub, 0);
    goto loop;
  }
  ret = usb_autopm_get_interface(intf);
  if (ret != 0) {
    descriptor___0.modname = "usbcore";
    descriptor___0.function = "hub_events";
    descriptor___0.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
    descriptor___0.format = "Can\'t autoresume: %d\n";
    descriptor___0.lineno = 4712U;
    descriptor___0.flags = 1U;
    tmp___3 = ldv__builtin_expect((long )descriptor___0.flags & 1L, 0L);
    if (tmp___3 != 0L) {
      __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)hub_dev, "Can\'t autoresume: %d\n",
                        ret);
    }
    goto loop;
  }
  if ((unsigned int )*((unsigned char *)hub + 476UL) != 0U) {
    goto loop_autopm;
  }
  if (hub->error != 0) {
    descriptor___1.modname = "usbcore";
    descriptor___1.function = "hub_events";
    descriptor___1.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
    descriptor___1.format = "resetting for error %d\n";
    descriptor___1.lineno = 4722U;
    descriptor___1.flags = 1U;
    tmp___4 = ldv__builtin_expect((long )descriptor___1.flags & 1L, 0L);
    if (tmp___4 != 0L) {
      __dynamic_dev_dbg(& descriptor___1, (struct device  const  *)hub_dev, "resetting for error %d\n",
                        hub->error);
    }
    ret = usb_reset_device(hdev);
    if (ret != 0) {
      descriptor___2.modname = "usbcore";
      descriptor___2.function = "hub_events";
      descriptor___2.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
      descriptor___2.format = "error resetting hub: %d\n";
      descriptor___2.lineno = 4727U;
      descriptor___2.flags = 1U;
      tmp___5 = ldv__builtin_expect((long )descriptor___2.flags & 1L, 0L);
      if (tmp___5 != 0L) {
        __dynamic_dev_dbg(& descriptor___2, (struct device  const  *)hub_dev, "error resetting hub: %d\n",
                          ret);
      }
      goto loop_autopm;
    }
    hub->nerrors = 0;
    hub->error = 0;
  }
  i = 1;
  goto ldv_31962;
  ldv_31961: 
  tmp___6 = variable_test_bit(i, (unsigned long const volatile   *)(& hub->busy_bits));
  if (tmp___6 != 0) {
    goto ldv_31951;
  }
  connect_change = variable_test_bit(i, (unsigned long const volatile   *)(& hub->change_bits));
  wakeup_change = test_and_clear_bit(i, (unsigned long volatile   *)(& hub->wakeup_bits));
  tmp___7 = test_and_clear_bit(i, (unsigned long volatile   *)(& hub->event_bits));
  if ((tmp___7 == 0 && connect_change == 0) && wakeup_change == 0) {
    goto ldv_31951;
  }
  ret = hub_port_status(hub, i, & portstatus, & portchange);
  if (ret < 0) {
    goto ldv_31951;
  }
  if ((int )portchange & 1) {
    usb_clear_port_feature(hdev, i, 16);
    connect_change = 1;
  }
  if (((int )portchange & 2) != 0) {
    if (connect_change == 0) {
      descriptor___3.modname = "usbcore";
      descriptor___3.function = "hub_events";
      descriptor___3.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
      descriptor___3.format = "port %d enable change, status %08x\n";
      descriptor___3.lineno = 4761U;
      descriptor___3.flags = 1U;
      tmp___8 = ldv__builtin_expect((long )descriptor___3.flags & 1L, 0L);
      if (tmp___8 != 0L) {
        __dynamic_dev_dbg(& descriptor___3, (struct device  const  *)hub_dev, "port %d enable change, status %08x\n",
                          i, (int )portstatus);
      }
    }
    usb_clear_port_feature(hdev, i, 17);
    if ((((int )portstatus & 2) == 0 && connect_change == 0) && (unsigned long )(*(hub->ports + ((unsigned long )i + 0xffffffffffffffffUL)))->child != (unsigned long )((struct usb_device *)0)) {
      dev_err((struct device  const  *)hub_dev, "port %i disabled by hub (EMI?), re-enabling...\n",
              i);
      connect_change = 1;
    }
  }
  tmp___9 = hub_handle_remote_wakeup(hub, (unsigned int )i, (int )portstatus, (int )portchange);
  if (tmp___9 != 0) {
    connect_change = 1;
  }
  if (((int )portchange & 8) != 0) {
    status = 0U;
    descriptor___4.modname = "usbcore";
    descriptor___4.function = "hub_events";
    descriptor___4.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
    descriptor___4.format = "over-current change on port %d\n";
    descriptor___4.lineno = 4792U;
    descriptor___4.flags = 1U;
    tmp___10 = ldv__builtin_expect((long )descriptor___4.flags & 1L, 0L);
    if (tmp___10 != 0L) {
      __dynamic_dev_dbg(& descriptor___4, (struct device  const  *)hub_dev, "over-current change on port %d\n",
                        i);
    }
    usb_clear_port_feature(hdev, i, 19);
    msleep(100U);
    hub_power_on(hub, 1);
    hub_port_status(hub, i, & status, & unused);
    if (((int )status & 8) != 0) {
      dev_err((struct device  const  *)hub_dev, "over-current condition on port %d\n",
              i);
    }
  }
  if (((int )portchange & 16) != 0) {
    descriptor___5.modname = "usbcore";
    descriptor___5.function = "hub_events";
    descriptor___5.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
    descriptor___5.format = "reset change on port %d\n";
    descriptor___5.lineno = 4806U;
    descriptor___5.flags = 1U;
    tmp___11 = ldv__builtin_expect((long )descriptor___5.flags & 1L, 0L);
    if (tmp___11 != 0L) {
      __dynamic_dev_dbg(& descriptor___5, (struct device  const  *)hub_dev, "reset change on port %d\n",
                        i);
    }
    usb_clear_port_feature(hdev, i, 20);
  }
  if (((int )portchange & 32) != 0) {
    tmp___13 = hub_is_superspeed(hub->hdev);
    if (tmp___13 != 0) {
      descriptor___6.modname = "usbcore";
      descriptor___6.function = "hub_events";
      descriptor___6.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
      descriptor___6.format = "warm reset change on port %d\n";
      descriptor___6.lineno = 4814U;
      descriptor___6.flags = 1U;
      tmp___12 = ldv__builtin_expect((long )descriptor___6.flags & 1L, 0L);
      if (tmp___12 != 0L) {
        __dynamic_dev_dbg(& descriptor___6, (struct device  const  *)hub_dev, "warm reset change on port %d\n",
                          i);
      }
      usb_clear_port_feature(hdev, i, 29);
    }
  }
  if (((int )portchange & 64) != 0) {
    usb_clear_port_feature(hub->hdev, i, 25);
  }
  if (((int )portchange & 128) != 0) {
    dev_warn((struct device  const  *)hub_dev, "config error on port %d\n", i);
    usb_clear_port_feature(hub->hdev, i, 26);
  }
  tmp___15 = hub_port_warm_reset_required(hub, (int )portstatus);
  if ((int )tmp___15) {
    udev = (*(hub->ports + ((unsigned long )i + 0xffffffffffffffffUL)))->child;
    descriptor___7.modname = "usbcore";
    descriptor___7.function = "hub_events";
    descriptor___7.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
    descriptor___7.format = "warm reset port %d\n";
    descriptor___7.lineno = 4838U;
    descriptor___7.flags = 1U;
    tmp___14 = ldv__builtin_expect((long )descriptor___7.flags & 1L, 0L);
    if (tmp___14 != 0L) {
      __dynamic_dev_dbg(& descriptor___7, (struct device  const  *)hub_dev, "warm reset port %d\n",
                        i);
    }
    if ((unsigned long )udev == (unsigned long )((struct usb_device *)0)) {
      status___0 = hub_port_reset(hub, i, 0, 50U, 1);
      if (status___0 < 0) {
        hub_port_disable(hub, i, 1);
      }
    } else {
      device_lock(& udev->dev);
      status___0 = usb_reset_device(udev);
      device_unlock(& udev->dev);
    }
    connect_change = 0;
  }
  if (connect_change != 0) {
    hub_port_connect_change(hub, i, (int )portstatus, (int )portchange);
  }
  ldv_31951: 
  i ++;
  ldv_31962: ;
  if ((int )(hub->descriptor)->bNbrPorts >= i) {
    goto ldv_31961;
  }
  tmp___19 = test_and_clear_bit(0, (unsigned long volatile   *)(& hub->event_bits));
  if (! (tmp___19 == 0)) {
    tmp___18 = hub_hub_status(hub, & hubstatus, & hubchange);
    if (tmp___18 < 0) {
      dev_err((struct device  const  *)hub_dev, "get_hub_status failed\n");
    } else {
      if ((int )hubchange & 1) {
        descriptor___8.modname = "usbcore";
        descriptor___8.function = "hub_events";
        descriptor___8.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
        descriptor___8.format = "power change\n";
        descriptor___8.lineno = 4865U;
        descriptor___8.flags = 1U;
        tmp___16 = ldv__builtin_expect((long )descriptor___8.flags & 1L, 0L);
        if (tmp___16 != 0L) {
          __dynamic_dev_dbg(& descriptor___8, (struct device  const  *)hub_dev, "power change\n");
        }
        clear_hub_feature(hdev, 0);
        if ((int )hubstatus & 1) {
          hub->limited_power = 1U;
        } else {
          hub->limited_power = 0U;
        }
      }
      if (((int )hubchange & 2) != 0) {
        status___1 = 0U;
        descriptor___9.modname = "usbcore";
        descriptor___9.function = "hub_events";
        descriptor___9.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
        descriptor___9.format = "over-current change\n";
        descriptor___9.lineno = 4877U;
        descriptor___9.flags = 1U;
        tmp___17 = ldv__builtin_expect((long )descriptor___9.flags & 1L, 0L);
        if (tmp___17 != 0L) {
          __dynamic_dev_dbg(& descriptor___9, (struct device  const  *)hub_dev, "over-current change\n");
        }
        clear_hub_feature(hdev, 1);
        msleep(500U);
        hub_power_on(hub, 1);
        hub_hub_status(hub, & status___1, & unused___0);
        if (((int )status___1 & 2) != 0) {
          dev_err((struct device  const  *)hub_dev, "over-current condition\n");
        }
      }
    }
  }
  loop_autopm: 
  usb_autopm_put_interface_no_suspend(intf);
  loop: 
  usb_autopm_put_interface(intf);
  loop_disconnected: 
  device_unlock(& hdev->dev);
  kref_put(& hub->kref, & hub_release);
  goto ldv_31968;
  ldv_31938: ;
  return;
}
}
static int hub_thread(void *__unused ) 
{ int __retval ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  int tmp___0 ;
  bool tmp___1 ;
  struct task_struct *tmp___2 ;
  bool tmp___3 ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  bool tmp___7 ;
  int tmp___8 ;
  struct task_struct *tmp___9 ;
  bool tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  bool tmp___13 ;
  bool tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  struct _ddebug descriptor ;
  long tmp___17 ;

  {
  set_freezable();
  ldv_31982: 
  hub_events();
  ldv_31980: 
  __ret = 0;
  tmp___6 = list_empty((struct list_head  const  *)(& hub_event_list));
  if (tmp___6 != 0) {
    tmp___7 = kthread_should_stop();
    if (tmp___7) {
      tmp___8 = 0;
    } else {
      tmp___8 = 1;
    }
    if (tmp___8) {
      tmp___9 = get_current();
      tmp___10 = freezing(tmp___9);
      if (tmp___10) {
        tmp___11 = 0;
      } else {
        tmp___11 = 1;
      }
      if (tmp___11) {
        tmp = get_current();
        __wait.flags = 0U;
        __wait.private = (void *)tmp;
        __wait.func = & autoremove_wake_function;
        __wait.task_list.next = & __wait.task_list;
        __wait.task_list.prev = & __wait.task_list;
        ldv_31977: 
        prepare_to_wait(& khubd_wait, & __wait, 1);
        tmp___0 = list_empty((struct list_head  const  *)(& hub_event_list));
        if (tmp___0 == 0) {
          goto ldv_31975;
        } else {
          tmp___1 = kthread_should_stop();
          if ((int )tmp___1) {
            goto ldv_31975;
          } else {
            tmp___2 = get_current();
            tmp___3 = freezing(tmp___2);
            if ((int )tmp___3) {
              goto ldv_31975;
            }
          }
        }
        tmp___4 = get_current();
        tmp___5 = signal_pending(tmp___4);
        if (tmp___5 == 0) {
          schedule();
          goto ldv_31976;
        }
        __ret = -512;
        goto ldv_31975;
        ldv_31976: ;
        goto ldv_31977;
        ldv_31975: 
        finish_wait(& khubd_wait, & __wait);
      }
    }
  }
  __retval = __ret;
  if (__retval != 0) {
    goto ldv_31979;
  } else {
    tmp___12 = list_empty((struct list_head  const  *)(& hub_event_list));
    if (tmp___12 == 0) {
      goto ldv_31979;
    } else {
      tmp___13 = kthread_should_stop();
      if ((int )tmp___13) {
        goto ldv_31979;
      }
    }
  }
  try_to_freeze();
  goto ldv_31980;
  ldv_31979: 
  tmp___14 = kthread_should_stop();
  if (tmp___14) {
    tmp___15 = 0;
  } else {
    tmp___15 = 1;
  }
  if (tmp___15) {
    goto ldv_31982;
  } else {
    tmp___16 = list_empty((struct list_head  const  *)(& hub_event_list));
    if (tmp___16 == 0) {
      goto ldv_31982;
    } else {
      goto ldv_31983;
    }
  }
  ldv_31983: 
  descriptor.modname = "usbcore";
  descriptor.function = "hub_thread";
  descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
  descriptor.format = "%s: khubd exiting\n";
  descriptor.lineno = 4919U;
  descriptor.flags = 1U;
  tmp___17 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
  if (tmp___17 != 0L) {
    __dynamic_pr_debug(& descriptor, "%s: khubd exiting\n", usbcore_name);
  }
  return (0);
}
}
static struct usb_device_id  const  hub_id_table[4U]  = {      {129U, 1507U, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, 9U, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, 1UL}, 
        {16U, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0,
      9U, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, 0UL}, 
        {128U, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, 9U, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, 0UL}, 
        {(unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0,
      (unsigned short)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}};
struct usb_device_id  const  __mod_usb_device_table  ;
static struct usb_driver hub_driver  = 
     {"hub", & hub_probe, & hub_disconnect, & hub_ioctl, & hub_suspend, & hub_resume,
    & hub_reset_resume, & hub_pre_reset, & hub_post_reset, (struct usb_device_id  const  *)(& hub_id_table),
    {{{{{{0U}}, 0U, 0U, 0, {0, {0, 0}, 0, 0, 0UL}}}}, {0, 0}}, {{0, 0, 0, 0, (_Bool)0,
                                                                 0, 0, 0, 0, 0, 0,
                                                                 0, 0, 0, 0}, 0},
    (unsigned char)0, 1U, (unsigned char)0, (unsigned char)0};
int usb_hub_init(void) 
{ int tmp ;
  struct task_struct *__k ;
  struct task_struct *tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
  tmp = usb_register_driver(& hub_driver, & __this_module, "usbcore");
  if (tmp < 0) {
    printk("\v%s: can\'t register hub driver\n", usbcore_name);
    return (-1);
  }
  tmp___0 = kthread_create_on_node(& hub_thread, 0, -1, "khubd");
  __k = tmp___0;
  tmp___1 = IS_ERR((void const   *)__k);
  if (tmp___1 == 0L) {
    wake_up_process(__k);
  }
  khubd_task = __k;
  tmp___2 = IS_ERR((void const   *)khubd_task);
  if (tmp___2 == 0L) {
    return (0);
  }
  usb_deregister(& hub_driver);
  printk("\v%s: can\'t start khubd\n", usbcore_name);
  return (-1);
}
}
void usb_hub_cleanup(void) 
{ 

  {
  kthread_stop(khubd_task);
  usb_deregister(& hub_driver);
  return;
}
}
static int descriptors_changed(struct usb_device *udev , struct usb_device_descriptor *old_device_descriptor ) 
{ int changed ;
  unsigned int index ;
  unsigned int serial_len ;
  unsigned int len ;
  unsigned int old_length ;
  int length ;
  char *buf ;
  int tmp ;
  size_t tmp___0 ;
  unsigned int _max1 ;
  unsigned int _max2 ;
  void *tmp___1 ;
  struct _ddebug descriptor ;
  long tmp___2 ;
  struct _ddebug descriptor___0 ;
  long tmp___3 ;
  int tmp___4 ;
  struct _ddebug descriptor___1 ;
  long tmp___5 ;
  struct _ddebug descriptor___2 ;
  long tmp___6 ;
  int tmp___7 ;

  {
  changed = 0;
  serial_len = 0U;
  tmp = memcmp((void const   *)(& udev->descriptor), (void const   *)old_device_descriptor,
               18UL);
  if (tmp != 0) {
    return (1);
  }
  if ((unsigned long )udev->serial != (unsigned long )((char *)0)) {
    tmp___0 = strlen((char const   *)udev->serial);
    serial_len = (unsigned int )tmp___0 + 1U;
  }
  len = serial_len;
  index = 0U;
  goto ldv_32012;
  ldv_32011: 
  old_length = (unsigned int )(udev->config + (unsigned long )index)->desc.wTotalLength;
  _max1 = len;
  _max2 = old_length;
  if (_max1 > _max2) {
    len = _max1;
  } else {
    len = _max2;
  }
  index ++;
  ldv_32012: ;
  if ((unsigned int )udev->descriptor.bNumConfigurations > index) {
    goto ldv_32011;
  }
  tmp___1 = kmalloc((size_t )len, 16U);
  buf = (char *)tmp___1;
  if ((unsigned long )buf == (unsigned long )((char *)0)) {
    dev_err((struct device  const  *)(& udev->dev), "no mem to re-read configs after reset\n");
    return (1);
  }
  index = 0U;
  goto ldv_32019;
  ldv_32018: 
  old_length = (unsigned int )(udev->config + (unsigned long )index)->desc.wTotalLength;
  length = usb_get_descriptor(udev, 2, (int )((unsigned char )index), (void *)buf,
                              (int )old_length);
  if ((unsigned int )length != old_length) {
    descriptor.modname = "usbcore";
    descriptor.function = "descriptors_changed";
    descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
    descriptor.format = "config index %d, error %d\n";
    descriptor.lineno = 5027U;
    descriptor.flags = 1U;
    tmp___2 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
    if (tmp___2 != 0L) {
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& udev->dev), "config index %d, error %d\n",
                        index, length);
    }
    changed = 1;
    goto ldv_32016;
  }
  tmp___4 = memcmp((void const   *)buf, (void const   *)*(udev->rawdescriptors + (unsigned long )index),
                   (size_t )old_length);
  if (tmp___4 != 0) {
    descriptor___0.modname = "usbcore";
    descriptor___0.function = "descriptors_changed";
    descriptor___0.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
    descriptor___0.format = "config index %d changed (#%d)\n";
    descriptor___0.lineno = 5036U;
    descriptor___0.flags = 1U;
    tmp___3 = ldv__builtin_expect((long )descriptor___0.flags & 1L, 0L);
    if (tmp___3 != 0L) {
      __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)(& udev->dev),
                        "config index %d changed (#%d)\n", index, (int )((struct usb_config_descriptor *)buf)->bConfigurationValue);
    }
    changed = 1;
    goto ldv_32016;
  }
  index ++;
  ldv_32019: ;
  if ((unsigned int )udev->descriptor.bNumConfigurations > index) {
    goto ldv_32018;
  }
  ldv_32016: ;
  if (changed == 0 && serial_len != 0U) {
    length = usb_string(udev, (int )udev->descriptor.iSerialNumber, buf, (size_t )serial_len);
    if ((unsigned int )(length + 1) != serial_len) {
      descriptor___1.modname = "usbcore";
      descriptor___1.function = "descriptors_changed";
      descriptor___1.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
      descriptor___1.format = "serial string error %d\n";
      descriptor___1.lineno = 5047U;
      descriptor___1.flags = 1U;
      tmp___5 = ldv__builtin_expect((long )descriptor___1.flags & 1L, 0L);
      if (tmp___5 != 0L) {
        __dynamic_dev_dbg(& descriptor___1, (struct device  const  *)(& udev->dev),
                          "serial string error %d\n", length);
      }
      changed = 1;
    } else {
      tmp___7 = memcmp((void const   *)buf, (void const   *)udev->serial, (size_t )length);
      if (tmp___7 != 0) {
        descriptor___2.modname = "usbcore";
        descriptor___2.function = "descriptors_changed";
        descriptor___2.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
        descriptor___2.format = "serial string changed\n";
        descriptor___2.lineno = 5050U;
        descriptor___2.flags = 1U;
        tmp___6 = ldv__builtin_expect((long )descriptor___2.flags & 1L, 0L);
        if (tmp___6 != 0L) {
          __dynamic_dev_dbg(& descriptor___2, (struct device  const  *)(& udev->dev),
                            "serial string changed\n");
        }
        changed = 1;
      }
    }
  }
  kfree((void const   *)buf);
  return (changed);
}
}
static int usb_reset_and_verify_device(struct usb_device *udev ) 
{ struct usb_device *parent_hdev ;
  struct usb_hub *parent_hub ;
  struct usb_hcd *hcd ;
  struct usb_hcd *tmp ;
  struct usb_device_descriptor descriptor ;
  int i ;
  int ret ;
  int port1 ;
  struct _ddebug descriptor___0 ;
  long tmp___0 ;
  struct _ddebug descriptor___1 ;
  long tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;
  struct usb_host_config *config ;
  struct usb_interface *intf ;
  struct usb_interface_descriptor *desc ;

  {
  parent_hdev = udev->parent;
  tmp = bus_to_hcd(udev->bus);
  hcd = tmp;
  descriptor = udev->descriptor;
  ret = 0;
  port1 = (int )udev->portnum;
  if ((unsigned int )udev->state == 0U || (unsigned int )udev->state == 8U) {
    descriptor___0.modname = "usbcore";
    descriptor___0.function = "usb_reset_and_verify_device";
    descriptor___0.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
    descriptor___0.format = "device reset not allowed in state %d\n";
    descriptor___0.lineno = 5101U;
    descriptor___0.flags = 1U;
    tmp___0 = ldv__builtin_expect((long )descriptor___0.flags & 1L, 0L);
    if (tmp___0 != 0L) {
      __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)(& udev->dev),
                        "device reset not allowed in state %d\n", (unsigned int )udev->state);
    }
    return (-22);
  }
  if ((unsigned long )parent_hdev == (unsigned long )((struct usb_device *)0)) {
    descriptor___1.modname = "usbcore";
    descriptor___1.function = "usb_reset_and_verify_device";
    descriptor___1.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
    descriptor___1.format = "%s for root hub!\n";
    descriptor___1.lineno = 5107U;
    descriptor___1.flags = 1U;
    tmp___1 = ldv__builtin_expect((long )descriptor___1.flags & 1L, 0L);
    if (tmp___1 != 0L) {
      __dynamic_dev_dbg(& descriptor___1, (struct device  const  *)(& udev->dev),
                        "%s for root hub!\n", "usb_reset_and_verify_device");
    }
    return (-21);
  }
  parent_hub = usb_hub_to_struct_hub(parent_hdev);
  ret = usb_unlocked_disable_lpm(udev);
  if (ret != 0) {
    dev_err((struct device  const  *)(& udev->dev), "%s Failed to disable LPM\n.",
            "usb_reset_and_verify_device");
    goto re_enumerate;
  }
  ret = usb_disable_ltm(udev);
  if (ret != 0) {
    dev_err((struct device  const  *)(& udev->dev), "%s Failed to disable LTM\n.",
            "usb_reset_and_verify_device");
    goto re_enumerate;
  }
  set_bit((unsigned int )port1, (unsigned long volatile   *)(& parent_hub->busy_bits));
  i = 0;
  goto ldv_32038;
  ldv_32037: 
  usb_ep0_reinit(udev);
  ret = hub_port_init(parent_hub, udev, port1, i);
  if ((ret >= 0 || ret == -107) || ret == -19) {
    goto ldv_32036;
  }
  i ++;
  ldv_32038: ;
  if (((int )use_both_schemes + 1) * 2 > i) {
    goto ldv_32037;
  }
  ldv_32036: 
  clear_bit(port1, (unsigned long volatile   *)(& parent_hub->busy_bits));
  if (ret < 0) {
    goto re_enumerate;
  }
  tmp___2 = descriptors_changed(udev, & descriptor);
  if (tmp___2 != 0) {
    _dev_info((struct device  const  *)(& udev->dev), "device firmware changed\n");
    udev->descriptor = descriptor;
    goto re_enumerate;
  }
  if ((unsigned long )udev->actconfig == (unsigned long )((struct usb_host_config *)0)) {
    goto done;
  }
  ldv_mutex_lock_26(hcd->bandwidth_mutex);
  ret = usb_hcd_alloc_bandwidth(udev, udev->actconfig, 0, 0);
  if (ret < 0) {
    dev_warn((struct device  const  *)(& udev->dev), "Busted HC?  Not enough HCD resources for old configuration.\n");
    ldv_mutex_unlock_27(hcd->bandwidth_mutex);
    goto re_enumerate;
  }
  tmp___3 = __create_pipe(udev, 0U);
  ret = usb_control_msg(udev, tmp___3 | 2147483648U, 9, 0, (int )(udev->actconfig)->desc.bConfigurationValue,
                        0, 0, 0, 5000);
  if (ret < 0) {
    dev_err((struct device  const  *)(& udev->dev), "can\'t restore configuration #%d (error=%d)\n",
            (int )(udev->actconfig)->desc.bConfigurationValue, ret);
    ldv_mutex_unlock_28(hcd->bandwidth_mutex);
    goto re_enumerate;
  }
  ldv_mutex_unlock_29(hcd->bandwidth_mutex);
  usb_set_device_state(udev, 7);
  i = 0;
  goto ldv_32044;
  ldv_32043: 
  config = udev->actconfig;
  intf = config->interface[i];
  desc = & (intf->cur_altsetting)->desc;
  if ((unsigned int )desc->bAlternateSetting == 0U) {
    usb_disable_interface(udev, intf, 1);
    usb_enable_interface(udev, intf, 1);
    ret = 0;
  } else {
    intf->resetting_device = 1U;
    ret = usb_set_interface(udev, (int )desc->bInterfaceNumber, (int )desc->bAlternateSetting);
    intf->resetting_device = 0U;
  }
  if (ret < 0) {
    dev_err((struct device  const  *)(& udev->dev), "failed to restore interface %d altsetting %d (error=%d)\n",
            (int )desc->bInterfaceNumber, (int )desc->bAlternateSetting, ret);
    goto re_enumerate;
  }
  i ++;
  ldv_32044: ;
  if ((int )(udev->actconfig)->desc.bNumInterfaces > i) {
    goto ldv_32043;
  }
  done: 
  usb_unlocked_enable_lpm(udev);
  usb_enable_ltm(udev);
  return (0);
  re_enumerate: 
  hub_port_logical_disconnect(parent_hub, port1);
  return (-19);
}
}
int usb_reset_device(struct usb_device *udev ) 
{ int ret ;
  int i ;
  unsigned int noio_flag ;
  struct usb_host_config *config ;
  struct _ddebug descriptor ;
  long tmp ;
  struct usb_interface *cintf ;
  struct usb_driver *drv ;
  int unbind ;
  struct device_driver  const  *__mptr ;
  struct usb_interface *cintf___0 ;
  struct usb_driver *drv___0 ;
  int rebind ;
  struct device_driver  const  *__mptr___0 ;

  {
  config = udev->actconfig;
  if ((unsigned int )udev->state == 0U || (unsigned int )udev->state == 8U) {
    descriptor.modname = "usbcore";
    descriptor.function = "usb_reset_device";
    descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
    descriptor.format = "device reset not allowed in state %d\n";
    descriptor.lineno = 5256U;
    descriptor.flags = 1U;
    tmp = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
    if (tmp != 0L) {
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& udev->dev), "device reset not allowed in state %d\n",
                        (unsigned int )udev->state);
    }
    return (-22);
  }
  noio_flag = memalloc_noio_save();
  usb_autoresume_device(udev);
  if ((unsigned long )config != (unsigned long )((struct usb_host_config *)0)) {
    i = 0;
    goto ldv_32061;
    ldv_32060: 
    cintf = config->interface[i];
    unbind = 0;
    if ((unsigned long )cintf->dev.driver != (unsigned long )((struct device_driver *)0)) {
      __mptr = (struct device_driver  const  *)cintf->dev.driver;
      drv = (struct usb_driver *)__mptr + 0xffffffffffffff58UL;
      if ((unsigned long )drv->pre_reset != (unsigned long )((int (*)(struct usb_interface * ))0) && (unsigned long )drv->post_reset != (unsigned long )((int (*)(struct usb_interface * ))0)) {
        unbind = (*(drv->pre_reset))(cintf);
      } else
      if ((unsigned int )cintf->condition == 2U) {
        unbind = 1;
      }
      if (unbind != 0) {
        usb_forced_unbind_intf(cintf);
      }
    }
    i ++;
    ldv_32061: ;
    if ((int )config->desc.bNumInterfaces > i) {
      goto ldv_32060;
    }
  }
  ret = usb_reset_and_verify_device(udev);
  if ((unsigned long )config != (unsigned long )((struct usb_host_config *)0)) {
    i = (int )config->desc.bNumInterfaces + -1;
    goto ldv_32069;
    ldv_32068: 
    cintf___0 = config->interface[i];
    rebind = (int )cintf___0->needs_binding;
    if (rebind == 0 && (unsigned long )cintf___0->dev.driver != (unsigned long )((struct device_driver *)0)) {
      __mptr___0 = (struct device_driver  const  *)cintf___0->dev.driver;
      drv___0 = (struct usb_driver *)__mptr___0 + 0xffffffffffffff58UL;
      if ((unsigned long )drv___0->post_reset != (unsigned long )((int (*)(struct usb_interface * ))0)) {
        rebind = (*(drv___0->post_reset))(cintf___0);
      } else
      if ((unsigned int )cintf___0->condition == 2U) {
        rebind = 1;
      }
    }
    if (ret == 0 && rebind != 0) {
      usb_rebind_intf(cintf___0);
    }
    i --;
    ldv_32069: ;
    if (i >= 0) {
      goto ldv_32068;
    }
  }
  usb_autosuspend_device(udev);
  memalloc_noio_restore(noio_flag);
  return (ret);
}
}
void usb_queue_reset_device(struct usb_interface *iface ) 
{ 

  {
  schedule_work(& iface->reset_ws);
  return;
}
}
struct usb_device *usb_hub_find_child(struct usb_device *hdev , int port1 ) 
{ struct usb_hub *hub ;
  struct usb_hub *tmp ;

  {
  tmp = usb_hub_to_struct_hub(hdev);
  hub = tmp;
  if (port1 <= 0 || hdev->maxchild < port1) {
    return (0);
  }
  return ((*(hub->ports + ((unsigned long )port1 + 0xffffffffffffffffUL)))->child);
}
}
void usb_set_hub_port_connect_type(struct usb_device *hdev , int port1 , enum usb_port_connect_type type ) 
{ struct usb_hub *hub ;
  struct usb_hub *tmp ;

  {
  tmp = usb_hub_to_struct_hub(hdev);
  hub = tmp;
  (*(hub->ports + ((unsigned long )port1 + 0xffffffffffffffffUL)))->connect_type = type;
  return;
}
}
enum usb_port_connect_type usb_get_hub_port_connect_type(struct usb_device *hdev ,
                                                         int port1 ) 
{ struct usb_hub *hub ;
  struct usb_hub *tmp ;

  {
  tmp = usb_hub_to_struct_hub(hdev);
  hub = tmp;
  return ((*(hub->ports + ((unsigned long )port1 + 0xffffffffffffffffUL)))->connect_type);
}
}
void usb_hub_adjust_deviceremovable(struct usb_device *hdev , struct usb_hub_descriptor *desc ) 
{ enum usb_port_connect_type connect_type ;
  int i ;
  u8 mask ;
  struct _ddebug descriptor ;
  long tmp ;
  u16 port_removable ;
  u16 mask___0 ;
  struct _ddebug descriptor___0 ;
  long tmp___0 ;
  int tmp___1 ;

  {
  tmp___1 = hub_is_superspeed(hdev);
  if (tmp___1 == 0) {
    i = 1;
    goto ldv_32119;
    ldv_32118: 
    connect_type = usb_get_hub_port_connect_type(hdev, i);
    if ((unsigned int )connect_type == 2U) {
      mask = (u8 )(1 << i % 8);
      if ((unsigned int )((int )desc->u.hs.DeviceRemovable[i / 8] & (int )mask) == 0U) {
        descriptor.modname = "usbcore";
        descriptor.function = "usb_hub_adjust_deviceremovable";
        descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
        descriptor.format = "usb port%d\'s DeviceRemovable is changed to 1 according to platform information.\n";
        descriptor.lineno = 5432U;
        descriptor.flags = 1U;
        tmp = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
        if (tmp != 0L) {
          __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& hdev->dev),
                            "usb port%d\'s DeviceRemovable is changed to 1 according to platform information.\n",
                            i);
        }
        desc->u.hs.DeviceRemovable[i / 8] = (__u8 )((int )desc->u.hs.DeviceRemovable[i / 8] | (int )mask);
      }
    }
    i ++;
    ldv_32119: ;
    if (hdev->maxchild >= i) {
      goto ldv_32118;
    }
  } else {
    port_removable = desc->u.ss.DeviceRemovable;
    i = 1;
    goto ldv_32125;
    ldv_32124: 
    connect_type = usb_get_hub_port_connect_type(hdev, i);
    if ((unsigned int )connect_type == 2U) {
      mask___0 = (u16 )(1 << i);
      if ((unsigned int )((int )port_removable & (int )mask___0) == 0U) {
        descriptor___0.modname = "usbcore";
        descriptor___0.function = "usb_hub_adjust_deviceremovable";
        descriptor___0.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hub.c.prepared";
        descriptor___0.format = "usb port%d\'s DeviceRemovable is changed to 1 according to platform information.\n";
        descriptor___0.lineno = 5448U;
        descriptor___0.flags = 1U;
        tmp___0 = ldv__builtin_expect((long )descriptor___0.flags & 1L, 0L);
        if (tmp___0 != 0L) {
          __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)(& hdev->dev),
                            "usb port%d\'s DeviceRemovable is changed to 1 according to platform information.\n",
                            i);
        }
        port_removable = (u16 )((int )port_removable | (int )mask___0);
      }
    }
    i ++;
    ldv_32125: ;
    if (hdev->maxchild >= i) {
      goto ldv_32124;
    }
    desc->u.ss.DeviceRemovable = port_removable;
  }
  return;
}
}
acpi_handle usb_get_hub_port_acpi_handle(struct usb_device *hdev , int port1 ) 
{ struct usb_hub *hub ;
  struct usb_hub *tmp ;

  {
  tmp = usb_hub_to_struct_hub(hdev);
  hub = tmp;
  return ((*(hub->ports + ((unsigned long )port1 + 0xffffffffffffffffUL)))->dev.acpi_node.handle);
}
}
extern void ldv_check_return_value(int  ) ;
extern void ldv_check_return_value_probe(int  ) ;
void ldv_main1_sequence_infinite_withcheck_stateful(void) 
{ struct usb_interface *var_group1 ;
  struct usb_device_id  const  *var_hub_probe_41_p1 ;
  int res_hub_probe_41 ;
  pm_message_t var_hub_suspend_80_p1 ;
  unsigned int var_hub_ioctl_42_p1 ;
  void *var_hub_ioctl_42_p2 ;
  int ldv_s_hub_driver_usb_driver ;
  int tmp ;
  int tmp___0 ;

  {
  ldv_s_hub_driver_usb_driver = 0;
  LDV_IN_INTERRUPT = 1;
  ldv_initialize();
  goto ldv_32167;
  ldv_32166: 
  tmp = __VERIFIER_nondet_int();
  switch (tmp) {
  case 0: ;
  if (ldv_s_hub_driver_usb_driver == 0) {
    res_hub_probe_41 = hub_probe(var_group1, var_hub_probe_41_p1);
    ldv_check_return_value(res_hub_probe_41);
    ldv_check_return_value_probe(res_hub_probe_41);
    if (res_hub_probe_41 != 0) {
      goto ldv_module_exit;
    }
    ldv_s_hub_driver_usb_driver ++;
  }
  goto ldv_32157;
  case 1: ;
  if (ldv_s_hub_driver_usb_driver == 1) {
    ldv_handler_precall();
    hub_suspend(var_group1, var_hub_suspend_80_p1);
    ldv_s_hub_driver_usb_driver ++;
  }
  goto ldv_32157;
  case 2: ;
  if (ldv_s_hub_driver_usb_driver == 2) {
    ldv_handler_precall();
    hub_resume(var_group1);
    ldv_s_hub_driver_usb_driver ++;
  }
  goto ldv_32157;
  case 3: ;
  if (ldv_s_hub_driver_usb_driver == 3) {
    ldv_handler_precall();
    hub_pre_reset(var_group1);
    ldv_s_hub_driver_usb_driver ++;
  }
  goto ldv_32157;
  case 4: ;
  if (ldv_s_hub_driver_usb_driver == 4) {
    ldv_handler_precall();
    hub_reset_resume(var_group1);
    ldv_s_hub_driver_usb_driver ++;
  }
  goto ldv_32157;
  case 5: ;
  if (ldv_s_hub_driver_usb_driver == 5) {
    ldv_handler_precall();
    hub_post_reset(var_group1);
    ldv_s_hub_driver_usb_driver ++;
  }
  goto ldv_32157;
  case 6: ;
  if (ldv_s_hub_driver_usb_driver == 6) {
    ldv_handler_precall();
    hub_disconnect(var_group1);
    ldv_s_hub_driver_usb_driver = 0;
  }
  goto ldv_32157;
  case 7: 
  ldv_handler_precall();
  hub_ioctl(var_group1, var_hub_ioctl_42_p1, var_hub_ioctl_42_p2);
  goto ldv_32157;
  default: ;
  goto ldv_32157;
  }
  ldv_32157: ;
  ldv_32167: 
  tmp___0 = __VERIFIER_nondet_int();
  if (tmp___0 != 0 || ldv_s_hub_driver_usb_driver != 0) {
    goto ldv_32166;
  }
  ldv_module_exit: 
  ldv_check_final_state();
  return;
}
}
void ldv_mutex_lock_11(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_lock(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_12(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_lock(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_13(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
int ldv_mutex_trylock_14(struct mutex *ldv_func_arg1 ) 
{ ldv_func_ret_type___2 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
  tmp = mutex_trylock(ldv_func_arg1);
  ldv_func_res = tmp;
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
  return (tmp___0);
  return (ldv_func_res);
}
}
void ldv_mutex_unlock_15(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_16(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_status_mutex_of_usb_hub(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_17(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_status_mutex_of_usb_hub(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_18(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_status_mutex_of_usb_hub(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_19(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_status_mutex_of_usb_hub(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_20(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_bandwidth_mutex_of_usb_hcd(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_21(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_bandwidth_mutex_of_usb_hcd(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_22(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_bandwidth_mutex_of_usb_hcd(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_23(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_bandwidth_mutex_of_usb_hcd(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_24(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_usb_address0_mutex(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_25(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_usb_address0_mutex(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_26(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_bandwidth_mutex_of_usb_hcd(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_27(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_bandwidth_mutex_of_usb_hcd(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_28(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_bandwidth_mutex_of_usb_hcd(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_29(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_bandwidth_mutex_of_usb_hcd(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
 static __u64 __le64_to_cpup(__le64 const   *p ) 
{ 

  {
  return ((__u64 )*p);
}
}
extern int sscanf(char const   * , char const   *  , ...) ;
 static void list_add(struct list_head *new , struct list_head *head ) 
{ 

  {
  __list_add(new, head, head->next);
  return;
}
}
extern struct pv_irq_ops pv_irq_ops ;
extern unsigned long __phys_addr(unsigned long  ) ;
extern void *memset(void * , int  , size_t  ) ;
 static unsigned long arch_local_save_flags(void) 
{ unsigned long __ret ;
  unsigned long __edi ;
  unsigned long __esi ;
  unsigned long __edx ;
  unsigned long __ecx ;
  unsigned long __eax ;
  long tmp ;

  {
  __edi = __edi;
  __esi = __esi;
  __edx = __edx;
  __ecx = __ecx;
  __eax = __eax;
  tmp = ldv__builtin_expect((unsigned long )pv_irq_ops.save_fl.func == (unsigned long )((void *)0),
                            0L);
  if (tmp != 0L) {
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/exper_fp/inst/current/envs/linux-3.10-rc1.tar/linux-3.10-rc1/arch/x86/include/asm/paravirt.h"),
                         "i" (824), "i" (12UL));
    ldv_4781: ;
    goto ldv_4781;
  }
  __asm__  volatile   ("771:\n\tcall *%c2;\n772:\n.pushsection .parainstructions,\"a\"\n .balign 8 \n .quad  771b\n  .byte %c1\n  .byte 772b-771b\n  .short %c3\n.popsection\n": "=a" (__eax): [paravirt_typenum] "i" (44UL),
                       [paravirt_opptr] "i" (& pv_irq_ops.save_fl.func), [paravirt_clobber] "i" (1): "memory",
                       "cc");
  __ret = __eax;
  return (__ret);
}
}
 static void arch_local_irq_restore(unsigned long f ) 
{ unsigned long __edi ;
  unsigned long __esi ;
  unsigned long __edx ;
  unsigned long __ecx ;
  unsigned long __eax ;
  long tmp ;

  {
  __edi = __edi;
  __esi = __esi;
  __edx = __edx;
  __ecx = __ecx;
  __eax = __eax;
  tmp = ldv__builtin_expect((unsigned long )pv_irq_ops.restore_fl.func == (unsigned long )((void *)0),
                            0L);
  if (tmp != 0L) {
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/exper_fp/inst/current/envs/linux-3.10-rc1.tar/linux-3.10-rc1/arch/x86/include/asm/paravirt.h"),
                         "i" (829), "i" (12UL));
    ldv_4791: ;
    goto ldv_4791;
  }
  __asm__  volatile   ("771:\n\tcall *%c2;\n772:\n.pushsection .parainstructions,\"a\"\n .balign 8 \n .quad  771b\n  .byte %c1\n  .byte 772b-771b\n  .short %c3\n.popsection\n": "=a" (__eax): [paravirt_typenum] "i" (45UL),
                       [paravirt_opptr] "i" (& pv_irq_ops.restore_fl.func), [paravirt_clobber] "i" (1),
                       "D" (f): "memory", "cc");
  return;
}
}
 static void arch_local_irq_disable(void) 
{ unsigned long __edi ;
  unsigned long __esi ;
  unsigned long __edx ;
  unsigned long __ecx ;
  unsigned long __eax ;
  long tmp ;

  {
  __edi = __edi;
  __esi = __esi;
  __edx = __edx;
  __ecx = __ecx;
  __eax = __eax;
  tmp = ldv__builtin_expect((unsigned long )pv_irq_ops.irq_disable.func == (unsigned long )((void *)0),
                            0L);
  if (tmp != 0L) {
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/exper_fp/inst/current/envs/linux-3.10-rc1.tar/linux-3.10-rc1/arch/x86/include/asm/paravirt.h"),
                         "i" (834), "i" (12UL));
    ldv_4800: ;
    goto ldv_4800;
  }
  __asm__  volatile   ("771:\n\tcall *%c2;\n772:\n.pushsection .parainstructions,\"a\"\n .balign 8 \n .quad  771b\n  .byte %c1\n  .byte 772b-771b\n  .short %c3\n.popsection\n": "=a" (__eax): [paravirt_typenum] "i" (46UL),
                       [paravirt_opptr] "i" (& pv_irq_ops.irq_disable.func), [paravirt_clobber] "i" (1): "memory",
                       "cc");
  return;
}
}
 static unsigned long arch_local_irq_save(void) 
{ unsigned long f ;

  {
  f = arch_local_save_flags();
  arch_local_irq_disable();
  return (f);
}
}
 static int arch_irqs_disabled_flags(unsigned long flags ) 
{ 

  {
  return ((flags & 512UL) == 0UL);
}
}
extern void trace_hardirqs_on(void) ;
extern void trace_hardirqs_off(void) ;
extern void __cmpxchg_wrong_size(void) ;
 static void atomic_dec(atomic_t *v ) 
{ 

  {
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; decl %0": "+m" (v->counter));
  return;
}
}
 static int atomic_cmpxchg(atomic_t *v , int old , int new ) 
{ int __ret ;
  int __old ;
  int __new ;
  u8 volatile   *__ptr ;
  u16 volatile   *__ptr___0 ;
  u32 volatile   *__ptr___1 ;
  u64 volatile   *__ptr___2 ;

  {
  __old = old;
  __new = new;
  switch (4UL) {
  case 1UL: 
  __ptr = (u8 volatile   *)(& v->counter);
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgb %2,%1": "=a" (__ret),
                       "+m" (*__ptr): "q" (__new), "0" (__old): "memory");
  goto ldv_5547;
  case 2UL: 
  __ptr___0 = (u16 volatile   *)(& v->counter);
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgw %2,%1": "=a" (__ret),
                       "+m" (*__ptr___0): "r" (__new), "0" (__old): "memory");
  goto ldv_5547;
  case 4UL: 
  __ptr___1 = (u32 volatile   *)(& v->counter);
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgl %2,%1": "=a" (__ret),
                       "+m" (*__ptr___1): "r" (__new), "0" (__old): "memory");
  goto ldv_5547;
  case 8UL: 
  __ptr___2 = (u64 volatile   *)(& v->counter);
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgq %2,%1": "=a" (__ret),
                       "+m" (*__ptr___2): "r" (__new), "0" (__old): "memory");
  goto ldv_5547;
  default: 
  __cmpxchg_wrong_size();
  }
  ldv_5547: ;
  return (__ret);
}
}
 static int __atomic_add_unless(atomic_t *v , int a , int u ) 
{ int c ;
  int old ;
  long tmp ;
  long tmp___0 ;

  {
  c = atomic_read((atomic_t const   *)v);
  ldv_5576: 
  tmp = ldv__builtin_expect(c == u, 0L);
  if (tmp != 0L) {
    goto ldv_5575;
  }
  old = atomic_cmpxchg(v, c, c + a);
  tmp___0 = ldv__builtin_expect(old == c, 1L);
  if (tmp___0 != 0L) {
    goto ldv_5575;
  }
  c = old;
  goto ldv_5576;
  ldv_5575: ;
  return (c);
}
}
 static int atomic_add_unless(atomic_t *v , int a , int u ) 
{ int tmp ;

  {
  tmp = __atomic_add_unless(v, a, u);
  return (tmp != u);
}
}
int ldv_mutex_trylock_52(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_50(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_53(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_55(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_56(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_58(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_60(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_61(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_62(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_64(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_66(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_49(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_51(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_54(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_57(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_59(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_63(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_65(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_usb_bus_list_lock(struct mutex *lock ) ;
void ldv_mutex_unlock_usb_bus_list_lock(struct mutex *lock ) ;
extern void _raw_spin_lock(raw_spinlock_t * ) ;
extern void _raw_spin_unlock(raw_spinlock_t * ) ;
 static void spin_lock(spinlock_t *lock ) 
{ 

  {
  _raw_spin_lock(& lock->ldv_6014.rlock);
  return;
}
}
 static void spin_unlock(spinlock_t *lock ) 
{ 

  {
  _raw_spin_unlock(& lock->ldv_6014.rlock);
  return;
}
}
extern int del_timer(struct timer_list * ) ;
extern int mod_timer(struct timer_list * , unsigned long  ) ;
extern int del_timer_sync(struct timer_list * ) ;
extern bool cancel_work_sync(struct work_struct * ) ;
extern int sysfs_create_group(struct kobject * , struct attribute_group  const  * ) ;
extern void sysfs_remove_group(struct kobject * , struct attribute_group  const  * ) ;
 static char const   *kobject_name(struct kobject  const  *kobj ) 
{ 

  {
  return ((char const   *)kobj->name);
}
}
extern struct uts_namespace init_uts_ns ;
 static struct new_utsname *init_utsname(void) 
{ 

  {
  return (& init_uts_ns.name);
}
}
 static void *lowmem_page_address(struct page  const  *page ) 
{ 

  {
  return ((void *)((unsigned long )((unsigned long long )(((long )page + 24189255811072L) / 64L) << 12) + 0xffff880000000000UL));
}
}
 static bool device_can_wakeup(struct device *dev ) 
{ 

  {
  return ((int )dev->power.can_wakeup != 0);
}
}
 static bool device_may_wakeup(struct device *dev ) 
{ 

  {
  return ((bool )((unsigned int )*((unsigned char *)dev + 292UL) != 0U && (unsigned long )dev->power.wakeup != (unsigned long )((struct wakeup_source *)0)));
}
}
extern int device_wakeup_enable(struct device * ) ;
extern int device_set_wakeup_enable(struct device * , bool  ) ;
 static char const   *dev_name(struct device  const  *dev ) 
{ char const   *tmp ;

  {
  if ((unsigned long )dev->init_name != (unsigned long )((char const   *)0)) {
    return ((char const   *)dev->init_name);
  }
  tmp = kobject_name(& dev->kobj);
  return (tmp);
}
}
 static void device_lock___0(struct device *dev ) 
{ 

  {
  ldv_mutex_lock_51(& dev->mutex);
  return;
}
}
 static void device_unlock___0(struct device *dev ) 
{ 

  {
  ldv_mutex_unlock_53(& dev->mutex);
  return;
}
}
 static struct page *sg_page(struct scatterlist *sg ) 
{ long tmp ;
  long tmp___0 ;

  {
  tmp = ldv__builtin_expect(sg->sg_magic != 2271560481UL, 0L);
  if (tmp != 0L) {
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (98), "i" (12UL));
    ldv_21744: ;
    goto ldv_21744;
  }
  tmp___0 = ldv__builtin_expect((long )((int )sg->page_link) & 1L, 0L);
  if (tmp___0 != 0L) {
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (99), "i" (12UL));
    ldv_21745: ;
    goto ldv_21745;
  }
  return ((struct page *)(sg->page_link & 0xfffffffffffffffcUL));
}
}
 static void *sg_virt(struct scatterlist *sg ) 
{ struct page *tmp ;
  void *tmp___0 ;

  {
  tmp = sg_page(sg);
  tmp___0 = lowmem_page_address((struct page  const  *)tmp);
  return (tmp___0 + (unsigned long )sg->offset);
}
}
extern struct scatterlist *sg_next(struct scatterlist * ) ;
 static int valid_dma_direction(int dma_direction ) 
{ 

  {
  return ((dma_direction == 0 || dma_direction == 1) || dma_direction == 2);
}
}
 static void kmemcheck_mark_initialized(void *address , unsigned int n ) 
{ 

  {
  return;
}
}
extern void debug_dma_map_page(struct device * , struct page * , size_t  , size_t  ,
                               int  , dma_addr_t  , bool  ) ;
extern void debug_dma_mapping_error(struct device * , dma_addr_t  ) ;
extern void debug_dma_unmap_page(struct device * , dma_addr_t  , size_t  , int  ,
                                 bool  ) ;
extern void debug_dma_map_sg(struct device * , struct scatterlist * , int  , int  ,
                             int  ) ;
extern void debug_dma_unmap_sg(struct device * , struct scatterlist * , int  , int  ) ;
extern struct dma_map_ops *dma_ops ;
 static struct dma_map_ops *get_dma_ops(struct device *dev ) 
{ long tmp ;

  {
  tmp = ldv__builtin_expect((unsigned long )dev == (unsigned long )((struct device *)0),
                            0L);
  if (tmp != 0L || (unsigned long )dev->archdata.dma_ops == (unsigned long )((struct dma_map_ops *)0)) {
    return (dma_ops);
  } else {
    return (dev->archdata.dma_ops);
  }
}
}
 static dma_addr_t dma_map_single_attrs(struct device *dev , void *ptr , size_t size ,
                                                enum dma_data_direction dir , struct dma_attrs *attrs ) 
{ struct dma_map_ops *ops ;
  struct dma_map_ops *tmp ;
  dma_addr_t addr ;
  int tmp___0 ;
  long tmp___1 ;
  unsigned long tmp___2 ;
  unsigned long tmp___3 ;

  {
  tmp = get_dma_ops(dev);
  ops = tmp;
  kmemcheck_mark_initialized(ptr, (unsigned int )size);
  tmp___0 = valid_dma_direction((int )dir);
  tmp___1 = ldv__builtin_expect(tmp___0 == 0, 0L);
  if (tmp___1 != 0L) {
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/asm-generic/dma-mapping-common.h"),
                         "i" (19), "i" (12UL));
    ldv_22243: ;
    goto ldv_22243;
  }
  tmp___2 = __phys_addr((unsigned long )ptr);
  addr = (*(ops->map_page))(dev, 0xffffea0000000000UL + (tmp___2 >> 12), (unsigned long )ptr & 4095UL,
                            size, dir, attrs);
  tmp___3 = __phys_addr((unsigned long )ptr);
  debug_dma_map_page(dev, 0xffffea0000000000UL + (tmp___3 >> 12), (unsigned long )ptr & 4095UL,
                     size, (int )dir, addr, 1);
  return (addr);
}
}
 static void dma_unmap_single_attrs(struct device *dev , dma_addr_t addr ,
                                            size_t size , enum dma_data_direction dir ,
                                            struct dma_attrs *attrs ) 
{ struct dma_map_ops *ops ;
  struct dma_map_ops *tmp ;
  int tmp___0 ;
  long tmp___1 ;

  {
  tmp = get_dma_ops(dev);
  ops = tmp;
  tmp___0 = valid_dma_direction((int )dir);
  tmp___1 = ldv__builtin_expect(tmp___0 == 0, 0L);
  if (tmp___1 != 0L) {
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/asm-generic/dma-mapping-common.h"),
                         "i" (36), "i" (12UL));
    ldv_22252: ;
    goto ldv_22252;
  }
  if ((unsigned long )ops->unmap_page != (unsigned long )((void (*)(struct device * ,
                                                                    dma_addr_t  ,
                                                                    size_t  , enum dma_data_direction  ,
                                                                    struct dma_attrs * ))0)) {
    (*(ops->unmap_page))(dev, addr, size, dir, attrs);
  }
  debug_dma_unmap_page(dev, addr, size, (int )dir, 1);
  return;
}
}
 static int dma_map_sg_attrs(struct device *dev , struct scatterlist *sg ,
                                     int nents , enum dma_data_direction dir , struct dma_attrs *attrs ) 
{ struct dma_map_ops *ops ;
  struct dma_map_ops *tmp ;
  int i ;
  int ents ;
  struct scatterlist *s ;
  void *tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;

  {
  tmp = get_dma_ops(dev);
  ops = tmp;
  i = 0;
  s = sg;
  goto ldv_22265;
  ldv_22264: 
  tmp___0 = sg_virt(s);
  kmemcheck_mark_initialized(tmp___0, s->length);
  i ++;
  s = sg_next(s);
  ldv_22265: ;
  if (i < nents) {
    goto ldv_22264;
  }
  tmp___1 = valid_dma_direction((int )dir);
  tmp___2 = ldv__builtin_expect(tmp___1 == 0, 0L);
  if (tmp___2 != 0L) {
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/asm-generic/dma-mapping-common.h"),
                         "i" (52), "i" (12UL));
    ldv_22267: ;
    goto ldv_22267;
  }
  ents = (*(ops->map_sg))(dev, sg, nents, dir, attrs);
  debug_dma_map_sg(dev, sg, nents, ents, (int )dir);
  return (ents);
}
}
 static void dma_unmap_sg_attrs(struct device *dev , struct scatterlist *sg ,
                                        int nents , enum dma_data_direction dir ,
                                        struct dma_attrs *attrs ) 
{ struct dma_map_ops *ops ;
  struct dma_map_ops *tmp ;
  int tmp___0 ;
  long tmp___1 ;

  {
  tmp = get_dma_ops(dev);
  ops = tmp;
  tmp___0 = valid_dma_direction((int )dir);
  tmp___1 = ldv__builtin_expect(tmp___0 == 0, 0L);
  if (tmp___1 != 0L) {
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/asm-generic/dma-mapping-common.h"),
                         "i" (65), "i" (12UL));
    ldv_22276: ;
    goto ldv_22276;
  }
  debug_dma_unmap_sg(dev, sg, nents, (int )dir);
  if ((unsigned long )ops->unmap_sg != (unsigned long )((void (*)(struct device * ,
                                                                  struct scatterlist * ,
                                                                  int  , enum dma_data_direction  ,
                                                                  struct dma_attrs * ))0)) {
    (*(ops->unmap_sg))(dev, sg, nents, dir, attrs);
  }
  return;
}
}
 static dma_addr_t dma_map_page(struct device *dev , struct page *page , size_t offset ,
                                        size_t size , enum dma_data_direction dir ) 
{ struct dma_map_ops *ops ;
  struct dma_map_ops *tmp ;
  dma_addr_t addr ;
  void *tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;

  {
  tmp = get_dma_ops(dev);
  ops = tmp;
  tmp___0 = lowmem_page_address((struct page  const  *)page);
  kmemcheck_mark_initialized(tmp___0 + offset, (unsigned int )size);
  tmp___1 = valid_dma_direction((int )dir);
  tmp___2 = ldv__builtin_expect(tmp___1 == 0, 0L);
  if (tmp___2 != 0L) {
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/asm-generic/dma-mapping-common.h"),
                         "i" (79), "i" (12UL));
    ldv_22286: ;
    goto ldv_22286;
  }
  addr = (*(ops->map_page))(dev, page, offset, size, dir, 0);
  debug_dma_map_page(dev, page, offset, size, (int )dir, addr, 0);
  return (addr);
}
}
 static void dma_unmap_page(struct device *dev , dma_addr_t addr , size_t size ,
                                    enum dma_data_direction dir ) 
{ struct dma_map_ops *ops ;
  struct dma_map_ops *tmp ;
  int tmp___0 ;
  long tmp___1 ;

  {
  tmp = get_dma_ops(dev);
  ops = tmp;
  tmp___0 = valid_dma_direction((int )dir);
  tmp___1 = ldv__builtin_expect(tmp___0 == 0, 0L);
  if (tmp___1 != 0L) {
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/asm-generic/dma-mapping-common.h"),
                         "i" (91), "i" (12UL));
    ldv_22294: ;
    goto ldv_22294;
  }
  if ((unsigned long )ops->unmap_page != (unsigned long )((void (*)(struct device * ,
                                                                    dma_addr_t  ,
                                                                    size_t  , enum dma_data_direction  ,
                                                                    struct dma_attrs * ))0)) {
    (*(ops->unmap_page))(dev, addr, size, dir, 0);
  }
  debug_dma_unmap_page(dev, addr, size, (int )dir, 0);
  return;
}
}
 static int dma_mapping_error(struct device *dev , dma_addr_t dma_addr ) 
{ struct dma_map_ops *ops ;
  struct dma_map_ops *tmp ;
  int tmp___0 ;

  {
  tmp = get_dma_ops(dev);
  ops = tmp;
  debug_dma_mapping_error(dev, dma_addr);
  if ((unsigned long )ops->mapping_error != (unsigned long )((int (*)(struct device * ,
                                                                      dma_addr_t  ))0)) {
    tmp___0 = (*(ops->mapping_error))(dev, dma_addr);
    return (tmp___0);
  }
  return (dma_addr == 0ULL);
}
}
 static u64 get_unaligned_le64(void const   *p ) 
{ __u64 tmp ;

  {
  tmp = __le64_to_cpup((__le64 const   *)p);
  return (tmp);
}
}
 static void put_unaligned_le16(u16 val , void *p ) 
{ 

  {
  *((__le16 *)p) = val;
  return;
}
}
 static void put_unaligned_le32(u32 val , void *p ) 
{ 

  {
  *((__le32 *)p) = val;
  return;
}
}
 static void put_unaligned_le64(u64 val , void *p ) 
{ 

  {
  *((__le64 *)p) = val;
  return;
}
}
extern void __bad_unaligned_access_size(void) ;
 static void *platform_get_drvdata(struct platform_device  const  *pdev ) 
{ void *tmp ;

  {
  tmp = dev_get_drvdata(& pdev->dev);
  return (tmp);
}
}
extern struct workqueue_struct *pm_wq ;
 static void pm_runtime_put_noidle(struct device *dev ) 
{ 

  {
  atomic_add_unless(& dev->power.usage_count, -1, 0);
  return;
}
}
 static int usb_endpoint_num(struct usb_endpoint_descriptor  const  *epd ) 
{ 

  {
  return ((int )epd->bEndpointAddress & 15);
}
}
 static int usb_endpoint_type(struct usb_endpoint_descriptor  const  *epd ) 
{ 

  {
  return ((int )epd->bmAttributes & 3);
}
}
 static int usb_endpoint_dir_out(struct usb_endpoint_descriptor  const  *epd ) 
{ 

  {
  return ((int )((signed char )epd->bEndpointAddress) >= 0);
}
}
 static int usb_endpoint_xfer_bulk(struct usb_endpoint_descriptor  const  *epd ) 
{ 

  {
  return (((int )epd->bmAttributes & 3) == 2);
}
}
 static int usb_endpoint_xfer_control(struct usb_endpoint_descriptor  const  *epd ) 
{ 

  {
  return (((int )epd->bmAttributes & 3) == 0);
}
}
 static int usb_endpoint_xfer_isoc(struct usb_endpoint_descriptor  const  *epd ) 
{ 

  {
  return (((int )epd->bmAttributes & 3) == 1);
}
}
extern void usleep_range(unsigned long  , unsigned long  ) ;
extern int request_threaded_irq(unsigned int  , irqreturn_t (*)(int  , void * ) ,
                                irqreturn_t (*)(int  , void * ) , unsigned long  ,
                                char const   * , void * ) ;
 static int request_irq(unsigned int irq , irqreturn_t (*handler)(int  , void * ) ,
                                unsigned long flags , char const   *name , void *dev ) 
{ int tmp ;

  {
  tmp = request_threaded_irq(irq, handler, 0, flags, name, dev);
  return (tmp);
}
}
extern void free_irq(unsigned int  , void * ) ;
int usb_alloc_streams(struct usb_interface *interface , struct usb_host_endpoint **eps ,
                      unsigned int num_eps , unsigned int num_streams , gfp_t mem_flags ) ;
void usb_free_streams(struct usb_interface *interface , struct usb_host_endpoint **eps ,
                      unsigned int num_eps , gfp_t mem_flags ) ;
struct urb *usb_get_urb(struct urb *urb ) ;
void usb_unanchor_urb(struct urb *urb ) ;
 static int usb_urb_dir_in(struct urb *urb ) 
{ 

  {
  return ((urb->transfer_flags & 512U) != 0U);
}
}
int usb_hcd_link_urb_to_ep(struct usb_hcd *hcd , struct urb *urb ) ;
int usb_hcd_check_unlink_urb(struct usb_hcd *hcd , struct urb *urb , int status ) ;
void usb_hcd_unlink_urb_from_ep(struct usb_hcd *hcd , struct urb *urb ) ;
int usb_hcd_submit_urb(struct urb *urb , gfp_t mem_flags ) ;
int usb_hcd_unlink_urb(struct urb *urb , int status ) ;
void usb_hcd_giveback_urb(struct usb_hcd *hcd , struct urb *urb , int status ) ;
int usb_hcd_map_urb_for_dma(struct usb_hcd *hcd , struct urb *urb , gfp_t mem_flags ) ;
void usb_hcd_unmap_urb_setup_for_dma(struct usb_hcd *hcd , struct urb *urb ) ;
void usb_hcd_unmap_urb_for_dma(struct usb_hcd *hcd , struct urb *urb ) ;
void usb_hcd_flush_endpoint(struct usb_device *udev , struct usb_host_endpoint *ep ) ;
void usb_hcd_disable_endpoint(struct usb_device *udev , struct usb_host_endpoint *ep ) ;
void usb_hcd_reset_endpoint(struct usb_device *udev , struct usb_host_endpoint *ep ) ;
struct usb_hcd *usb_create_hcd(struct hc_driver  const  *driver , struct device *dev ,
                               char const   *bus_name ) ;
struct usb_hcd *usb_create_shared_hcd(struct hc_driver  const  *driver , struct device *dev ,
                                      char const   *bus_name , struct usb_hcd *primary_hcd ) ;
int usb_hcd_is_primary_hcd(struct usb_hcd *hcd ) ;
int usb_add_hcd(struct usb_hcd *hcd , unsigned int irqnum , unsigned long irqflags ) ;
void usb_remove_hcd(struct usb_hcd *hcd ) ;
int usb_hcd_find_raw_port_number(struct usb_hcd *hcd , int port1 ) ;
void usb_hcd_platform_shutdown(struct platform_device *dev ) ;
int hcd_buffer_create(struct usb_hcd *hcd ) ;
void hcd_buffer_destroy(struct usb_hcd *hcd ) ;
irqreturn_t usb_hcd_irq(int irq , void *__hcd ) ;
void usb_hc_died(struct usb_hcd *hcd ) ;
void usb_hcd_poll_rh_status(struct usb_hcd *hcd ) ;
void usb_hcd_start_port_resume(struct usb_bus *bus , int portnum ) ;
void usb_hcd_end_port_resume(struct usb_bus *bus , int portnum ) ;
long usb_calc_bus_time(int speed , int is_input , int isoc , int bytecount ) ;
struct list_head usb_bus_list ;
struct mutex usb_bus_list_lock ;
wait_queue_head_t usb_kill_urb_queue ;
int hcd_bus_suspend(struct usb_device *rhdev , pm_message_t msg ) ;
int hcd_bus_resume(struct usb_device *rhdev , pm_message_t msg ) ;
void usb_hcd_resume_root_hub(struct usb_hcd *hcd ) ;
struct usb_mon_operations *mon_ops  ;
 static void usbmon_urb_submit(struct usb_bus *bus , struct urb *urb ) 
{ 

  {
  if (bus->monitored != 0) {
    (*(mon_ops->urb_submit))(bus, urb);
  }
  return;
}
}
 static void usbmon_urb_submit_error(struct usb_bus *bus , struct urb *urb ,
                                             int error ) 
{ 

  {
  if (bus->monitored != 0) {
    (*(mon_ops->urb_submit_error))(bus, urb, error);
  }
  return;
}
}
 static void usbmon_urb_complete(struct usb_bus *bus , struct urb *urb , int status ) 
{ 

  {
  if (bus->monitored != 0) {
    (*(mon_ops->urb_complete))(bus, urb, status);
  }
  return;
}
}
int usb_mon_register(struct usb_mon_operations *ops ) ;
void usb_mon_deregister(void) ;
unsigned long usb_hcds_loaded  ;
void usb_notify_add_bus(struct usb_bus *ubus ) ;
void usb_notify_remove_bus(struct usb_bus *ubus ) ;
struct list_head usb_bus_list  =    {& usb_bus_list, & usb_bus_list};
static struct usb_busmap busmap  ;
struct mutex usb_bus_list_lock  =    {{1}, {{{{{0U}}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "usb_bus_list_lock.wait_lock",
                                                                     0, 0UL}}}}, {& usb_bus_list_lock.wait_list,
                                                                                  & usb_bus_list_lock.wait_list},
    0, 0, (void *)(& usb_bus_list_lock), {0, {0, 0}, "usb_bus_list_lock", 0, 0UL}};
static spinlock_t hcd_root_hub_lock  =    {{{{{0U}},
      3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "hcd_root_hub_lock",
                                                       0, 0UL}}}};
static spinlock_t hcd_urb_list_lock  =    {{{{{0U}}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "hcd_urb_list_lock",
                                                               0, 0UL}}}};
static spinlock_t hcd_urb_unlink_lock  =    {{{{{0U}}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "hcd_urb_unlink_lock",
                                                               0, 0UL}}}};
wait_queue_head_t usb_kill_urb_queue  =    {{{{{{0U}}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "usb_kill_urb_queue.lock",
                                                                0, 0UL}}}}, {& usb_kill_urb_queue.task_list,
                                                                             & usb_kill_urb_queue.task_list}};
 static int is_root_hub(struct usb_device *udev ) 
{ 

  {
  return ((unsigned long )udev->parent == (unsigned long )((struct usb_device *)0));
}
}
static u8 const   usb3_rh_dev_descriptor[18U]  = 
  {      18U,      1U,      0U,      3U, 
        9U,      0U,      3U,      9U, 
        107U,      29U,      3U,      0U, 
        16U,      3U,      3U,      2U, 
        1U,      1U};
static u8 const   usb2_rh_dev_descriptor[18U]  = 
  {      18U,      1U,      0U,      2U, 
        9U,      0U,      0U,      64U, 
        107U,      29U,      2U,      0U, 
        16U,      3U,      3U,      2U, 
        1U,      1U};
static u8 const   usb11_rh_dev_descriptor[18U]  = 
  {      18U,      1U,      16U,      1U, 
        9U,      0U,      0U,      64U, 
        107U,      29U,      1U,      0U, 
        16U,      3U,      3U,      2U, 
        1U,      1U};
static u8 const   fs_rh_config_descriptor[25U]  = 
  {      9U,      2U,      25U,      0U, 
        1U,      1U,      0U,      192U, 
        0U,      9U,      4U,      0U, 
        0U,      1U,      9U,      0U, 
        0U,      0U,      7U,      5U, 
        129U,      3U,      2U,      0U, 
        255U};
static u8 const   hs_rh_config_descriptor[25U]  = 
  {      9U,      2U,      25U,      0U, 
        1U,      1U,      0U,      192U, 
        0U,      9U,      4U,      0U, 
        0U,      1U,      9U,      0U, 
        0U,      0U,      7U,      5U, 
        129U,      3U,      4U,      0U, 
        12U};
static u8 const   ss_rh_config_descriptor[31U]  = 
  {      9U,      2U,      31U,      0U, 
        1U,      1U,      0U,      192U, 
        0U,      9U,      4U,      0U, 
        0U,      1U,      9U,      0U, 
        0U,      0U,      7U,      5U, 
        129U,      3U,      4U,      0U, 
        12U,      6U,      48U,      0U, 
        0U,      2U,      0U};
static int authorized_default  =    -1;
static unsigned int ascii2desc(char const   *s , u8 *buf , unsigned int len ) 
{ unsigned int n ;
  unsigned int t ;
  size_t tmp ;
  u8 *tmp___0 ;
  unsigned int tmp___1 ;
  u8 *tmp___2 ;
  char const   *tmp___3 ;
  unsigned int tmp___4 ;

  {
  tmp = strlen(s);
  t = (unsigned int )(tmp + 1UL) * 2U;
  if (t > 254U) {
    t = 254U;
  }
  if (len > t) {
    len = t;
  }
  t += 768U;
  n = len;
  goto ldv_32591;
  ldv_32590: 
  tmp___0 = buf;
  buf ++;
  *tmp___0 = (u8 )t;
  tmp___1 = n;
  n --;
  if (tmp___1 == 0U) {
    goto ldv_32589;
  }
  tmp___2 = buf;
  buf ++;
  *tmp___2 = (u8 )(t >> 8);
  tmp___3 = s;
  s ++;
  t = (unsigned int )((unsigned char )*tmp___3);
  ldv_32591: 
  tmp___4 = n;
  n --;
  if (tmp___4 != 0U) {
    goto ldv_32590;
  }
  ldv_32589: ;
  return (len);
}
}
static unsigned int rh_string(int id , struct usb_hcd  const  *hcd , u8 *data , unsigned int len ) 
{ char buf[100U] ;
  char const   *s ;
  char langids[4U] ;
  size_t __len ;
  void *__ret ;
  struct new_utsname *tmp ;
  struct new_utsname *tmp___0 ;
  unsigned int tmp___1 ;

  {
  langids[0] = 4;
  langids[1] = 3;
  langids[2] = 9;
  langids[3] = 4;
  switch (id) {
  case 0: ;
  if (len > 4U) {
    len = 4U;
  }
  __len = (size_t )len;
  __ret = __builtin_memcpy((void *)data, (void const   *)(& langids), __len);
  return (len);
  case 1: 
  s = hcd->self.bus_name;
  goto ldv_32606;
  case 2: 
  s = hcd->product_desc;
  goto ldv_32606;
  case 3: 
  tmp = init_utsname();
  tmp___0 = init_utsname();
  snprintf((char *)(& buf), 100UL, "%s %s %s", (char *)(& tmp___0->sysname), (char *)(& tmp->release),
           (hcd->driver)->description);
  s = (char const   *)(& buf);
  goto ldv_32606;
  default: ;
  return (0U);
  }
  ldv_32606: 
  tmp___1 = ascii2desc(s, data, len);
  return (tmp___1);
}
}
static int rh_call_control(struct usb_hcd *hcd , struct urb *urb ) 
{ struct usb_ctrlrequest *cmd ;
  u16 typeReq ;
  u16 wValue ;
  u16 wIndex ;
  u16 wLength ;
  u8 *ubuf ;
  u8 tbuf[15U] ;
  u8 const   *bufp ;
  unsigned int len ;
  int status ;
  u8 patch_wakeup ;
  u8 patch_protocol ;
  bool tmp ;
  bool tmp___0 ;
  bool tmp___1 ;
  struct _ddebug descriptor ;
  long tmp___2 ;
  struct _ddebug descriptor___0 ;
  long tmp___3 ;
  struct _ddebug descriptor___1 ;
  long tmp___4 ;
  size_t __len ;
  void *__ret ;

  {
  ubuf = (u8 *)urb->transfer_buffer;
  bufp = (u8 const   *)(& tbuf);
  len = 0U;
  patch_wakeup = 0U;
  patch_protocol = 0U;
  __might_sleep("/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hcd.c.prepared",
                530, 0);
  spin_lock_irq(& hcd_root_hub_lock);
  status = usb_hcd_link_urb_to_ep(hcd, urb);
  spin_unlock_irq(& hcd_root_hub_lock);
  if (status != 0) {
    return (status);
  }
  urb->hcpriv = (void *)hcd;
  cmd = (struct usb_ctrlrequest *)urb->setup_packet;
  typeReq = (u16 )((int )((short )((int )cmd->bRequestType << 8)) | (int )((short )cmd->bRequest));
  wValue = cmd->wValue;
  wIndex = cmd->wIndex;
  wLength = cmd->wLength;
  if ((u32 )wLength > urb->transfer_buffer_length) {
    goto error;
  }
  urb->actual_length = 0U;
  switch ((int )typeReq) {
  case 32768: 
  tmp = device_may_wakeup(& (hcd->self.root_hub)->dev);
  tbuf[0] = (u8 )((int )((signed char )((int )tmp << 1)) | 1);
  tbuf[1] = 0U;
  len = 2U;
  goto ldv_32628;
  case 1: ;
  if ((unsigned int )wValue == 1U) {
    device_set_wakeup_enable(& (hcd->self.root_hub)->dev, 0);
  } else {
    goto error;
  }
  goto ldv_32628;
  case 3: 
  tmp___0 = device_can_wakeup(& (hcd->self.root_hub)->dev);
  if ((int )tmp___0 && (unsigned int )wValue == 1U) {
    device_set_wakeup_enable(& (hcd->self.root_hub)->dev, 1);
  } else {
    goto error;
  }
  goto ldv_32628;
  case 32776: 
  tbuf[0] = 1U;
  len = 1U;
  case 9: ;
  goto ldv_32628;
  case 32774: ;
  switch ((int )wValue & 65280) {
  case 256: ;
  switch (hcd->speed) {
  case 64: 
  bufp = (u8 const   *)(& usb3_rh_dev_descriptor);
  goto ldv_32636;
  case 32: 
  bufp = (u8 const   *)(& usb2_rh_dev_descriptor);
  goto ldv_32636;
  case 16: 
  bufp = (u8 const   *)(& usb11_rh_dev_descriptor);
  goto ldv_32636;
  default: ;
  goto error;
  }
  ldv_32636: 
  len = 18U;
  if ((unsigned int )*((unsigned char *)hcd + 408UL) != 0U) {
    patch_protocol = 1U;
  }
  goto ldv_32640;
  case 512: ;
  switch (hcd->speed) {
  case 64: 
  bufp = (u8 const   *)(& ss_rh_config_descriptor);
  len = 31U;
  goto ldv_32643;
  case 32: 
  bufp = (u8 const   *)(& hs_rh_config_descriptor);
  len = 25U;
  goto ldv_32643;
  case 16: 
  bufp = (u8 const   *)(& fs_rh_config_descriptor);
  len = 25U;
  goto ldv_32643;
  default: ;
  goto error;
  }
  ldv_32643: 
  tmp___1 = device_can_wakeup(& (hcd->self.root_hub)->dev);
  if ((int )tmp___1) {
    patch_wakeup = 1U;
  }
  goto ldv_32640;
  case 768: ;
  if (((int )wValue & 255) <= 3) {
    urb->actual_length = rh_string((int )wValue & 255, (struct usb_hcd  const  *)hcd,
                                   ubuf, (unsigned int )wLength);
  } else {
    goto error;
  }
  goto ldv_32640;
  case 3840: ;
  goto nongeneric;
  default: ;
  goto error;
  }
  ldv_32640: ;
  goto ldv_32628;
  case 32778: 
  tbuf[0] = 0U;
  len = 1U;
  case 11: ;
  goto ldv_32628;
  case 5: 
  descriptor.modname = "usbcore";
  descriptor.function = "rh_call_control";
  descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hcd.c.prepared";
  descriptor.format = "root hub device address %d\n";
  descriptor.lineno = 657U;
  descriptor.flags = 1U;
  tmp___2 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
  if (tmp___2 != 0L) {
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)hcd->self.controller,
                      "root hub device address %d\n", (int )wValue);
  }
  goto ldv_32628;
  case 33024: 
  tbuf[0] = 0U;
  tbuf[1] = 0U;
  len = 2U;
  case 257: ;
  case 259: 
  descriptor___0.modname = "usbcore";
  descriptor___0.function = "rh_call_control";
  descriptor___0.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hcd.c.prepared";
  descriptor___0.format = "no endpoint features yet\n";
  descriptor___0.lineno = 672U;
  descriptor___0.flags = 1U;
  tmp___3 = ldv__builtin_expect((long )descriptor___0.flags & 1L, 0L);
  if (tmp___3 != 0L) {
    __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)hcd->self.controller,
                      "no endpoint features yet\n");
  }
  goto ldv_32628;
  default: ;
  nongeneric: ;
  switch ((int )typeReq) {
  case 40960: ;
  case 41728: 
  len = 4U;
  goto ldv_32663;
  case 40966: 
  len = 15U;
  goto ldv_32663;
  case 32774: ;
  goto ldv_32663;
  }
  ldv_32663: 
  status = (*((hcd->driver)->hub_control))(hcd, (int )typeReq, (int )wValue, (int )wIndex,
                                           (char *)(& tbuf), (int )wLength);
  if ((unsigned int )typeReq == 40966U) {
    usb_hub_adjust_deviceremovable(hcd->self.root_hub, (struct usb_hub_descriptor *)(& tbuf));
  }
  goto ldv_32628;
  error: 
  status = -32;
  }
  ldv_32628: ;
  if (status < 0) {
    len = 0U;
    if (status != -32) {
      descriptor___1.modname = "usbcore";
      descriptor___1.function = "rh_call_control";
      descriptor___1.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hcd.c.prepared";
      descriptor___1.format = "CTRL: TypeReq=0x%x val=0x%x idx=0x%x len=%d ==> %d\n";
      descriptor___1.lineno = 712U;
      descriptor___1.flags = 1U;
      tmp___4 = ldv__builtin_expect((long )descriptor___1.flags & 1L, 0L);
      if (tmp___4 != 0L) {
        __dynamic_dev_dbg(& descriptor___1, (struct device  const  *)hcd->self.controller,
                          "CTRL: TypeReq=0x%x val=0x%x idx=0x%x len=%d ==> %d\n",
                          (int )typeReq, (int )wValue, (int )wIndex, (int )wLength,
                          status);
      }
    }
  } else
  if (status > 0) {
    len = (unsigned int )status;
    status = 0;
  }
  if (len != 0U) {
    if (urb->transfer_buffer_length < len) {
      len = urb->transfer_buffer_length;
    }
    urb->actual_length = len;
    __len = (size_t )len;
    __ret = __builtin_memcpy((void *)ubuf, (void const   *)bufp, __len);
    if ((unsigned int )patch_wakeup != 0U && len > 7U) {
      ((struct usb_config_descriptor *)ubuf)->bmAttributes = (__u8 )((unsigned int )((struct usb_config_descriptor *)ubuf)->bmAttributes | 32U);
    }
    if ((unsigned int )patch_protocol != 0U && len > 6U) {
      ((struct usb_device_descriptor *)ubuf)->bDeviceProtocol = 1U;
    }
  }
  spin_lock_irq(& hcd_root_hub_lock);
  usb_hcd_unlink_urb_from_ep(hcd, urb);
  spin_unlock(& hcd_root_hub_lock);
  usb_hcd_giveback_urb(hcd, urb, status);
  spin_lock(& hcd_root_hub_lock);
  spin_unlock_irq(& hcd_root_hub_lock);
  return (0);
}
}
void usb_hcd_poll_rh_status(struct usb_hcd *hcd ) 
{ struct urb *urb ;
  int length ;
  unsigned long flags ;
  char buffer[6U] ;
  long tmp ;
  raw_spinlock_t *tmp___0 ;
  size_t __len ;
  void *__ret ;
  int tmp___1 ;

  {
  tmp = ldv__builtin_expect((unsigned int )*((unsigned char *)hcd + 408UL) == 0U,
                            0L);
  if (tmp != 0L) {
    return;
  }
  if ((unsigned int )*((unsigned char *)hcd + 408UL) == 0U && (unsigned long )hcd->status_urb == (unsigned long )((struct urb *)0)) {
    return;
  }
  length = (*((hcd->driver)->hub_status_data))(hcd, (char *)(& buffer));
  if (length > 0) {
    tmp___0 = spinlock_check(& hcd_root_hub_lock);
    flags = _raw_spin_lock_irqsave(tmp___0);
    urb = hcd->status_urb;
    if ((unsigned long )urb != (unsigned long )((struct urb *)0)) {
      clear_bit(3, (unsigned long volatile   *)(& hcd->flags));
      hcd->status_urb = 0;
      urb->actual_length = (u32 )length;
      __len = (size_t )length;
      __ret = __builtin_memcpy(urb->transfer_buffer, (void const   *)(& buffer), __len);
      usb_hcd_unlink_urb_from_ep(hcd, urb);
      spin_unlock(& hcd_root_hub_lock);
      usb_hcd_giveback_urb(hcd, urb, 0);
      spin_lock(& hcd_root_hub_lock);
    } else {
      length = 0;
      set_bit(3U, (unsigned long volatile   *)(& hcd->flags));
    }
    spin_unlock_irqrestore(& hcd_root_hub_lock, flags);
  }
  if ((unsigned int )*((unsigned char *)hcd + 408UL) != 0U) {
    tmp___1 = (hcd->flags & 4UL) != 0UL;
  } else {
    tmp___1 = (length == 0 && (unsigned long )hcd->status_urb != (unsigned long )((struct urb *)0)) != 0;
  }
  if (tmp___1) {
    mod_timer(& hcd->rh_timer, ((unsigned long )jiffies / 62UL + 1UL) * 62UL);
  }
  return;
}
}
static void rh_timer_func(unsigned long _hcd ) 
{ 

  {
  usb_hcd_poll_rh_status((struct usb_hcd *)_hcd);
  return;
}
}
static int rh_queue_status(struct usb_hcd *hcd , struct urb *urb ) 
{ int retval ;
  unsigned long flags ;
  unsigned int len ;
  raw_spinlock_t *tmp ;
  struct _ddebug descriptor ;
  long tmp___0 ;

  {
  len = (unsigned int )((urb->dev)->maxchild / 8 + 1);
  tmp = spinlock_check(& hcd_root_hub_lock);
  flags = _raw_spin_lock_irqsave(tmp);
  if ((unsigned long )hcd->status_urb != (unsigned long )((struct urb *)0) || urb->transfer_buffer_length < len) {
    descriptor.modname = "usbcore";
    descriptor.function = "rh_queue_status";
    descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hcd.c.prepared";
    descriptor.format = "not queuing rh status urb\n";
    descriptor.lineno = 828U;
    descriptor.flags = 1U;
    tmp___0 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
    if (tmp___0 != 0L) {
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)hcd->self.controller,
                        "not queuing rh status urb\n");
    }
    retval = -22;
    goto done;
  }
  retval = usb_hcd_link_urb_to_ep(hcd, urb);
  if (retval != 0) {
    goto done;
  }
  hcd->status_urb = urb;
  urb->hcpriv = (void *)hcd;
  if ((unsigned int )*((unsigned char *)hcd + 408UL) == 0U) {
    mod_timer(& hcd->rh_timer, ((unsigned long )jiffies / 62UL + 1UL) * 62UL);
  } else
  if ((hcd->flags & 8UL) != 0UL) {
    mod_timer(& hcd->rh_timer, jiffies);
  }
  retval = 0;
  done: 
  spin_unlock_irqrestore(& hcd_root_hub_lock, flags);
  return (retval);
}
}
static int rh_urb_enqueue(struct usb_hcd *hcd , struct urb *urb ) 
{ int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
  tmp___0 = usb_endpoint_xfer_int((struct usb_endpoint_descriptor  const  *)(& (urb->ep)->desc));
  if (tmp___0 != 0) {
    tmp = rh_queue_status(hcd, urb);
    return (tmp);
  }
  tmp___2 = usb_endpoint_xfer_control((struct usb_endpoint_descriptor  const  *)(& (urb->ep)->desc));
  if (tmp___2 != 0) {
    tmp___1 = rh_call_control(hcd, urb);
    return (tmp___1);
  }
  return (-22);
}
}
static int usb_rh_urb_dequeue(struct usb_hcd *hcd , struct urb *urb , int status ) 
{ unsigned long flags ;
  int rc ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;

  {
  tmp = spinlock_check(& hcd_root_hub_lock);
  flags = _raw_spin_lock_irqsave(tmp);
  rc = usb_hcd_check_unlink_urb(hcd, urb, status);
  if (rc != 0) {
    goto done;
  }
  tmp___0 = usb_endpoint_num((struct usb_endpoint_descriptor  const  *)(& (urb->ep)->desc));
  if (! (tmp___0 == 0)) {
    if ((unsigned int )*((unsigned char *)hcd + 408UL) == 0U) {
      del_timer(& hcd->rh_timer);
    }
    if ((unsigned long )hcd->status_urb == (unsigned long )urb) {
      hcd->status_urb = 0;
      usb_hcd_unlink_urb_from_ep(hcd, urb);
      spin_unlock(& hcd_root_hub_lock);
      usb_hcd_giveback_urb(hcd, urb, status);
      spin_lock(& hcd_root_hub_lock);
    }
  }
  done: 
  spin_unlock_irqrestore(& hcd_root_hub_lock, flags);
  return (rc);
}
}
static ssize_t usb_host_authorized_default_show(struct device *dev , struct device_attribute *attr ,
                                                char *buf ) 
{ struct usb_device *rh_usb_dev ;
  struct device  const  *__mptr ;
  struct usb_bus *usb_bus ;
  struct usb_hcd *usb_hcd ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  rh_usb_dev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  usb_bus = rh_usb_dev->bus;
  if ((unsigned long )usb_bus == (unsigned long )((struct usb_bus *)0)) {
    return (-19L);
  }
  usb_hcd = bus_to_hcd(usb_bus);
  tmp = snprintf(buf, 4096UL, "%u\n", (int )usb_hcd->authorized_default);
  return ((ssize_t )tmp);
}
}
static ssize_t usb_host_authorized_default_store(struct device *dev , struct device_attribute *attr ,
                                                 char const   *buf , size_t size ) 
{ ssize_t result ;
  unsigned int val ;
  struct usb_device *rh_usb_dev ;
  struct device  const  *__mptr ;
  struct usb_bus *usb_bus ;
  struct usb_hcd *usb_hcd ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  rh_usb_dev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  usb_bus = rh_usb_dev->bus;
  if ((unsigned long )usb_bus == (unsigned long )((struct usb_bus *)0)) {
    return (-19L);
  }
  usb_hcd = bus_to_hcd(usb_bus);
  tmp = sscanf(buf, "%u\n", & val);
  result = (ssize_t )tmp;
  if (result == 1L) {
    usb_hcd->authorized_default = val != 0U;
    result = (ssize_t )size;
  } else {
    result = -22L;
  }
  return (result);
}
}
static struct device_attribute dev_attr_authorized_default  =    {{"authorized_default", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                                {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & usb_host_authorized_default_show, & usb_host_authorized_default_store};
static struct attribute *usb_bus_attrs[2U]  = {      & dev_attr_authorized_default.attr,      0};
static struct attribute_group usb_bus_attr_group  =    {0, 0, (struct attribute **)(& usb_bus_attrs)};
static void usb_bus_init(struct usb_bus *bus ) 
{ 

  {
  memset((void *)(& bus->devmap), 0, 16UL);
  bus->devnum_next = 1;
  bus->root_hub = 0;
  bus->busnum = -1;
  bus->bandwidth_allocated = 0;
  bus->bandwidth_int_reqs = 0;
  bus->bandwidth_isoc_reqs = 0;
  INIT_LIST_HEAD(& bus->bus_list);
  return;
}
}
static int usb_register_bus(struct usb_bus *bus ) 
{ int result ;
  int busnum ;
  unsigned long tmp ;

  {
  result = -7;
  ldv_mutex_lock_54(& usb_bus_list_lock);
  tmp = find_next_zero_bit((unsigned long const   *)(& busmap.busmap), 64UL, 1UL);
  busnum = (int )tmp;
  if (busnum > 63) {
    printk("\v%s: too many buses\n", usbcore_name);
    goto error_find_busnum;
  }
  set_bit((unsigned int )busnum, (unsigned long volatile   *)(& busmap.busmap));
  bus->busnum = busnum;
  list_add(& bus->bus_list, & usb_bus_list);
  ldv_mutex_unlock_55(& usb_bus_list_lock);
  usb_notify_add_bus(bus);
  _dev_info((struct device  const  *)bus->controller, "new USB bus registered, assigned bus number %d\n",
            bus->busnum);
  return (0);
  error_find_busnum: 
  ldv_mutex_unlock_56(& usb_bus_list_lock);
  return (result);
}
}
static void usb_deregister_bus(struct usb_bus *bus ) 
{ 

  {
  _dev_info((struct device  const  *)bus->controller, "USB bus %d deregistered\n",
            bus->busnum);
  ldv_mutex_lock_57(& usb_bus_list_lock);
  list_del(& bus->bus_list);
  ldv_mutex_unlock_58(& usb_bus_list_lock);
  usb_notify_remove_bus(bus);
  clear_bit(bus->busnum, (unsigned long volatile   *)(& busmap.busmap));
  return;
}
}
static int register_root_hub(struct usb_hcd *hcd ) 
{ struct device *parent_dev ;
  struct usb_device *usb_dev ;
  int devnum ;
  int retval ;
  struct _ddebug descriptor ;
  char const   *tmp ;
  long tmp___0 ;
  struct _ddebug descriptor___0 ;
  char const   *tmp___1 ;
  long tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;

  {
  parent_dev = hcd->self.controller;
  usb_dev = hcd->self.root_hub;
  devnum = 1;
  usb_dev->devnum = devnum;
  (usb_dev->bus)->devnum_next = devnum + 1;
  memset((void *)(& (usb_dev->bus)->devmap.devicemap), 0, 16UL);
  set_bit((unsigned int )devnum, (unsigned long volatile   *)(& (usb_dev->bus)->devmap.devicemap));
  usb_set_device_state(usb_dev, 6);
  ldv_mutex_lock_59(& usb_bus_list_lock);
  usb_dev->ep0.desc.wMaxPacketSize = 64U;
  retval = usb_get_device_descriptor(usb_dev, 18U);
  if (retval != 18) {
    ldv_mutex_unlock_60(& usb_bus_list_lock);
    descriptor.modname = "usbcore";
    descriptor.function = "register_root_hub";
    descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hcd.c.prepared";
    descriptor.format = "can\'t read %s device descriptor %d\n";
    descriptor.lineno = 1074U;
    descriptor.flags = 1U;
    tmp___0 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
    if (tmp___0 != 0L) {
      tmp = dev_name((struct device  const  *)(& usb_dev->dev));
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)parent_dev, "can\'t read %s device descriptor %d\n",
                        tmp, retval);
    }
    if (retval < 0) {
      tmp___4 = retval;
    } else {
      tmp___4 = -90;
    }
    return (tmp___4);
  }
  if ((unsigned int )usb_dev->speed == 5U) {
    retval = usb_get_bos_descriptor(usb_dev);
    if (retval < 0) {
      ldv_mutex_unlock_61(& usb_bus_list_lock);
      descriptor___0.modname = "usbcore";
      descriptor___0.function = "register_root_hub";
      descriptor___0.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hcd.c.prepared";
      descriptor___0.format = "can\'t read %s bos descriptor %d\n";
      descriptor___0.lineno = 1082U;
      descriptor___0.flags = 1U;
      tmp___2 = ldv__builtin_expect((long )descriptor___0.flags & 1L, 0L);
      if (tmp___2 != 0L) {
        tmp___1 = dev_name((struct device  const  *)(& usb_dev->dev));
        __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)parent_dev, "can\'t read %s bos descriptor %d\n",
                          tmp___1, retval);
      }
      return (retval);
    }
  }
  retval = usb_new_device(usb_dev);
  if (retval != 0) {
    tmp___3 = dev_name((struct device  const  *)(& usb_dev->dev));
    dev_err((struct device  const  *)parent_dev, "can\'t register root hub for %s, %d\n",
            tmp___3, retval);
  } else {
    spin_lock_irq(& hcd_root_hub_lock);
    hcd->rh_registered = 1U;
    spin_unlock_irq(& hcd_root_hub_lock);
    if ((hcd->flags & 64UL) != 0UL) {
      usb_hc_died(hcd);
    }
  }
  ldv_mutex_unlock_62(& usb_bus_list_lock);
  return (retval);
}
}
void usb_hcd_start_port_resume(struct usb_bus *bus , int portnum ) 
{ unsigned int bit ;

  {
  bit = (unsigned int )(1 << portnum);
  if ((bus->resuming_ports & bit) == 0U) {
    bus->resuming_ports |= bit;
    pm_runtime_get_noresume(& (bus->root_hub)->dev);
  }
  return;
}
}
void usb_hcd_end_port_resume(struct usb_bus *bus , int portnum ) 
{ unsigned int bit ;

  {
  bit = (unsigned int )(1 << portnum);
  if ((bus->resuming_ports & bit) != 0U) {
    bus->resuming_ports &= ~ bit;
    pm_runtime_put_noidle(& (bus->root_hub)->dev);
  }
  return;
}
}
long usb_calc_bus_time(int speed , int is_input , int isoc , int bytecount ) 
{ unsigned long tmp ;
  struct _ddebug descriptor ;
  long tmp___0 ;
  unsigned long tmp___1 ;

  {
  switch (speed) {
  case 1: ;
  if (is_input != 0) {
    tmp = (unsigned long )(((long )((bytecount * 56) / 6) * 676670L + 2097677L) / 1000L);
    return ((long )(tmp + 65726UL));
  } else {
    tmp = (unsigned long )(((long )((bytecount * 56) / 6) * 667000L + 2067700L) / 1000L);
    return ((long )(tmp + 65773UL));
  }
  case 2: ;
  if (isoc != 0) {
    tmp = (unsigned long )(((long )((bytecount * 56) / 6) * 83540L + 258974L) / 1000L);
    if (is_input != 0) {
      tmp___1 = 8268UL;
    } else {
      tmp___1 = 7265UL;
    }
    return ((long )(tmp___1 + tmp));
  } else {
    tmp = (unsigned long )(((long )((bytecount * 56) / 6) * 83540L + 258974L) / 1000L);
    return ((long )(tmp + 10107UL));
  }
  case 3: ;
  if (isoc != 0) {
    tmp = ((unsigned long )((bytecount * 56) / 6 + 3) * 2083UL + 633232UL) / 1000UL + 5UL;
  } else {
    tmp = ((unsigned long )((bytecount * 56) / 6 + 3) * 2083UL + 916520UL) / 1000UL + 5UL;
  }
  return ((long )tmp);
  default: 
  descriptor.modname = "usbcore";
  descriptor.function = "usb_calc_bus_time";
  descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hcd.c.prepared";
  descriptor.format = "%s: bogus device speed!\n";
  descriptor.lineno = 1191U;
  descriptor.flags = 1U;
  tmp___0 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
  if (tmp___0 != 0L) {
    __dynamic_pr_debug(& descriptor, "%s: bogus device speed!\n", usbcore_name);
  }
  return (-1L);
  }
}
}
int usb_hcd_link_urb_to_ep(struct usb_hcd *hcd , struct urb *urb ) 
{ int rc ;
  int tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
  rc = 0;
  spin_lock(& hcd_urb_list_lock);
  tmp = atomic_read((atomic_t const   *)(& urb->reject));
  tmp___0 = ldv__builtin_expect(tmp != 0, 0L);
  if (tmp___0 != 0L) {
    rc = -1;
    goto done;
  }
  tmp___1 = ldv__builtin_expect((urb->ep)->enabled == 0, 0L);
  if (tmp___1 != 0L) {
    rc = -2;
    goto done;
  }
  tmp___2 = ldv__builtin_expect((unsigned int )*((unsigned char *)urb->dev + 1588UL) == 0U,
                                0L);
  if (tmp___2 != 0L) {
    rc = -113;
    goto done;
  }
  if ((hcd->flags & 32UL) != 0UL) {
    urb->unlinked = 0;
    list_add_tail(& urb->urb_list, & (urb->ep)->urb_list);
  } else {
    rc = -108;
    goto done;
  }
  done: 
  spin_unlock(& hcd_urb_list_lock);
  return (rc);
}
}
int usb_hcd_check_unlink_urb(struct usb_hcd *hcd , struct urb *urb , int status ) 
{ struct list_head *tmp ;

  {
  tmp = (urb->ep)->urb_list.next;
  goto ldv_32835;
  ldv_32834: ;
  if ((unsigned long )(& urb->urb_list) == (unsigned long )tmp) {
    goto ldv_32833;
  }
  tmp = tmp->next;
  ldv_32835: ;
  if ((unsigned long )(& (urb->ep)->urb_list) != (unsigned long )tmp) {
    goto ldv_32834;
  }
  ldv_32833: ;
  if ((unsigned long )(& urb->urb_list) != (unsigned long )tmp) {
    return (-43);
  }
  if (urb->unlinked != 0) {
    return (-16);
  }
  urb->unlinked = status;
  return (0);
}
}
void usb_hcd_unlink_urb_from_ep(struct usb_hcd *hcd , struct urb *urb ) 
{ 

  {
  spin_lock(& hcd_urb_list_lock);
  list_del_init(& urb->urb_list);
  spin_unlock(& hcd_urb_list_lock);
  return;
}
}
static int hcd_alloc_coherent(struct usb_bus *bus , gfp_t mem_flags , dma_addr_t *dma_handle ,
                              void **vaddr_handle , size_t size , enum dma_data_direction dir ) 
{ unsigned char *vaddr ;
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  void *tmp___2 ;
  void *__gu_p ;
  size_t __len ;
  void *__ret ;

  {
  if ((unsigned long )*vaddr_handle == (unsigned long )((void *)0)) {
    __ret_warn_once = 1;
    tmp___1 = ldv__builtin_expect(__ret_warn_once != 0, 0L);
    if (tmp___1 != 0L) {
      __ret_warn_on = ! __warned;
      tmp = ldv__builtin_expect(__ret_warn_on != 0, 0L);
      if (tmp != 0L) {
        warn_slowpath_null("/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hcd.c.prepared",
                           1361);
      }
      tmp___0 = ldv__builtin_expect(__ret_warn_on != 0, 0L);
      if (tmp___0 != 0L) {
        __warned = 1;
      }
    }
    ldv__builtin_expect(__ret_warn_once != 0, 0L);
    return (-14);
  }
  tmp___2 = hcd_buffer_alloc(bus, size + 8UL, mem_flags, dma_handle);
  vaddr = (unsigned char *)tmp___2;
  if ((unsigned long )vaddr == (unsigned long )((unsigned char *)0)) {
    return (-12);
  }
  __gu_p = (void *)(vaddr + size);
  switch (8UL) {
  case 1UL: 
  *((u8 *)__gu_p) = (unsigned char )((long )*vaddr_handle);
  goto ldv_32871;
  case 2UL: 
  put_unaligned_le16((int )((unsigned short )((long )*vaddr_handle)), __gu_p);
  goto ldv_32871;
  case 4UL: 
  put_unaligned_le32((unsigned int )((long )*vaddr_handle), __gu_p);
  goto ldv_32871;
  case 8UL: 
  put_unaligned_le64((unsigned long long )*vaddr_handle, __gu_p);
  goto ldv_32871;
  default: 
  __bad_unaligned_access_size();
  goto ldv_32871;
  }
  ldv_32871: ;
  if ((unsigned int )dir == 1U) {
    __len = size;
    __ret = __builtin_memcpy((void *)vaddr, (void const   *)*vaddr_handle, __len);
  }
  *vaddr_handle = (void *)vaddr;
  return (0);
}
}
static void hcd_free_coherent(struct usb_bus *bus , dma_addr_t *dma_handle , void **vaddr_handle ,
                              size_t size , enum dma_data_direction dir ) 
{ unsigned char *vaddr ;
  u64 tmp ;
  size_t __len ;
  void *__ret ;

  {
  vaddr = (unsigned char *)*vaddr_handle;
  tmp = get_unaligned_le64((void const   *)(vaddr + size));
  vaddr = (unsigned char *)tmp;
  if ((unsigned int )dir == 2U) {
    __len = size;
    __ret = __builtin_memcpy((void *)vaddr, (void const   *)*vaddr_handle, __len);
  }
  hcd_buffer_free(bus, size + 8UL, *vaddr_handle, *dma_handle);
  *vaddr_handle = (void *)vaddr;
  *dma_handle = 0ULL;
  return;
}
}
void usb_hcd_unmap_urb_setup_for_dma(struct usb_hcd *hcd , struct urb *urb ) 
{ 

  {
  if ((urb->transfer_flags & 1048576U) != 0U) {
    dma_unmap_single_attrs(hcd->self.controller, urb->setup_dma, 8UL, 1, 0);
  } else
  if ((urb->transfer_flags & 2097152U) != 0U) {
    hcd_free_coherent((urb->dev)->bus, & urb->setup_dma, (void **)(& urb->setup_packet),
                      8UL, 1);
  }
  urb->transfer_flags &= 4291821567U;
  return;
}
}
static void unmap_urb_for_dma(struct usb_hcd *hcd , struct urb *urb ) 
{ 

  {
  if ((unsigned long )(hcd->driver)->unmap_urb_for_dma != (unsigned long )((void (*)(struct usb_hcd * ,
                                                                                     struct urb * ))0)) {
    (*((hcd->driver)->unmap_urb_for_dma))(hcd, urb);
  } else {
    usb_hcd_unmap_urb_for_dma(hcd, urb);
  }
  return;
}
}
void usb_hcd_unmap_urb_for_dma(struct usb_hcd *hcd , struct urb *urb ) 
{ enum dma_data_direction dir ;
  int tmp ;

  {
  usb_hcd_unmap_urb_setup_for_dma(hcd, urb);
  tmp = usb_urb_dir_in(urb);
  if (tmp != 0) {
    dir = 2;
  } else {
    dir = 1;
  }
  if ((urb->transfer_flags & 262144U) != 0U) {
    dma_unmap_sg_attrs(hcd->self.controller, urb->sg, urb->num_sgs, dir, 0);
  } else
  if ((urb->transfer_flags & 131072U) != 0U) {
    dma_unmap_page(hcd->self.controller, urb->transfer_dma, (size_t )urb->transfer_buffer_length,
                   dir);
  } else
  if ((urb->transfer_flags & 65536U) != 0U) {
    dma_unmap_single_attrs(hcd->self.controller, urb->transfer_dma, (size_t )urb->transfer_buffer_length,
                           dir, 0);
  } else
  if ((urb->transfer_flags & 524288U) != 0U) {
    hcd_free_coherent((urb->dev)->bus, & urb->transfer_dma, & urb->transfer_buffer,
                      (size_t )urb->transfer_buffer_length, dir);
  }
  urb->transfer_flags &= 4293984255U;
  return;
}
}
static int map_urb_for_dma(struct usb_hcd *hcd , struct urb *urb , gfp_t mem_flags ) 
{ int tmp ;
  int tmp___0 ;

  {
  if ((unsigned long )(hcd->driver)->map_urb_for_dma != (unsigned long )((int (*)(struct usb_hcd * ,
                                                                                  struct urb * ,
                                                                                  gfp_t  ))0)) {
    tmp = (*((hcd->driver)->map_urb_for_dma))(hcd, urb, mem_flags);
    return (tmp);
  } else {
    tmp___0 = usb_hcd_map_urb_for_dma(hcd, urb, mem_flags);
    return (tmp___0);
  }
}
}
int usb_hcd_map_urb_for_dma(struct usb_hcd *hcd , struct urb *urb , gfp_t mem_flags ) 
{ enum dma_data_direction dir ;
  int ret ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int n ;
  int __ret_warn_on ;
  long tmp___2 ;
  int tmp___3 ;
  struct scatterlist *sg ;
  struct page *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;

  {
  ret = 0;
  tmp___0 = usb_endpoint_xfer_control((struct usb_endpoint_descriptor  const  *)(& (urb->ep)->desc));
  if (tmp___0 != 0) {
    if ((unsigned int )hcd->self.uses_pio_for_control != 0U) {
      return (ret);
    }
    if ((unsigned int )hcd->self.uses_dma != 0U) {
      urb->setup_dma = dma_map_single_attrs(hcd->self.controller, (void *)urb->setup_packet,
                                            8UL, 1, 0);
      tmp = dma_mapping_error(hcd->self.controller, urb->setup_dma);
      if (tmp != 0) {
        return (-11);
      }
      urb->transfer_flags |= 1048576U;
    } else
    if (((int )(hcd->driver)->flags & 2) != 0) {
      ret = hcd_alloc_coherent((urb->dev)->bus, mem_flags, & urb->setup_dma, (void **)(& urb->setup_packet),
                               8UL, 1);
      if (ret != 0) {
        return (ret);
      }
      urb->transfer_flags |= 2097152U;
    }
  }
  tmp___1 = usb_urb_dir_in(urb);
  if (tmp___1 != 0) {
    dir = 2;
  } else {
    dir = 1;
  }
  if (urb->transfer_buffer_length != 0U && (urb->transfer_flags & 4U) == 0U) {
    if ((unsigned int )hcd->self.uses_dma != 0U) {
      if (urb->num_sgs != 0) {
        tmp___3 = usb_endpoint_xfer_isoc((struct usb_endpoint_descriptor  const  *)(& (urb->ep)->desc));
        if (tmp___3 != 0) {
          __ret_warn_on = 1;
          tmp___2 = ldv__builtin_expect(__ret_warn_on != 0, 0L);
          if (tmp___2 != 0L) {
            warn_slowpath_null("/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hcd.c.prepared",
                               1523);
          }
          ldv__builtin_expect(__ret_warn_on != 0, 0L);
          return (-22);
        }
        n = dma_map_sg_attrs(hcd->self.controller, urb->sg, urb->num_sgs, dir, 0);
        if (n <= 0) {
          ret = -11;
        } else {
          urb->transfer_flags |= 262144U;
        }
        urb->num_mapped_sgs = n;
        if (urb->num_sgs != n) {
          urb->transfer_flags |= 4194304U;
        }
      } else
      if ((unsigned long )urb->sg != (unsigned long )((struct scatterlist *)0)) {
        sg = urb->sg;
        tmp___4 = sg_page(sg);
        urb->transfer_dma = dma_map_page(hcd->self.controller, tmp___4, (size_t )sg->offset,
                                         (size_t )urb->transfer_buffer_length, dir);
        tmp___5 = dma_mapping_error(hcd->self.controller, urb->transfer_dma);
        if (tmp___5 != 0) {
          ret = -11;
        } else {
          urb->transfer_flags |= 131072U;
        }
      } else {
        urb->transfer_dma = dma_map_single_attrs(hcd->self.controller, urb->transfer_buffer,
                                                 (size_t )urb->transfer_buffer_length,
                                                 dir, 0);
        tmp___6 = dma_mapping_error(hcd->self.controller, urb->transfer_dma);
        if (tmp___6 != 0) {
          ret = -11;
        } else {
          urb->transfer_flags |= 65536U;
        }
      }
    } else
    if (((int )(hcd->driver)->flags & 2) != 0) {
      ret = hcd_alloc_coherent((urb->dev)->bus, mem_flags, & urb->transfer_dma, & urb->transfer_buffer,
                               (size_t )urb->transfer_buffer_length, dir);
      if (ret == 0) {
        urb->transfer_flags |= 524288U;
      }
    }
    if (ret != 0 && (urb->transfer_flags & 3145728U) != 0U) {
      usb_hcd_unmap_urb_for_dma(hcd, urb);
    }
  }
  return (ret);
}
}
int usb_hcd_submit_urb(struct urb *urb , gfp_t mem_flags ) 
{ int status ;
  struct usb_hcd *hcd ;
  struct usb_hcd *tmp ;
  long tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;

  {
  tmp = bus_to_hcd((urb->dev)->bus);
  hcd = tmp;
  usb_get_urb(urb);
  atomic_inc(& urb->use_count);
  atomic_inc(& (urb->dev)->urbnum);
  usbmon_urb_submit(& hcd->self, urb);
  tmp___2 = is_root_hub(urb->dev);
  if (tmp___2 != 0) {
    status = rh_urb_enqueue(hcd, urb);
  } else {
    status = map_urb_for_dma(hcd, urb, mem_flags);
    tmp___1 = ldv__builtin_expect(status == 0, 1L);
    if (tmp___1 != 0L) {
      status = (*((hcd->driver)->urb_enqueue))(hcd, urb, mem_flags);
      tmp___0 = ldv__builtin_expect(status != 0, 0L);
      if (tmp___0 != 0L) {
        unmap_urb_for_dma(hcd, urb);
      }
    }
  }
  tmp___4 = ldv__builtin_expect(status != 0, 0L);
  if (tmp___4 != 0L) {
    usbmon_urb_submit_error(& hcd->self, urb, status);
    urb->hcpriv = 0;
    INIT_LIST_HEAD(& urb->urb_list);
    atomic_dec(& urb->use_count);
    atomic_dec(& (urb->dev)->urbnum);
    tmp___3 = atomic_read((atomic_t const   *)(& urb->reject));
    if (tmp___3 != 0) {
      __wake_up(& usb_kill_urb_queue, 3U, 1, 0);
    }
    usb_free_urb(urb);
  }
  return (status);
}
}
static int unlink1(struct usb_hcd *hcd , struct urb *urb , int status ) 
{ int value ;
  int tmp ;

  {
  tmp = is_root_hub(urb->dev);
  if (tmp != 0) {
    value = usb_rh_urb_dequeue(hcd, urb, status);
  } else {
    value = (*((hcd->driver)->urb_dequeue))(hcd, urb, status);
  }
  return (value);
}
}
int usb_hcd_unlink_urb(struct urb *urb , int status ) 
{ struct usb_hcd *hcd ;
  int retval ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  struct _ddebug descriptor ;
  long tmp___1 ;

  {
  retval = -43;
  tmp = spinlock_check(& hcd_urb_unlink_lock);
  flags = _raw_spin_lock_irqsave(tmp);
  tmp___0 = atomic_read((atomic_t const   *)(& urb->use_count));
  if (tmp___0 > 0) {
    retval = 0;
    usb_get_dev(urb->dev);
  }
  spin_unlock_irqrestore(& hcd_urb_unlink_lock, flags);
  if (retval == 0) {
    hcd = bus_to_hcd((urb->dev)->bus);
    retval = unlink1(hcd, urb, status);
    usb_put_dev(urb->dev);
  }
  if (retval == 0) {
    retval = -115;
  } else
  if (retval != -43 && retval != -16) {
    descriptor.modname = "usbcore";
    descriptor.function = "usb_hcd_unlink_urb";
    descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hcd.c.prepared";
    descriptor.format = "hcd_unlink_urb %p fail %d\n";
    descriptor.lineno = 1692U;
    descriptor.flags = 1U;
    tmp___1 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
    if (tmp___1 != 0L) {
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& (urb->dev)->dev),
                        "hcd_unlink_urb %p fail %d\n", urb, retval);
    }
  }
  return (retval);
}
}
void usb_hcd_giveback_urb(struct usb_hcd *hcd , struct urb *urb , int status ) 
{ long tmp ;
  long tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;

  {
  urb->hcpriv = 0;
  tmp___3 = ldv__builtin_expect(urb->unlinked != 0, 0L);
  if (tmp___3 != 0L) {
    status = urb->unlinked;
  } else {
    tmp = ldv__builtin_expect((long )((int )urb->transfer_flags) & 1L, 0L);
    if (tmp != 0L) {
      tmp___0 = ldv__builtin_expect(urb->actual_length < urb->transfer_buffer_length,
                                    0L);
      if (tmp___0 != 0L) {
        tmp___1 = 1;
      } else {
        tmp___1 = 0;
      }
    } else {
      tmp___1 = 0;
    }
    if (tmp___1 != 0) {
      tmp___2 = ldv__builtin_expect(status == 0, 0L);
      if (tmp___2 != 0L) {
        status = -121;
      }
    }
  }
  unmap_urb_for_dma(hcd, urb);
  usbmon_urb_complete(& hcd->self, urb, status);
  usb_unanchor_urb(urb);
  urb->status = status;
  (*(urb->complete))(urb);
  atomic_dec(& urb->use_count);
  tmp___4 = atomic_read((atomic_t const   *)(& urb->reject));
  tmp___5 = ldv__builtin_expect(tmp___4 != 0, 0L);
  if (tmp___5 != 0L) {
    __wake_up(& usb_kill_urb_queue, 3U, 1, 0);
  }
  usb_free_urb(urb);
  return;
}
}
void usb_hcd_flush_endpoint(struct usb_device *udev , struct usb_host_endpoint *ep ) 
{ struct usb_hcd *hcd ;
  struct urb *urb ;
  struct list_head  const  *__mptr ;
  int is_in ;
  struct _ddebug descriptor ;
  char *s ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  int tmp___2 ;
  int tmp___3 ;
  char *tmp___4 ;

  {
  if ((unsigned long )ep == (unsigned long )((struct usb_host_endpoint *)0)) {
    return;
  }
  __might_sleep("/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hcd.c.prepared",
                1753, 0);
  hcd = bus_to_hcd(udev->bus);
  spin_lock_irq(& hcd_urb_list_lock);
  rescan: 
  __mptr = (struct list_head  const  *)ep->urb_list.next;
  urb = (struct urb *)__mptr + 0xffffffffffffffe0UL;
  goto ldv_33001;
  ldv_33000: ;
  if (urb->unlinked != 0) {
    goto ldv_32990;
  }
  usb_get_urb(urb);
  is_in = usb_urb_dir_in(urb);
  spin_unlock(& hcd_urb_list_lock);
  unlink1(hcd, urb, -108);
  descriptor.modname = "usbcore";
  descriptor.function = "usb_hcd_flush_endpoint";
  descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hcd.c.prepared";
  descriptor.format = "shutdown urb %p ep%d%s%s\n";
  descriptor.lineno = 1787U;
  descriptor.flags = 1U;
  tmp___1 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
  if (tmp___1 != 0L) {
    tmp = usb_endpoint_type((struct usb_endpoint_descriptor  const  *)(& ep->desc));
    switch (tmp) {
    case 0: 
    s = (char *)"";
    goto ldv_32995;
    case 2: 
    s = (char *)"-bulk";
    goto ldv_32995;
    case 3: 
    s = (char *)"-intr";
    goto ldv_32995;
    default: 
    s = (char *)"-iso";
    goto ldv_32995;
    }
    ldv_32995: 
    tmp___0 = usb_endpoint_num((struct usb_endpoint_descriptor  const  *)(& ep->desc));
    if (is_in != 0) {
      tmp___4 = (char *)"in";
    } else {
      tmp___4 = (char *)"out";
    }
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)hcd->self.controller,
                      "shutdown urb %p ep%d%s%s\n", urb, tmp___0, tmp___4, s);
  }
  usb_free_urb(urb);
  spin_lock(& hcd_urb_list_lock);
  goto rescan;
  ldv_32990: 
  __mptr___0 = (struct list_head  const  *)urb->urb_list.next;
  urb = (struct urb *)__mptr___0 + 0xffffffffffffffe0UL;
  ldv_33001: ;
  if ((unsigned long )(& urb->urb_list) != (unsigned long )(& ep->urb_list)) {
    goto ldv_33000;
  }
  spin_unlock_irq(& hcd_urb_list_lock);
  goto ldv_33006;
  ldv_33005: 
  spin_lock_irq(& hcd_urb_list_lock);
  urb = 0;
  tmp___2 = list_empty((struct list_head  const  *)(& ep->urb_list));
  if (tmp___2 == 0) {
    __mptr___1 = (struct list_head  const  *)ep->urb_list.prev;
    urb = (struct urb *)__mptr___1 + 0xffffffffffffffe0UL;
    usb_get_urb(urb);
  }
  spin_unlock_irq(& hcd_urb_list_lock);
  if ((unsigned long )urb != (unsigned long )((struct urb *)0)) {
    usb_kill_urb(urb);
    usb_free_urb(urb);
  }
  ldv_33006: 
  tmp___3 = list_empty((struct list_head  const  *)(& ep->urb_list));
  if (tmp___3 == 0) {
    goto ldv_33005;
  }
  return;
}
}
int usb_hcd_alloc_bandwidth(struct usb_device *udev , struct usb_host_config *new_config ,
                            struct usb_host_interface *cur_alt , struct usb_host_interface *new_alt ) 
{ int num_intfs ;
  int i ;
  int j ;
  struct usb_host_interface *alt ;
  int ret ;
  struct usb_hcd *hcd ;
  struct usb_host_endpoint *ep ;
  struct usb_host_interface *first_alt ;
  int iface_num ;
  struct usb_interface *iface ;
  struct usb_interface *tmp ;

  {
  alt = 0;
  ret = 0;
  hcd = bus_to_hcd(udev->bus);
  if ((unsigned long )(hcd->driver)->check_bandwidth == (unsigned long )((int (*)(struct usb_hcd * ,
                                                                                  struct usb_device * ))0)) {
    return (0);
  }
  if ((unsigned long )new_config == (unsigned long )((struct usb_host_config *)0) && (unsigned long )cur_alt == (unsigned long )((struct usb_host_interface *)0)) {
    i = 1;
    goto ldv_33022;
    ldv_33021: 
    ep = udev->ep_out[i];
    if ((unsigned long )ep != (unsigned long )((struct usb_host_endpoint *)0)) {
      (*((hcd->driver)->drop_endpoint))(hcd, udev, ep);
    }
    ep = udev->ep_in[i];
    if ((unsigned long )ep != (unsigned long )((struct usb_host_endpoint *)0)) {
      (*((hcd->driver)->drop_endpoint))(hcd, udev, ep);
    }
    i ++;
    ldv_33022: ;
    if (i <= 15) {
      goto ldv_33021;
    }
    (*((hcd->driver)->check_bandwidth))(hcd, udev);
    return (0);
  }
  if ((unsigned long )new_config != (unsigned long )((struct usb_host_config *)0)) {
    num_intfs = (int )new_config->desc.bNumInterfaces;
    i = 1;
    goto ldv_33026;
    ldv_33025: 
    ep = udev->ep_out[i];
    if ((unsigned long )ep != (unsigned long )((struct usb_host_endpoint *)0)) {
      ret = (*((hcd->driver)->drop_endpoint))(hcd, udev, ep);
      if (ret < 0) {
        goto reset;
      }
    }
    ep = udev->ep_in[i];
    if ((unsigned long )ep != (unsigned long )((struct usb_host_endpoint *)0)) {
      ret = (*((hcd->driver)->drop_endpoint))(hcd, udev, ep);
      if (ret < 0) {
        goto reset;
      }
    }
    i ++;
    ldv_33026: ;
    if (i <= 15) {
      goto ldv_33025;
    }
    i = 0;
    goto ldv_33034;
    ldv_33033: 
    first_alt = (struct usb_host_interface *)(& (new_config->intf_cache[i])->altsetting);
    iface_num = (int )first_alt->desc.bInterfaceNumber;
    alt = usb_find_alt_setting(new_config, (unsigned int )iface_num, 0U);
    if ((unsigned long )alt == (unsigned long )((struct usb_host_interface *)0)) {
      alt = first_alt;
    }
    j = 0;
    goto ldv_33031;
    ldv_33030: 
    ret = (*((hcd->driver)->add_endpoint))(hcd, udev, alt->endpoint + (unsigned long )j);
    if (ret < 0) {
      goto reset;
    }
    j ++;
    ldv_33031: ;
    if ((int )alt->desc.bNumEndpoints > j) {
      goto ldv_33030;
    }
    i ++;
    ldv_33034: ;
    if (i < num_intfs) {
      goto ldv_33033;
    }
  }
  if ((unsigned long )cur_alt != (unsigned long )((struct usb_host_interface *)0) && (unsigned long )new_alt != (unsigned long )((struct usb_host_interface *)0)) {
    tmp = usb_ifnum_to_if((struct usb_device  const  *)udev, (unsigned int )cur_alt->desc.bInterfaceNumber);
    iface = tmp;
    if ((unsigned long )iface == (unsigned long )((struct usb_interface *)0)) {
      return (-22);
    }
    if ((unsigned int )*((unsigned char *)iface + 40UL) != 0U) {
      cur_alt = usb_altnum_to_altsetting((struct usb_interface  const  *)iface, 0U);
      if ((unsigned long )cur_alt == (unsigned long )((struct usb_host_interface *)0)) {
        cur_alt = iface->altsetting;
      }
    }
    i = 0;
    goto ldv_33038;
    ldv_33037: 
    ret = (*((hcd->driver)->drop_endpoint))(hcd, udev, cur_alt->endpoint + (unsigned long )i);
    if (ret < 0) {
      goto reset;
    }
    i ++;
    ldv_33038: ;
    if ((int )cur_alt->desc.bNumEndpoints > i) {
      goto ldv_33037;
    }
    i = 0;
    goto ldv_33041;
    ldv_33040: 
    ret = (*((hcd->driver)->add_endpoint))(hcd, udev, new_alt->endpoint + (unsigned long )i);
    if (ret < 0) {
      goto reset;
    }
    i ++;
    ldv_33041: ;
    if ((int )new_alt->desc.bNumEndpoints > i) {
      goto ldv_33040;
    }
  }
  ret = (*((hcd->driver)->check_bandwidth))(hcd, udev);
  reset: ;
  if (ret < 0) {
    (*((hcd->driver)->reset_bandwidth))(hcd, udev);
  }
  return (ret);
}
}
void usb_hcd_disable_endpoint(struct usb_device *udev , struct usb_host_endpoint *ep ) 
{ struct usb_hcd *hcd ;

  {
  __might_sleep("/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hcd.c.prepared",
                1964, 0);
  hcd = bus_to_hcd(udev->bus);
  if ((unsigned long )(hcd->driver)->endpoint_disable != (unsigned long )((void (*)(struct usb_hcd * ,
                                                                                    struct usb_host_endpoint * ))0)) {
    (*((hcd->driver)->endpoint_disable))(hcd, ep);
  }
  return;
}
}
void usb_hcd_reset_endpoint(struct usb_device *udev , struct usb_host_endpoint *ep ) 
{ struct usb_hcd *hcd ;
  struct usb_hcd *tmp ;
  int epnum ;
  int tmp___0 ;
  int is_out ;
  int tmp___1 ;
  int is_control ;
  int tmp___2 ;

  {
  tmp = bus_to_hcd(udev->bus);
  hcd = tmp;
  if ((unsigned long )(hcd->driver)->endpoint_reset != (unsigned long )((void (*)(struct usb_hcd * ,
                                                                                  struct usb_host_endpoint * ))0)) {
    (*((hcd->driver)->endpoint_reset))(hcd, ep);
  } else {
    tmp___0 = usb_endpoint_num((struct usb_endpoint_descriptor  const  *)(& ep->desc));
    epnum = tmp___0;
    tmp___1 = usb_endpoint_dir_out((struct usb_endpoint_descriptor  const  *)(& ep->desc));
    is_out = tmp___1;
    tmp___2 = usb_endpoint_xfer_control((struct usb_endpoint_descriptor  const  *)(& ep->desc));
    is_control = tmp___2;
    udev->toggle[is_out] &= (unsigned int )(~ (1 << epnum));
    if (is_control != 0) {
      udev->toggle[is_out == 0] &= (unsigned int )(~ (1 << epnum));
    }
  }
  return;
}
}
int usb_alloc_streams(struct usb_interface *interface , struct usb_host_endpoint **eps ,
                      unsigned int num_eps , unsigned int num_streams , gfp_t mem_flags ) 
{ struct usb_hcd *hcd ;
  struct usb_device *dev ;
  int i ;
  int tmp ;
  int tmp___0 ;

  {
  dev = interface_to_usbdev(interface);
  hcd = bus_to_hcd(dev->bus);
  if ((unsigned long )(hcd->driver)->alloc_streams == (unsigned long )((int (*)(struct usb_hcd * ,
                                                                                struct usb_device * ,
                                                                                struct usb_host_endpoint ** ,
                                                                                unsigned int  ,
                                                                                unsigned int  ,
                                                                                gfp_t  ))0) || (unsigned long )(hcd->driver)->free_streams == (unsigned long )((int (*)(struct usb_hcd * ,
                                                                                                                                                                        struct usb_device * ,
                                                                                                                                                                        struct usb_host_endpoint ** ,
                                                                                                                                                                        unsigned int  ,
                                                                                                                                                                        gfp_t  ))0)) {
    return (-22);
  }
  if ((unsigned int )dev->speed != 5U) {
    return (-22);
  }
  i = 0;
  goto ldv_33067;
  ldv_33066: 
  tmp = usb_endpoint_xfer_bulk((struct usb_endpoint_descriptor  const  *)(& (*(eps + (unsigned long )i))->desc));
  if (tmp == 0) {
    return (-22);
  }
  i ++;
  ldv_33067: ;
  if ((unsigned int )i < num_eps) {
    goto ldv_33066;
  }
  tmp___0 = (*((hcd->driver)->alloc_streams))(hcd, dev, eps, num_eps, num_streams,
                                              mem_flags);
  return (tmp___0);
}
}
void usb_free_streams(struct usb_interface *interface , struct usb_host_endpoint **eps ,
                      unsigned int num_eps , gfp_t mem_flags ) 
{ struct usb_hcd *hcd ;
  struct usb_device *dev ;
  int i ;
  int tmp ;

  {
  dev = interface_to_usbdev(interface);
  hcd = bus_to_hcd(dev->bus);
  if ((unsigned int )dev->speed != 5U) {
    return;
  }
  i = 0;
  goto ldv_33089;
  ldv_33088: ;
  if ((unsigned long )*(eps + (unsigned long )i) == (unsigned long )((struct usb_host_endpoint *)0)) {
    return;
  } else {
    tmp = usb_endpoint_xfer_bulk((struct usb_endpoint_descriptor  const  *)(& (*(eps + (unsigned long )i))->desc));
    if (tmp == 0) {
      return;
    }
  }
  i ++;
  ldv_33089: ;
  if ((unsigned int )i < num_eps) {
    goto ldv_33088;
  }
  (*((hcd->driver)->free_streams))(hcd, dev, eps, num_eps, mem_flags);
  return;
}
}
void usb_hcd_synchronize_unlinks(struct usb_device *udev ) 
{ 

  {
  spin_lock_irq(& hcd_urb_unlink_lock);
  spin_unlock_irq(& hcd_urb_unlink_lock);
  return;
}
}
int usb_hcd_get_frame_number(struct usb_device *udev ) 
{ struct usb_hcd *hcd ;
  struct usb_hcd *tmp ;
  int tmp___0 ;

  {
  tmp = bus_to_hcd(udev->bus);
  hcd = tmp;
  if ((hcd->flags & 32UL) == 0UL) {
    return (-108);
  }
  tmp___0 = (*((hcd->driver)->get_frame_number))(hcd);
  return (tmp___0);
}
}
int hcd_bus_suspend(struct usb_device *rhdev , pm_message_t msg ) 
{ struct usb_hcd *hcd ;
  struct usb_bus  const  *__mptr ;
  int status ;
  int old_state ;
  struct _ddebug descriptor ;
  long tmp ;
  struct _ddebug descriptor___0 ;
  long tmp___0 ;
  char buffer[6U] ;
  struct _ddebug descriptor___1 ;
  long tmp___1 ;
  struct pm_message __constr_expr_0 ;
  struct _ddebug descriptor___2 ;
  long tmp___2 ;
  char *tmp___3 ;

  {
  __mptr = (struct usb_bus  const  *)rhdev->bus;
  hcd = (struct usb_hcd *)__mptr;
  old_state = hcd->state;
  descriptor.modname = "usbcore";
  descriptor.function = "hcd_bus_suspend";
  descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hcd.c.prepared";
  descriptor.format = "bus %ssuspend, wakeup %d\n";
  descriptor.lineno = 2100U;
  descriptor.flags = 1U;
  tmp = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
  if (tmp != 0L) {
    if ((msg.event & 1024) != 0) {
      tmp___3 = (char *)"auto-";
    } else {
      tmp___3 = (char *)"";
    }
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& rhdev->dev), "bus %ssuspend, wakeup %d\n",
                      tmp___3, (int )rhdev->do_remote_wakeup);
  }
  if ((hcd->flags & 64UL) != 0UL) {
    descriptor___0.modname = "usbcore";
    descriptor___0.function = "hcd_bus_suspend";
    descriptor___0.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hcd.c.prepared";
    descriptor___0.format = "skipped %s of dead bus\n";
    descriptor___0.lineno = 2102U;
    descriptor___0.flags = 1U;
    tmp___0 = ldv__builtin_expect((long )descriptor___0.flags & 1L, 0L);
    if (tmp___0 != 0L) {
      __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)(& rhdev->dev),
                        "skipped %s of dead bus\n", (char *)"suspend");
    }
    return (0);
  }
  if ((unsigned long )(hcd->driver)->bus_suspend == (unsigned long )((int (*)(struct usb_hcd * ))0)) {
    status = -2;
  } else {
    clear_bit(5, (unsigned long volatile   *)(& hcd->flags));
    hcd->state = 133;
    status = (*((hcd->driver)->bus_suspend))(hcd);
  }
  if (status == 0) {
    usb_set_device_state(rhdev, 8);
    hcd->state = 4;
    if ((unsigned int )*((unsigned char *)rhdev + 1672UL) != 0U) {
      status = (*((hcd->driver)->hub_status_data))(hcd, (char *)(& buffer));
      if (status != 0) {
        descriptor___1.modname = "usbcore";
        descriptor___1.function = "hcd_bus_suspend";
        descriptor___1.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hcd.c.prepared";
        descriptor___1.format = "suspend raced with wakeup event\n";
        descriptor___1.lineno = 2123U;
        descriptor___1.flags = 1U;
        tmp___1 = ldv__builtin_expect((long )descriptor___1.flags & 1L, 0L);
        if (tmp___1 != 0L) {
          __dynamic_dev_dbg(& descriptor___1, (struct device  const  *)(& rhdev->dev),
                            "suspend raced with wakeup event\n");
        }
        __constr_expr_0.event = 1040;
        hcd_bus_resume(rhdev, __constr_expr_0);
        status = -16;
      }
    }
  } else {
    spin_lock_irq(& hcd_root_hub_lock);
    if ((hcd->flags & 64UL) == 0UL) {
      set_bit(5U, (unsigned long volatile   *)(& hcd->flags));
      hcd->state = old_state;
    }
    spin_unlock_irq(& hcd_root_hub_lock);
    descriptor___2.modname = "usbcore";
    descriptor___2.function = "hcd_bus_suspend";
    descriptor___2.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hcd.c.prepared";
    descriptor___2.format = "bus %s fail, err %d\n";
    descriptor___2.lineno = 2136U;
    descriptor___2.flags = 1U;
    tmp___2 = ldv__builtin_expect((long )descriptor___2.flags & 1L, 0L);
    if (tmp___2 != 0L) {
      __dynamic_dev_dbg(& descriptor___2, (struct device  const  *)(& rhdev->dev),
                        "bus %s fail, err %d\n", (char *)"suspend", status);
    }
  }
  return (status);
}
}
int hcd_bus_resume(struct usb_device *rhdev , pm_message_t msg ) 
{ struct usb_hcd *hcd ;
  struct usb_bus  const  *__mptr ;
  int status ;
  int old_state ;
  struct _ddebug descriptor ;
  long tmp ;
  struct _ddebug descriptor___0 ;
  long tmp___0 ;
  struct usb_device *udev ;
  int port1 ;
  struct _ddebug descriptor___1 ;
  long tmp___1 ;
  char *tmp___2 ;
  int tmp___3 ;

  {
  __mptr = (struct usb_bus  const  *)rhdev->bus;
  hcd = (struct usb_hcd *)__mptr;
  old_state = hcd->state;
  descriptor.modname = "usbcore";
  descriptor.function = "hcd_bus_resume";
  descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hcd.c.prepared";
  descriptor.format = "usb %sresume\n";
  descriptor.lineno = 2148U;
  descriptor.flags = 1U;
  tmp = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
  if (tmp != 0L) {
    if ((msg.event & 1024) != 0) {
      tmp___2 = (char *)"auto-";
    } else {
      tmp___2 = (char *)"";
    }
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& rhdev->dev), "usb %sresume\n",
                      tmp___2);
  }
  if ((hcd->flags & 64UL) != 0UL) {
    descriptor___0.modname = "usbcore";
    descriptor___0.function = "hcd_bus_resume";
    descriptor___0.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hcd.c.prepared";
    descriptor___0.format = "skipped %s of dead bus\n";
    descriptor___0.lineno = 2150U;
    descriptor___0.flags = 1U;
    tmp___0 = ldv__builtin_expect((long )descriptor___0.flags & 1L, 0L);
    if (tmp___0 != 0L) {
      __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)(& rhdev->dev),
                        "skipped %s of dead bus\n", (char *)"resume");
    }
    return (0);
  }
  if ((unsigned long )(hcd->driver)->bus_resume == (unsigned long )((int (*)(struct usb_hcd * ))0)) {
    return (-2);
  }
  if ((hcd->flags & 32UL) != 0UL) {
    return (0);
  }
  hcd->state = 132;
  status = (*((hcd->driver)->bus_resume))(hcd);
  clear_bit(4, (unsigned long volatile   *)(& hcd->flags));
  if (status == 0) {
    spin_lock_irq(& hcd_root_hub_lock);
    if ((hcd->flags & 64UL) == 0UL) {
      if ((unsigned long )rhdev->actconfig != (unsigned long )((struct usb_host_config *)0)) {
        tmp___3 = 7;
      } else {
        tmp___3 = 6;
      }
      usb_set_device_state(rhdev, tmp___3);
      set_bit(5U, (unsigned long volatile   *)(& hcd->flags));
      hcd->state = 1;
    }
    spin_unlock_irq(& hcd_root_hub_lock);
    port1 = 1;
    udev = usb_hub_find_child(rhdev, port1);
    goto ldv_33140;
    ldv_33139: ;
    if (! ((unsigned long )udev == (unsigned long )((struct usb_device *)0))) {
      if ((unsigned int )udev->state != 0U && (unsigned int )*((unsigned char *)udev + 1672UL) == 0U) {
        usleep_range(10000UL, 11000UL);
        goto ldv_33138;
      }
    }
    ldv_33137: 
    port1 ++;
    udev = usb_hub_find_child(rhdev, port1);
    ldv_33140: ;
    if (rhdev->maxchild >= port1) {
      goto ldv_33139;
    }
    ldv_33138: ;
  } else {
    hcd->state = old_state;
    descriptor___1.modname = "usbcore";
    descriptor___1.function = "hcd_bus_resume";
    descriptor___1.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hcd.c.prepared";
    descriptor___1.format = "bus %s fail, err %d\n";
    descriptor___1.lineno = 2191U;
    descriptor___1.flags = 1U;
    tmp___1 = ldv__builtin_expect((long )descriptor___1.flags & 1L, 0L);
    if (tmp___1 != 0L) {
      __dynamic_dev_dbg(& descriptor___1, (struct device  const  *)(& rhdev->dev),
                        "bus %s fail, err %d\n", (char *)"resume", status);
    }
    if (status != -108) {
      usb_hc_died(hcd);
    }
  }
  return (status);
}
}
static void hcd_resume_work(struct work_struct *work ) 
{ struct usb_hcd *hcd ;
  struct work_struct  const  *__mptr ;
  struct usb_device *udev ;

  {
  __mptr = (struct work_struct  const  *)work;
  hcd = (struct usb_hcd *)__mptr + 0xfffffffffffffed0UL;
  udev = hcd->self.root_hub;
  device_lock___0(& udev->dev);
  usb_remote_wakeup(udev);
  device_unlock___0(& udev->dev);
  return;
}
}
void usb_hcd_resume_root_hub(struct usb_hcd *hcd ) 
{ unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
  tmp = spinlock_check(& hcd_root_hub_lock);
  flags = _raw_spin_lock_irqsave(tmp);
  if ((unsigned int )*((unsigned char *)hcd + 408UL) != 0U) {
    set_bit(4U, (unsigned long volatile   *)(& hcd->flags));
    queue_work(pm_wq, & hcd->wakeup_work);
  }
  spin_unlock_irqrestore(& hcd_root_hub_lock, flags);
  return;
}
}
irqreturn_t usb_hcd_irq(int irq , void *__hcd ) 
{ struct usb_hcd *hcd ;
  unsigned long flags ;
  irqreturn_t rc ;
  irqreturn_t tmp ;
  long tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;

  {
  hcd = (struct usb_hcd *)__hcd;
  flags = arch_local_irq_save();
  trace_hardirqs_off();
  tmp___0 = ldv__builtin_expect((hcd->flags & 64UL) != 0UL, 0L);
  if (tmp___0 != 0L) {
    rc = 0;
  } else {
    tmp___1 = ldv__builtin_expect((hcd->flags & 1UL) == 0UL, 0L);
    if (tmp___1 != 0L) {
      rc = 0;
    } else {
      tmp = (*((hcd->driver)->irq))(hcd);
      if ((unsigned int )tmp == 0U) {
        rc = 0;
      } else {
        rc = 1;
      }
    }
  }
  tmp___2 = arch_irqs_disabled_flags(flags);
  if (tmp___2 != 0) {
    arch_local_irq_restore(flags);
    trace_hardirqs_off();
  } else {
    trace_hardirqs_on();
    arch_local_irq_restore(flags);
  }
  return (rc);
}
}
void usb_hc_died(struct usb_hcd *hcd ) 
{ unsigned long flags ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;

  {
  dev_err((struct device  const  *)hcd->self.controller, "HC died; cleaning up\n");
  tmp = spinlock_check(& hcd_root_hub_lock);
  flags = _raw_spin_lock_irqsave(tmp);
  clear_bit(5, (unsigned long volatile   *)(& hcd->flags));
  set_bit(6U, (unsigned long volatile   *)(& hcd->flags));
  if ((unsigned int )*((unsigned char *)hcd + 408UL) != 0U) {
    clear_bit(2, (unsigned long volatile   *)(& hcd->flags));
    usb_set_device_state(hcd->self.root_hub, 0);
    usb_kick_khubd(hcd->self.root_hub);
  }
  tmp___0 = usb_hcd_is_primary_hcd(hcd);
  if (tmp___0 != 0 && (unsigned long )hcd->shared_hcd != (unsigned long )((struct usb_hcd *)0)) {
    hcd = hcd->shared_hcd;
    if ((unsigned int )*((unsigned char *)hcd + 408UL) != 0U) {
      clear_bit(2, (unsigned long volatile   *)(& hcd->flags));
      usb_set_device_state(hcd->self.root_hub, 0);
      usb_kick_khubd(hcd->self.root_hub);
    }
  }
  spin_unlock_irqrestore(& hcd_root_hub_lock, flags);
  return;
}
}
struct usb_hcd *usb_create_shared_hcd(struct hc_driver  const  *driver , struct device *dev ,
                                      char const   *bus_name , struct usb_hcd *primary_hcd ) 
{ struct usb_hcd *hcd ;
  void *tmp ;
  struct _ddebug descriptor ;
  long tmp___0 ;
  void *tmp___1 ;
  struct _ddebug descriptor___0 ;
  long tmp___2 ;
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;
  atomic_long_t __constr_expr_0 ;

  {
  tmp = kzalloc((unsigned long )driver->hcd_priv_size + 512UL, 208U);
  hcd = (struct usb_hcd *)tmp;
  if ((unsigned long )hcd == (unsigned long )((struct usb_hcd *)0)) {
    descriptor.modname = "usbcore";
    descriptor.function = "usb_create_shared_hcd";
    descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hcd.c.prepared";
    descriptor.format = "hcd alloc failed\n";
    descriptor.lineno = 2380U;
    descriptor.flags = 1U;
    tmp___0 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
    if (tmp___0 != 0L) {
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)dev, "hcd alloc failed\n");
    }
    return (0);
  }
  if ((unsigned long )primary_hcd == (unsigned long )((struct usb_hcd *)0)) {
    tmp___1 = kmalloc(168UL, 208U);
    hcd->bandwidth_mutex = (struct mutex *)tmp___1;
    if ((unsigned long )hcd->bandwidth_mutex == (unsigned long )((struct mutex *)0)) {
      kfree((void const   *)hcd);
      descriptor___0.modname = "usbcore";
      descriptor___0.function = "usb_create_shared_hcd";
      descriptor___0.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hcd.c.prepared";
      descriptor___0.format = "hcd bandwidth mutex alloc failed\n";
      descriptor___0.lineno = 2388U;
      descriptor___0.flags = 1U;
      tmp___2 = ldv__builtin_expect((long )descriptor___0.flags & 1L, 0L);
      if (tmp___2 != 0L) {
        __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)dev, "hcd bandwidth mutex alloc failed\n");
      }
      return (0);
    }
    __mutex_init(hcd->bandwidth_mutex, "hcd->bandwidth_mutex", & __key);
    dev_set_drvdata(dev, (void *)hcd);
  } else {
    hcd->bandwidth_mutex = primary_hcd->bandwidth_mutex;
    hcd->primary_hcd = primary_hcd;
    primary_hcd->primary_hcd = primary_hcd;
    hcd->shared_hcd = primary_hcd;
    primary_hcd->shared_hcd = hcd;
  }
  kref_init(& hcd->kref);
  usb_bus_init(& hcd->self);
  hcd->self.controller = dev;
  hcd->self.bus_name = bus_name;
  hcd->self.uses_dma = (unsigned long )dev->dma_mask != (unsigned long )((u64 *)0);
  init_timer_key(& hcd->rh_timer, 0U, "(&hcd->rh_timer)", & __key___0);
  hcd->rh_timer.function = & rh_timer_func;
  hcd->rh_timer.data = (unsigned long )hcd;
  __init_work(& hcd->wakeup_work, 0);
  __constr_expr_0.counter = 137438953408L;
  hcd->wakeup_work.data = __constr_expr_0;
  lockdep_init_map(& hcd->wakeup_work.lockdep_map, "(&hcd->wakeup_work)", & __key___1,
                   0);
  INIT_LIST_HEAD(& hcd->wakeup_work.entry);
  hcd->wakeup_work.func = & hcd_resume_work;
  hcd->driver = driver;
  hcd->speed = (int )driver->flags & 112;
  if ((unsigned long )driver->product_desc != (unsigned long )((char const   *)0)) {
    hcd->product_desc = driver->product_desc;
  } else {
    hcd->product_desc = "USB Host Controller";
  }
  return (hcd);
}
}
struct usb_hcd *usb_create_hcd(struct hc_driver  const  *driver , struct device *dev ,
                               char const   *bus_name ) 
{ struct usb_hcd *tmp ;

  {
  tmp = usb_create_shared_hcd(driver, dev, bus_name, 0);
  return (tmp);
}
}
static void hcd_release(struct kref *kref ) 
{ struct usb_hcd *hcd ;
  struct kref  const  *__mptr ;
  int tmp ;

  {
  __mptr = (struct kref  const  *)kref;
  hcd = (struct usb_hcd *)__mptr + 0xffffffffffffff88UL;
  tmp = usb_hcd_is_primary_hcd(hcd);
  if (tmp != 0) {
    kfree((void const   *)hcd->bandwidth_mutex);
  } else {
    (hcd->shared_hcd)->shared_hcd = 0;
  }
  kfree((void const   *)hcd);
  return;
}
}
struct usb_hcd *usb_get_hcd(struct usb_hcd *hcd ) 
{ 

  {
  if ((unsigned long )hcd != (unsigned long )((struct usb_hcd *)0)) {
    kref_get(& hcd->kref);
  }
  return (hcd);
}
}
void usb_put_hcd(struct usb_hcd *hcd ) 
{ 

  {
  if ((unsigned long )hcd != (unsigned long )((struct usb_hcd *)0)) {
    kref_put(& hcd->kref, & hcd_release);
  }
  return;
}
}
int usb_hcd_is_primary_hcd(struct usb_hcd *hcd ) 
{ 

  {
  if ((unsigned long )hcd->primary_hcd == (unsigned long )((struct usb_hcd *)0)) {
    return (1);
  }
  return ((unsigned long )hcd->primary_hcd == (unsigned long )hcd);
}
}
int usb_hcd_find_raw_port_number(struct usb_hcd *hcd , int port1 ) 
{ int tmp ;

  {
  if ((unsigned long )(hcd->driver)->find_raw_port_number == (unsigned long )((int (*)(struct usb_hcd * ,
                                                                                       int  ))0)) {
    return (port1);
  }
  tmp = (*((hcd->driver)->find_raw_port_number))(hcd, port1);
  return (tmp);
}
}
static int usb_hcd_request_irqs(struct usb_hcd *hcd , unsigned int irqnum , unsigned long irqflags ) 
{ int retval ;
  char *tmp ;
  char *tmp___0 ;

  {
  if ((unsigned long )(hcd->driver)->irq != (unsigned long )((irqreturn_t (*)(struct usb_hcd * ))0)) {
    if ((irqflags & 128UL) != 0UL) {
      irqflags &= 0xffffffffffffffdfUL;
    }
    snprintf((char *)(& hcd->irq_descr), 24UL, "%s:usb%d", (hcd->driver)->description,
             hcd->self.busnum);
    retval = request_irq(irqnum, & usb_hcd_irq, irqflags, (char const   *)(& hcd->irq_descr),
                         (void *)hcd);
    if (retval != 0) {
      dev_err((struct device  const  *)hcd->self.controller, "request interrupt %d failed\n",
              irqnum);
      return (retval);
    }
    hcd->irq = irqnum;
    if ((int )(hcd->driver)->flags & 1) {
      tmp = (char *)"io mem";
    } else {
      tmp = (char *)"io base";
    }
    _dev_info((struct device  const  *)hcd->self.controller, "irq %d, %s 0x%08llx\n",
              irqnum, tmp, hcd->rsrc_start);
  } else {
    hcd->irq = 0U;
    if (hcd->rsrc_start != 0ULL) {
      if ((int )(hcd->driver)->flags & 1) {
        tmp___0 = (char *)"io mem";
      } else {
        tmp___0 = (char *)"io base";
      }
      _dev_info((struct device  const  *)hcd->self.controller, "%s 0x%08llx\n", tmp___0,
                hcd->rsrc_start);
    }
  }
  return (0);
}
}
int usb_add_hcd(struct usb_hcd *hcd , unsigned int irqnum , unsigned long irqflags ) 
{ int retval ;
  struct usb_device *rhdev ;
  struct _ddebug descriptor ;
  long tmp ;
  struct _ddebug descriptor___0 ;
  long tmp___0 ;
  bool tmp___1 ;
  bool tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
  _dev_info((struct device  const  *)hcd->self.controller, "%s\n", hcd->product_desc);
  if (authorized_default < 0 || authorized_default > 1) {
    hcd->authorized_default = (unsigned int )*((unsigned char *)hcd + 408UL) == 0U;
  } else {
    hcd->authorized_default = (unsigned char )authorized_default;
  }
  set_bit(0U, (unsigned long volatile   *)(& hcd->flags));
  retval = hcd_buffer_create(hcd);
  if (retval != 0) {
    descriptor.modname = "usbcore";
    descriptor.function = "usb_add_hcd";
    descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hcd.c.prepared";
    descriptor.format = "pool alloc failed\n";
    descriptor.lineno = 2565U;
    descriptor.flags = 1U;
    tmp = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
    if (tmp != 0L) {
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)hcd->self.controller,
                        "pool alloc failed\n");
    }
    return (retval);
  }
  retval = usb_register_bus(& hcd->self);
  if (retval < 0) {
    goto err_register_bus;
  }
  rhdev = usb_alloc_dev(0, & hcd->self, 0U);
  if ((unsigned long )rhdev == (unsigned long )((struct usb_device *)0)) {
    dev_err((struct device  const  *)hcd->self.controller, "unable to allocate root hub\n");
    retval = -12;
    goto err_allocate_root_hub;
  }
  hcd->self.root_hub = rhdev;
  switch (hcd->speed) {
  case 16: 
  rhdev->speed = 2;
  goto ldv_33293;
  case 32: 
  rhdev->speed = 3;
  goto ldv_33293;
  case 64: 
  rhdev->speed = 5;
  goto ldv_33293;
  default: 
  retval = -22;
  goto err_set_rh_speed;
  }
  ldv_33293: 
  device_set_wakeup_capable(& rhdev->dev, 1);
  set_bit(5U, (unsigned long volatile   *)(& hcd->flags));
  if ((unsigned long )(hcd->driver)->reset != (unsigned long )((int (*)(struct usb_hcd * ))0)) {
    retval = (*((hcd->driver)->reset))(hcd);
    if (retval < 0) {
      dev_err((struct device  const  *)hcd->self.controller, "can\'t setup\n");
      goto err_hcd_driver_setup;
    }
  }
  hcd->rh_pollable = 1U;
  tmp___1 = device_can_wakeup(hcd->self.controller);
  if ((int )tmp___1) {
    tmp___2 = device_can_wakeup(& (hcd->self.root_hub)->dev);
    if ((int )tmp___2) {
      descriptor___0.modname = "usbcore";
      descriptor___0.function = "usb_add_hcd";
      descriptor___0.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hcd.c.prepared";
      descriptor___0.format = "supports USB remote wakeup\n";
      descriptor___0.lineno = 2618U;
      descriptor___0.flags = 1U;
      tmp___0 = ldv__builtin_expect((long )descriptor___0.flags & 1L, 0L);
      if (tmp___0 != 0L) {
        __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)hcd->self.controller,
                          "supports USB remote wakeup\n");
      }
    }
  }
  tmp___3 = usb_hcd_is_primary_hcd(hcd);
  if (tmp___3 != 0 && irqnum != 0U) {
    retval = usb_hcd_request_irqs(hcd, irqnum, irqflags);
    if (retval != 0) {
      goto err_request_irq;
    }
  }
  hcd->state = 1;
  retval = (*((hcd->driver)->start))(hcd);
  if (retval < 0) {
    dev_err((struct device  const  *)hcd->self.controller, "startup error %d\n", retval);
    goto err_hcd_driver_start;
  }
  retval = register_root_hub(hcd);
  if (retval != 0) {
    goto err_register_root_hub;
  }
  retval = sysfs_create_group(& rhdev->dev.kobj, (struct attribute_group  const  *)(& usb_bus_attr_group));
  if (retval < 0) {
    printk("\vCannot register USB bus sysfs attributes: %d\n", retval);
    goto error_create_attr_group;
  }
  if ((unsigned int )*((unsigned char *)hcd + 408UL) != 0U && (hcd->flags & 4UL) != 0UL) {
    usb_hcd_poll_rh_status(hcd);
  }
  device_wakeup_enable(hcd->self.controller);
  return (retval);
  error_create_attr_group: 
  clear_bit(5, (unsigned long volatile   *)(& hcd->flags));
  if (hcd->state & 1) {
    hcd->state = 133;
  }
  spin_lock_irq(& hcd_root_hub_lock);
  hcd->rh_registered = 0U;
  spin_unlock_irq(& hcd_root_hub_lock);
  cancel_work_sync(& hcd->wakeup_work);
  ldv_mutex_lock_63(& usb_bus_list_lock);
  usb_disconnect(& rhdev);
  ldv_mutex_unlock_64(& usb_bus_list_lock);
  err_register_root_hub: 
  hcd->rh_pollable = 0U;
  clear_bit(2, (unsigned long volatile   *)(& hcd->flags));
  del_timer_sync(& hcd->rh_timer);
  (*((hcd->driver)->stop))(hcd);
  hcd->state = 0;
  clear_bit(2, (unsigned long volatile   *)(& hcd->flags));
  del_timer_sync(& hcd->rh_timer);
  err_hcd_driver_start: 
  tmp___4 = usb_hcd_is_primary_hcd(hcd);
  if (tmp___4 != 0 && hcd->irq != 0U) {
    free_irq(irqnum, (void *)hcd);
  }
  err_request_irq: ;
  err_hcd_driver_setup: ;
  err_set_rh_speed: 
  usb_put_dev(hcd->self.root_hub);
  err_allocate_root_hub: 
  usb_deregister_bus(& hcd->self);
  err_register_bus: 
  hcd_buffer_destroy(hcd);
  return (retval);
}
}
void usb_remove_hcd(struct usb_hcd *hcd ) 
{ struct usb_device *rhdev ;
  struct _ddebug descriptor ;
  long tmp ;
  int tmp___0 ;

  {
  rhdev = hcd->self.root_hub;
  _dev_info((struct device  const  *)hcd->self.controller, "remove, state %x\n", hcd->state);
  usb_get_dev(rhdev);
  sysfs_remove_group(& rhdev->dev.kobj, (struct attribute_group  const  *)(& usb_bus_attr_group));
  clear_bit(5, (unsigned long volatile   *)(& hcd->flags));
  if (hcd->state & 1) {
    hcd->state = 133;
  }
  descriptor.modname = "usbcore";
  descriptor.function = "usb_remove_hcd";
  descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hcd.c.prepared";
  descriptor.format = "roothub graceful disconnect\n";
  descriptor.lineno = 2715U;
  descriptor.flags = 1U;
  tmp = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
  if (tmp != 0L) {
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)hcd->self.controller,
                      "roothub graceful disconnect\n");
  }
  spin_lock_irq(& hcd_root_hub_lock);
  hcd->rh_registered = 0U;
  spin_unlock_irq(& hcd_root_hub_lock);
  cancel_work_sync(& hcd->wakeup_work);
  ldv_mutex_lock_65(& usb_bus_list_lock);
  usb_disconnect(& rhdev);
  ldv_mutex_unlock_66(& usb_bus_list_lock);
  hcd->rh_pollable = 0U;
  clear_bit(2, (unsigned long volatile   *)(& hcd->flags));
  del_timer_sync(& hcd->rh_timer);
  (*((hcd->driver)->stop))(hcd);
  hcd->state = 0;
  clear_bit(2, (unsigned long volatile   *)(& hcd->flags));
  del_timer_sync(& hcd->rh_timer);
  tmp___0 = usb_hcd_is_primary_hcd(hcd);
  if (tmp___0 != 0) {
    if (hcd->irq != 0U) {
      free_irq(hcd->irq, (void *)hcd);
    }
  }
  usb_put_dev(hcd->self.root_hub);
  usb_deregister_bus(& hcd->self);
  hcd_buffer_destroy(hcd);
  return;
}
}
void usb_hcd_platform_shutdown(struct platform_device *dev ) 
{ struct usb_hcd *hcd ;
  void *tmp ;

  {
  tmp = platform_get_drvdata((struct platform_device  const  *)dev);
  hcd = (struct usb_hcd *)tmp;
  if ((unsigned long )(hcd->driver)->shutdown != (unsigned long )((void (*)(struct usb_hcd * ))0)) {
    (*((hcd->driver)->shutdown))(hcd);
  }
  return;
}
}
int usb_mon_register(struct usb_mon_operations *ops ) 
{ 

  {
  if ((unsigned long )mon_ops != (unsigned long )((struct usb_mon_operations *)0)) {
    return (-16);
  }
  mon_ops = ops;
  __asm__  volatile   ("mfence": : : "memory");
  return (0);
}
}
void usb_mon_deregister(void) 
{ 

  {
  if ((unsigned long )mon_ops == (unsigned long )((struct usb_mon_operations *)0)) {
    printk("\vUSB: monitor was not registered\n");
    return;
  }
  mon_ops = 0;
  __asm__  volatile   ("mfence": : : "memory");
  return;
}
}
void ldv_main2_sequence_infinite_withcheck_stateful(void) 
{ int var_usb_hcd_irq_45_p0 ;
  void *var_usb_hcd_irq_45_p1 ;
  unsigned long var_rh_timer_func_5_p0 ;
  int tmp ;
  int tmp___0 ;

  {
  LDV_IN_INTERRUPT = 1;
  ldv_initialize();
  goto ldv_33376;
  ldv_33375: 
  tmp = __VERIFIER_nondet_int();
  switch (tmp) {
  case 0: 
  LDV_IN_INTERRUPT = 2;
  ldv_handler_precall();
  usb_hcd_irq(var_usb_hcd_irq_45_p0, var_usb_hcd_irq_45_p1);
  LDV_IN_INTERRUPT = 1;
  goto ldv_33372;
  case 1: 
  ldv_handler_precall();
  rh_timer_func(var_rh_timer_func_5_p0);
  goto ldv_33372;
  default: ;
  goto ldv_33372;
  }
  ldv_33372: ;
  ldv_33376: 
  tmp___0 = __VERIFIER_nondet_int();
  if (tmp___0 != 0) {
    goto ldv_33375;
  }
  ldv_check_final_state();
  return;
}
}
void ldv_mutex_lock_49(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_lock(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_50(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_lock(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_51(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
int ldv_mutex_trylock_52(struct mutex *ldv_func_arg1 ) 
{ ldv_func_ret_type___2 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
  tmp = mutex_trylock(ldv_func_arg1);
  ldv_func_res = tmp;
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
  return (tmp___0);
  return (ldv_func_res);
}
}
void ldv_mutex_unlock_53(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_54(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_usb_bus_list_lock(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_55(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_usb_bus_list_lock(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_56(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_usb_bus_list_lock(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_57(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_usb_bus_list_lock(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_58(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_usb_bus_list_lock(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_59(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_usb_bus_list_lock(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_60(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_usb_bus_list_lock(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_61(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_usb_bus_list_lock(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_62(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_usb_bus_list_lock(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_63(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_usb_bus_list_lock(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_64(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_usb_bus_list_lock(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_65(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_usb_bus_list_lock(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_66(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_usb_bus_list_lock(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
 static int fls(int x ) 
{ int r ;

  {
  __asm__  ("bsrl %1,%0": "=r" (r): "rm" (x), "0" (-1));
  return (r + 1);
}
}
 static int __ilog2_u32(u32 n ) 
{ int tmp ;

  {
  tmp = fls((int )n);
  return (tmp + -1);
}
}
extern void warn_slowpath_fmt(char const   * , int  , char const   *  , ...) ;
int ldv_mutex_trylock_88(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_86(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_89(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_85(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_87(struct mutex *ldv_func_arg1 ) ;
extern char const   *dev_driver_string(struct device  const  * ) ;
extern long schedule_timeout(long  ) ;
void usb_init_urb(struct urb *urb ) ;
int usb_unlink_urb(struct urb *urb ) ;
void usb_poison_urb(struct urb *urb ) ;
void usb_unpoison_urb(struct urb *urb ) ;
void usb_block_urb(struct urb *urb ) ;
void usb_kill_anchored_urbs(struct usb_anchor *anchor ) ;
void usb_poison_anchored_urbs(struct usb_anchor *anchor ) ;
void usb_unpoison_anchored_urbs(struct usb_anchor *anchor ) ;
void usb_unlink_anchored_urbs(struct usb_anchor *anchor ) ;
void usb_anchor_urb(struct urb *urb , struct usb_anchor *anchor ) ;
int usb_wait_anchor_empty_timeout(struct usb_anchor *anchor , unsigned int timeout ) ;
struct urb *usb_get_from_anchor(struct usb_anchor *anchor ) ;
void usb_scuttle_anchored_urbs(struct usb_anchor *anchor ) ;
int usb_anchor_empty(struct usb_anchor *anchor ) ;
 static struct usb_host_endpoint *usb_pipe_endpoint(struct usb_device *dev ,
                                                            unsigned int pipe ) 
{ struct usb_host_endpoint **eps ;

  {
  if ((pipe & 128U) != 0U) {
    eps = (struct usb_host_endpoint **)(& dev->ep_in);
  } else {
    eps = (struct usb_host_endpoint **)(& dev->ep_out);
  }
  return (*(eps + ((unsigned long )(pipe >> 15) & 15UL)));
}
}
static void urb_destroy(struct kref *kref ) 
{ struct urb *urb ;
  struct kref  const  *__mptr ;

  {
  __mptr = (struct kref  const  *)kref;
  urb = (struct urb *)__mptr;
  if ((urb->transfer_flags & 256U) != 0U) {
    kfree((void const   *)urb->transfer_buffer);
  }
  kfree((void const   *)urb);
  return;
}
}
void usb_init_urb(struct urb *urb ) 
{ 

  {
  if ((unsigned long )urb != (unsigned long )((struct urb *)0)) {
    memset((void *)urb, 0, 192UL);
    kref_init(& urb->kref);
    INIT_LIST_HEAD(& urb->anchor_list);
  }
  return;
}
}
struct urb *usb_alloc_urb(int iso_packets , gfp_t mem_flags ) 
{ struct urb *urb ;
  void *tmp ;

  {
  tmp = kmalloc(((unsigned long )iso_packets + 12UL) * 16UL, mem_flags);
  urb = (struct urb *)tmp;
  if ((unsigned long )urb == (unsigned long )((struct urb *)0)) {
    printk("\valloc_urb: kmalloc failed\n");
    return (0);
  }
  usb_init_urb(urb);
  return (urb);
}
}
void usb_free_urb(struct urb *urb ) 
{ 

  {
  if ((unsigned long )urb != (unsigned long )((struct urb *)0)) {
    kref_put(& urb->kref, & urb_destroy);
  }
  return;
}
}
struct urb *usb_get_urb(struct urb *urb ) 
{ 

  {
  if ((unsigned long )urb != (unsigned long )((struct urb *)0)) {
    kref_get(& urb->kref);
  }
  return (urb);
}
}
void usb_anchor_urb(struct urb *urb , struct usb_anchor *anchor ) 
{ unsigned long flags ;
  raw_spinlock_t *tmp ;
  long tmp___0 ;

  {
  tmp = spinlock_check(& anchor->lock);
  flags = _raw_spin_lock_irqsave(tmp);
  usb_get_urb(urb);
  list_add_tail(& urb->anchor_list, & anchor->urb_list);
  urb->anchor = anchor;
  tmp___0 = ldv__builtin_expect((long )*((unsigned char *)anchor + 176UL) & 1L, 0L);
  if (tmp___0 != 0L) {
    atomic_inc(& urb->reject);
  }
  spin_unlock_irqrestore(& anchor->lock, flags);
  return;
}
}
static void __usb_unanchor_urb(struct urb *urb , struct usb_anchor *anchor ) 
{ int tmp ;

  {
  urb->anchor = 0;
  list_del(& urb->anchor_list);
  usb_free_urb(urb);
  tmp = list_empty((struct list_head  const  *)(& anchor->urb_list));
  if (tmp != 0) {
    __wake_up(& anchor->wait, 3U, 1, 0);
  }
  return;
}
}
void usb_unanchor_urb(struct urb *urb ) 
{ unsigned long flags ;
  struct usb_anchor *anchor ;
  raw_spinlock_t *tmp ;
  long tmp___0 ;

  {
  if ((unsigned long )urb == (unsigned long )((struct urb *)0)) {
    return;
  }
  anchor = urb->anchor;
  if ((unsigned long )anchor == (unsigned long )((struct usb_anchor *)0)) {
    return;
  }
  tmp = spinlock_check(& anchor->lock);
  flags = _raw_spin_lock_irqsave(tmp);
  tmp___0 = ldv__builtin_expect((unsigned long )urb->anchor == (unsigned long )anchor,
                                1L);
  if (tmp___0 != 0L) {
    __usb_unanchor_urb(urb, anchor);
  }
  spin_unlock_irqrestore(& anchor->lock, flags);
  return;
}
}
int usb_submit_urb(struct urb *urb , gfp_t mem_flags ) 
{ int xfertype ;
  int max ;
  struct usb_device *dev ;
  struct usb_host_endpoint *ep ;
  int is_out ;
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  struct usb_ctrlrequest *setup ;
  struct _ddebug descriptor ;
  int tmp___2 ;
  long tmp___3 ;
  int n ;
  int len ;
  int burst ;
  int mult ;
  int mult___0 ;
  unsigned int allowed ;
  int pipetypes[4U] ;
  int __ret_warn_on___0 ;
  char const   *tmp___4 ;
  long tmp___5 ;
  int __ret_warn_on___1 ;
  char const   *tmp___6 ;
  long tmp___7 ;
  int _min1 ;
  int _min2 ;
  int tmp___8 ;
  int tmp___9 ;
  unsigned int tmp___10 ;
  char *tmp___11 ;

  {
  if ((unsigned long )urb == (unsigned long )((struct urb *)0) || (unsigned long )urb->complete == (unsigned long )((void (*)(struct urb * ))0)) {
    return (-22);
  }
  if ((unsigned long )urb->hcpriv != (unsigned long )((void *)0)) {
    __ret_warn_once = 1;
    tmp___1 = ldv__builtin_expect(__ret_warn_once != 0, 0L);
    if (tmp___1 != 0L) {
      __ret_warn_on = ! __warned;
      tmp = ldv__builtin_expect(__ret_warn_on != 0, 0L);
      if (tmp != 0L) {
        warn_slowpath_fmt("/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/urb.c.prepared",
                          398, "URB %p submitted while active\n", urb);
      }
      tmp___0 = ldv__builtin_expect(__ret_warn_on != 0, 0L);
      if (tmp___0 != 0L) {
        __warned = 1;
      }
    }
    ldv__builtin_expect(__ret_warn_once != 0, 0L);
    return (-16);
  }
  dev = urb->dev;
  if ((unsigned long )dev == (unsigned long )((struct usb_device *)0) || (unsigned int )dev->state <= 3U) {
    return (-19);
  }
  ep = usb_pipe_endpoint(dev, urb->pipe);
  if ((unsigned long )ep == (unsigned long )((struct usb_host_endpoint *)0)) {
    return (-2);
  }
  urb->ep = ep;
  urb->status = -115;
  urb->actual_length = 0U;
  xfertype = usb_endpoint_type((struct usb_endpoint_descriptor  const  *)(& ep->desc));
  if (xfertype == 0) {
    setup = (struct usb_ctrlrequest *)urb->setup_packet;
    if ((unsigned long )setup == (unsigned long )((struct usb_ctrlrequest *)0)) {
      return (-8);
    }
    is_out = (int )((signed char )setup->bRequestType) >= 0 || (unsigned int )setup->wLength == 0U;
  } else {
    is_out = usb_endpoint_dir_out((struct usb_endpoint_descriptor  const  *)(& ep->desc));
  }
  urb->transfer_flags &= 4286643711U;
  if (is_out != 0) {
    tmp___10 = 0U;
  } else {
    tmp___10 = 512U;
  }
  urb->transfer_flags |= tmp___10;
  if (xfertype != 0 && (unsigned int )dev->state <= 6U) {
    return (-19);
  }
  max = usb_endpoint_maxp((struct usb_endpoint_descriptor  const  *)(& ep->desc));
  if (max <= 0) {
    descriptor.modname = "usbcore";
    descriptor.function = "usb_submit_urb";
    descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/urb.c.prepared";
    descriptor.format = "bogus endpoint ep%d%s in %s (bad maxpacket %d)\n";
    descriptor.lineno = 450U;
    descriptor.flags = 1U;
    tmp___3 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
    if (tmp___3 != 0L) {
      tmp___2 = usb_endpoint_num((struct usb_endpoint_descriptor  const  *)(& ep->desc));
      if (is_out != 0) {
        tmp___11 = (char *)"out";
      } else {
        tmp___11 = (char *)"in";
      }
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& dev->dev), "bogus endpoint ep%d%s in %s (bad maxpacket %d)\n",
                        tmp___2, tmp___11, "usb_submit_urb", max);
    }
    return (-90);
  }
  if (xfertype == 1) {
    if ((unsigned int )dev->speed == 5U) {
      burst = (int )ep->ss_ep_comp.bMaxBurst + 1;
      mult = ((int )ep->ss_ep_comp.bmAttributes & 3) + 1;
      max *= burst;
      max *= mult;
    }
    if ((unsigned int )dev->speed == 3U) {
      mult___0 = ((max >> 11) & 3) + 1;
      max &= 2047;
      max *= mult___0;
    }
    if (urb->number_of_packets <= 0) {
      return (-22);
    }
    n = 0;
    goto ldv_25522;
    ldv_25521: 
    len = (int )urb->iso_frame_desc[n].length;
    if (len < 0 || len > max) {
      return (-90);
    }
    urb->iso_frame_desc[n].status = -18;
    urb->iso_frame_desc[n].actual_length = 0U;
    n ++;
    ldv_25522: ;
    if (urb->number_of_packets > n) {
      goto ldv_25521;
    }
  }
  if ((int )urb->transfer_buffer_length < 0) {
    return (-90);
  }
  pipetypes[0] = 2;
  pipetypes[1] = 0;
  pipetypes[2] = 3;
  pipetypes[3] = 1;
  if (urb->pipe >> 30 != (unsigned int )pipetypes[xfertype]) {
    __ret_warn_on___0 = 1;
    tmp___5 = ldv__builtin_expect(__ret_warn_on___0 != 0, 0L);
    if (tmp___5 != 0L) {
      tmp___4 = dev_driver_string((struct device  const  *)(& dev->dev));
      warn_slowpath_fmt("/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/urb.c.prepared",
                        506, "Device: %s\nBOGUS urb xfer, pipe %x != type %x\n", tmp___4,
                        urb->pipe >> 30, pipetypes[xfertype]);
    }
    ldv__builtin_expect(__ret_warn_on___0 != 0, 0L);
  }
  allowed = 900U;
  switch (xfertype) {
  case 2: ;
  if (is_out != 0) {
    allowed |= 64U;
  }
  case 0: 
  allowed |= 32U;
  default: ;
  if (is_out == 0) {
    allowed |= 1U;
  }
  goto ldv_25531;
  case 1: 
  allowed |= 2U;
  goto ldv_25531;
  }
  ldv_25531: 
  allowed = urb->transfer_flags & allowed;
  if (urb->transfer_flags != allowed) {
    __ret_warn_on___1 = 1;
    tmp___7 = ldv__builtin_expect(__ret_warn_on___1 != 0, 0L);
    if (tmp___7 != 0L) {
      tmp___6 = dev_driver_string((struct device  const  *)(& dev->dev));
      warn_slowpath_fmt("/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/urb.c.prepared",
                        532, "Device: %s\nBOGUS urb flags, %x --> %x\n", tmp___6,
                        urb->transfer_flags, allowed);
    }
    ldv__builtin_expect(__ret_warn_on___1 != 0, 0L);
  }
  switch (xfertype) {
  case 1: ;
  case 3: ;
  switch ((unsigned int )dev->speed) {
  case 4U: ;
  if (urb->interval <= 5) {
    return (-22);
  }
  goto ldv_25538;
  default: ;
  if (urb->interval <= 0) {
    return (-22);
  }
  goto ldv_25538;
  }
  ldv_25538: ;
  switch ((unsigned int )dev->speed) {
  case 5U: ;
  if (urb->interval > 32768) {
    return (-22);
  }
  max = 32768;
  goto ldv_25541;
  case 4U: ;
  if (urb->interval > 16) {
    return (-22);
  }
  goto ldv_25541;
  case 3U: ;
  if (urb->interval > 8192) {
    urb->interval = 8192;
  }
  max = 8192;
  goto ldv_25541;
  case 2U: ;
  case 1U: ;
  if (xfertype == 3) {
    if (urb->interval > 255) {
      return (-22);
    }
    max = 128;
  } else {
    if (urb->interval > 1024) {
      urb->interval = 1024;
    }
    max = 1024;
  }
  goto ldv_25541;
  default: ;
  return (-22);
  }
  ldv_25541: ;
  if ((unsigned int )dev->speed != 4U) {
    _min1 = max;
    tmp___8 = __ilog2_u32((u32 )urb->interval);
    _min2 = 1 << tmp___8;
    if (_min1 < _min2) {
      urb->interval = _min1;
    } else {
      urb->interval = _min2;
    }
  }
  }
  tmp___9 = usb_hcd_submit_urb(urb, mem_flags);
  return (tmp___9);
}
}
int usb_unlink_urb(struct urb *urb ) 
{ int tmp ;

  {
  if ((unsigned long )urb == (unsigned long )((struct urb *)0)) {
    return (-22);
  }
  if ((unsigned long )urb->dev == (unsigned long )((struct usb_device *)0)) {
    return (-19);
  }
  if ((unsigned long )urb->ep == (unsigned long )((struct usb_host_endpoint *)0)) {
    return (-43);
  }
  tmp = usb_hcd_unlink_urb(urb, -104);
  return (tmp);
}
}
void usb_kill_urb(struct urb *urb ) 
{ int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
  __might_sleep("/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/urb.c.prepared",
                715, 0);
  if (((unsigned long )urb == (unsigned long )((struct urb *)0) || (unsigned long )urb->dev == (unsigned long )((struct usb_device *)0)) || (unsigned long )urb->ep == (unsigned long )((struct usb_host_endpoint *)0)) {
    return;
  }
  atomic_inc(& urb->reject);
  usb_hcd_unlink_urb(urb, -2);
  tmp = atomic_read((atomic_t const   *)(& urb->use_count));
  if (tmp == 0) {
    goto ldv_25569;
  }
  tmp___0 = get_current();
  __wait.flags = 0U;
  __wait.private = (void *)tmp___0;
  __wait.func = & autoremove_wake_function;
  __wait.task_list.next = & __wait.task_list;
  __wait.task_list.prev = & __wait.task_list;
  ldv_25572: 
  prepare_to_wait(& usb_kill_urb_queue, & __wait, 2);
  tmp___1 = atomic_read((atomic_t const   *)(& urb->use_count));
  if (tmp___1 == 0) {
    goto ldv_25571;
  }
  schedule();
  goto ldv_25572;
  ldv_25571: 
  finish_wait(& usb_kill_urb_queue, & __wait);
  ldv_25569: 
  atomic_dec(& urb->reject);
  return;
}
}
void usb_poison_urb(struct urb *urb ) 
{ int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
  __might_sleep("/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/urb.c.prepared",
                756, 0);
  if ((unsigned long )urb == (unsigned long )((struct urb *)0)) {
    return;
  }
  atomic_inc(& urb->reject);
  if ((unsigned long )urb->dev == (unsigned long )((struct usb_device *)0) || (unsigned long )urb->ep == (unsigned long )((struct usb_host_endpoint *)0)) {
    return;
  }
  usb_hcd_unlink_urb(urb, -2);
  tmp = atomic_read((atomic_t const   *)(& urb->use_count));
  if (tmp == 0) {
    goto ldv_25582;
  }
  tmp___0 = get_current();
  __wait.flags = 0U;
  __wait.private = (void *)tmp___0;
  __wait.func = & autoremove_wake_function;
  __wait.task_list.next = & __wait.task_list;
  __wait.task_list.prev = & __wait.task_list;
  ldv_25585: 
  prepare_to_wait(& usb_kill_urb_queue, & __wait, 2);
  tmp___1 = atomic_read((atomic_t const   *)(& urb->use_count));
  if (tmp___1 == 0) {
    goto ldv_25584;
  }
  schedule();
  goto ldv_25585;
  ldv_25584: 
  finish_wait(& usb_kill_urb_queue, & __wait);
  ldv_25582: ;
  return;
}
}
void usb_unpoison_urb(struct urb *urb ) 
{ 

  {
  if ((unsigned long )urb == (unsigned long )((struct urb *)0)) {
    return;
  }
  atomic_dec(& urb->reject);
  return;
}
}
void usb_block_urb(struct urb *urb ) 
{ 

  {
  if ((unsigned long )urb == (unsigned long )((struct urb *)0)) {
    return;
  }
  atomic_inc(& urb->reject);
  return;
}
}
void usb_kill_anchored_urbs(struct usb_anchor *anchor ) 
{ struct urb *victim ;
  struct list_head  const  *__mptr ;
  int tmp ;

  {
  spin_lock_irq(& anchor->lock);
  goto ldv_25617;
  ldv_25616: 
  __mptr = (struct list_head  const  *)anchor->urb_list.prev;
  victim = (struct urb *)__mptr + 0xffffffffffffffd0UL;
  usb_get_urb(victim);
  spin_unlock_irq(& anchor->lock);
  usb_kill_urb(victim);
  usb_free_urb(victim);
  spin_lock_irq(& anchor->lock);
  ldv_25617: 
  tmp = list_empty((struct list_head  const  *)(& anchor->urb_list));
  if (tmp == 0) {
    goto ldv_25616;
  }
  spin_unlock_irq(& anchor->lock);
  return;
}
}
void usb_poison_anchored_urbs(struct usb_anchor *anchor ) 
{ struct urb *victim ;
  struct list_head  const  *__mptr ;
  int tmp ;

  {
  spin_lock_irq(& anchor->lock);
  anchor->poisoned = 1U;
  goto ldv_25632;
  ldv_25631: 
  __mptr = (struct list_head  const  *)anchor->urb_list.prev;
  victim = (struct urb *)__mptr + 0xffffffffffffffd0UL;
  usb_get_urb(victim);
  spin_unlock_irq(& anchor->lock);
  usb_poison_urb(victim);
  usb_free_urb(victim);
  spin_lock_irq(& anchor->lock);
  ldv_25632: 
  tmp = list_empty((struct list_head  const  *)(& anchor->urb_list));
  if (tmp == 0) {
    goto ldv_25631;
  }
  spin_unlock_irq(& anchor->lock);
  return;
}
}
void usb_unpoison_anchored_urbs(struct usb_anchor *anchor ) 
{ unsigned long flags ;
  struct urb *lazarus ;
  raw_spinlock_t *tmp ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
  tmp = spinlock_check(& anchor->lock);
  flags = _raw_spin_lock_irqsave(tmp);
  __mptr = (struct list_head  const  *)anchor->urb_list.next;
  lazarus = (struct urb *)__mptr + 0xffffffffffffffd0UL;
  goto ldv_25653;
  ldv_25652: 
  usb_unpoison_urb(lazarus);
  __mptr___0 = (struct list_head  const  *)lazarus->anchor_list.next;
  lazarus = (struct urb *)__mptr___0 + 0xffffffffffffffd0UL;
  ldv_25653: ;
  if ((unsigned long )(& lazarus->anchor_list) != (unsigned long )(& anchor->urb_list)) {
    goto ldv_25652;
  }
  anchor->poisoned = 0U;
  spin_unlock_irqrestore(& anchor->lock, flags);
  return;
}
}
void usb_unlink_anchored_urbs(struct usb_anchor *anchor ) 
{ struct urb *victim ;

  {
  goto ldv_25666;
  ldv_25665: 
  usb_unlink_urb(victim);
  usb_free_urb(victim);
  ldv_25666: 
  victim = usb_get_from_anchor(anchor);
  if ((unsigned long )victim != (unsigned long )((struct urb *)0)) {
    goto ldv_25665;
  }
  return;
}
}
int usb_wait_anchor_empty_timeout(struct usb_anchor *anchor , unsigned int timeout ) 
{ long __ret ;
  unsigned long tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
  tmp = msecs_to_jiffies(timeout);
  __ret = (long )tmp;
  tmp___2 = list_empty((struct list_head  const  *)(& anchor->urb_list));
  if (tmp___2 == 0) {
    tmp___0 = get_current();
    __wait.flags = 0U;
    __wait.private = (void *)tmp___0;
    __wait.func = & autoremove_wake_function;
    __wait.task_list.next = & __wait.task_list;
    __wait.task_list.prev = & __wait.task_list;
    ldv_25681: 
    prepare_to_wait(& anchor->wait, & __wait, 2);
    tmp___1 = list_empty((struct list_head  const  *)(& anchor->urb_list));
    if (tmp___1 != 0) {
      goto ldv_25680;
    }
    __ret = schedule_timeout(__ret);
    if (__ret == 0L) {
      goto ldv_25680;
    }
    goto ldv_25681;
    ldv_25680: 
    finish_wait(& anchor->wait, & __wait);
  }
  return ((int )__ret);
}
}
struct urb *usb_get_from_anchor(struct usb_anchor *anchor ) 
{ struct urb *victim ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  struct list_head  const  *__mptr ;
  int tmp___0 ;

  {
  tmp = spinlock_check(& anchor->lock);
  flags = _raw_spin_lock_irqsave(tmp);
  tmp___0 = list_empty((struct list_head  const  *)(& anchor->urb_list));
  if (tmp___0 == 0) {
    __mptr = (struct list_head  const  *)anchor->urb_list.next;
    victim = (struct urb *)__mptr + 0xffffffffffffffd0UL;
    usb_get_urb(victim);
    __usb_unanchor_urb(victim, anchor);
  } else {
    victim = 0;
  }
  spin_unlock_irqrestore(& anchor->lock, flags);
  return (victim);
}
}
void usb_scuttle_anchored_urbs(struct usb_anchor *anchor ) 
{ struct urb *victim ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  struct list_head  const  *__mptr ;
  int tmp___0 ;

  {
  tmp = spinlock_check(& anchor->lock);
  flags = _raw_spin_lock_irqsave(tmp);
  goto ldv_25717;
  ldv_25716: 
  __mptr = (struct list_head  const  *)anchor->urb_list.prev;
  victim = (struct urb *)__mptr + 0xffffffffffffffd0UL;
  __usb_unanchor_urb(victim, anchor);
  ldv_25717: 
  tmp___0 = list_empty((struct list_head  const  *)(& anchor->urb_list));
  if (tmp___0 == 0) {
    goto ldv_25716;
  }
  spin_unlock_irqrestore(& anchor->lock, flags);
  return;
}
}
int usb_anchor_empty(struct usb_anchor *anchor ) 
{ int tmp ;

  {
  tmp = list_empty((struct list_head  const  *)(& anchor->urb_list));
  return (tmp);
}
}
void ldv_mutex_lock_85(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_lock(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_86(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_lock(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_87(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
int ldv_mutex_trylock_88(struct mutex *ldv_func_arg1 ) 
{ ldv_func_ret_type___2 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
  tmp = mutex_trylock(ldv_func_arg1);
  ldv_func_res = tmp;
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
  return (tmp___0);
  return (ldv_func_res);
}
}
void ldv_mutex_unlock_89(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
 static void rep_nop(void) 
{ 

  {
  __asm__  volatile   ("rep; nop": : : "memory");
  return;
}
}
 static void cpu_relax(void) 
{ 

  {
  rep_nop();
  return;
}
}
int ldv_mutex_trylock_98(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_96(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_99(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_101(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_103(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_104(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_105(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_106(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_108(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_109(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_110(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_112(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_113(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_114(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_95(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_97(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_100(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_102(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_107(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_111(struct mutex *ldv_func_arg1 ) ;
extern void __init_waitqueue_head(wait_queue_head_t * , char const   * , struct lock_class_key * ) ;
 static void init_completion(struct completion *x ) 
{ struct lock_class_key __key ;

  {
  x->done = 0U;
  __init_waitqueue_head(& x->wait, "&x->wait", & __key);
  return;
}
}
extern void wait_for_completion(struct completion * ) ;
extern unsigned long wait_for_completion_timeout(struct completion * , unsigned long  ) ;
extern void complete(struct completion * ) ;
 static int device_is_registered(struct device *dev ) 
{ 

  {
  return ((int )dev->kobj.state_in_sysfs);
}
}
 static void device_lock___1(struct device *dev ) 
{ 

  {
  ldv_mutex_lock_97(& dev->mutex);
  return;
}
}
 static void device_unlock___1(struct device *dev ) 
{ 

  {
  ldv_mutex_unlock_99(& dev->mutex);
  return;
}
}
 static int PageHighMem(struct page  const  *page ) 
{ 

  {
  return (0);
}
}
 static struct page *sg_page___0(struct scatterlist *sg ) 
{ long tmp ;
  long tmp___0 ;

  {
  tmp = ldv__builtin_expect(sg->sg_magic != 2271560481UL, 0L);
  if (tmp != 0L) {
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (98), "i" (12UL));
    ldv_18533: ;
    goto ldv_18533;
  }
  tmp___0 = ldv__builtin_expect((long )((int )sg->page_link) & 1L, 0L);
  if (tmp___0 != 0L) {
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (99), "i" (12UL));
    ldv_18534: ;
    goto ldv_18534;
  }
  return ((struct page *)(sg->page_link & 0xfffffffffffffffcUL));
}
}
 static void *sg_virt___0(struct scatterlist *sg ) 
{ struct page *tmp ;
  void *tmp___0 ;

  {
  tmp = sg_page___0(sg);
  tmp___0 = lowmem_page_address((struct page  const  *)tmp);
  return (tmp___0 + (unsigned long )sg->offset);
}
}
extern void yield(void) ;
extern void pm_runtime_no_callbacks(struct device * ) ;
 static void usb_fill_control_urb(struct urb *urb , struct usb_device *dev ,
                                          unsigned int pipe , unsigned char *setup_packet ,
                                          void *transfer_buffer , int buffer_length ,
                                          void (*complete_fn)(struct urb * ) , void *context ) 
{ 

  {
  urb->dev = dev;
  urb->pipe = pipe;
  urb->setup_packet = setup_packet;
  urb->transfer_buffer = transfer_buffer;
  urb->transfer_buffer_length = (u32 )buffer_length;
  urb->complete = complete_fn;
  urb->context = context;
  return;
}
}
 static void usb_fill_bulk_urb(struct urb *urb , struct usb_device *dev ,
                                       unsigned int pipe , void *transfer_buffer ,
                                       int buffer_length , void (*complete_fn)(struct urb * ) ,
                                       void *context ) 
{ 

  {
  urb->dev = dev;
  urb->pipe = pipe;
  urb->transfer_buffer = transfer_buffer;
  urb->transfer_buffer_length = (u32 )buffer_length;
  urb->complete = complete_fn;
  urb->context = context;
  return;
}
}
int usb_interrupt_msg(struct usb_device *usb_dev , unsigned int pipe , void *data ,
                      int len , int *actual_length , int timeout ) ;
int usb_bulk_msg(struct usb_device *usb_dev , unsigned int pipe , void *data , int len ,
                 int *actual_length , int timeout ) ;
int usb_clear_halt(struct usb_device *dev , int pipe ) ;
int usb_reset_configuration(struct usb_device *dev ) ;
void usb_reset_endpoint(struct usb_device *dev , unsigned int epaddr ) ;
int usb_driver_set_configuration(struct usb_device *udev , int config ) ;
int usb_sg_init(struct usb_sg_request *io , struct usb_device *dev , unsigned int pipe ,
                unsigned int period , struct scatterlist *sg , int nents , size_t length ,
                gfp_t mem_flags ) ;
void usb_sg_cancel(struct usb_sg_request *io ) ;
void usb_sg_wait(struct usb_sg_request *io ) ;
extern unsigned char const   _ctype[] ;
extern int utf16s_to_utf8s(wchar_t const   * , int  , enum utf16_endian  , u8 * ,
                           int  ) ;
void usb_release_interface_cache(struct kref *ref ) ;
struct attribute_group  const  *usb_interface_groups[3U] ;
static void cancel_async_set_config(struct usb_device *udev ) ;
static void usb_api_blocking_completion(struct urb *urb ) 
{ struct api_context *ctx ;

  {
  ctx = (struct api_context *)urb->context;
  ctx->status = urb->status;
  complete(& ctx->done);
  return;
}
}
static int usb_start_wait_urb(struct urb *urb , int timeout , int *actual_length ) 
{ struct api_context ctx ;
  unsigned long expire ;
  int retval ;
  long tmp ;
  unsigned long tmp___0 ;
  struct _ddebug descriptor ;
  int tmp___1 ;
  int tmp___2 ;
  struct task_struct *tmp___3 ;
  long tmp___4 ;
  unsigned long tmp___5 ;
  char *tmp___6 ;

  {
  init_completion(& ctx.done);
  urb->context = (void *)(& ctx);
  urb->actual_length = 0U;
  retval = usb_submit_urb(urb, 16U);
  tmp = ldv__builtin_expect(retval != 0, 0L);
  if (tmp != 0L) {
    goto out;
  }
  if (timeout != 0) {
    tmp___0 = msecs_to_jiffies((unsigned int const   )timeout);
    expire = tmp___0;
  } else {
    expire = 9223372036854775807UL;
  }
  tmp___5 = wait_for_completion_timeout(& ctx.done, expire);
  if (tmp___5 == 0UL) {
    usb_kill_urb(urb);
    if (ctx.status != -2) {
      retval = ctx.status;
    } else {
      retval = -110;
    }
    descriptor.modname = "usbcore";
    descriptor.function = "usb_start_wait_urb";
    descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/message.c.prepared";
    descriptor.format = "%s timed out on ep%d%s len=%u/%u\n";
    descriptor.lineno = 140U;
    descriptor.flags = 1U;
    tmp___4 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
    if (tmp___4 != 0L) {
      tmp___1 = usb_urb_dir_in(urb);
      tmp___2 = usb_endpoint_num((struct usb_endpoint_descriptor  const  *)(& (urb->ep)->desc));
      tmp___3 = get_current();
      if (tmp___1 != 0) {
        tmp___6 = (char *)"in";
      } else {
        tmp___6 = (char *)"out";
      }
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& (urb->dev)->dev),
                        "%s timed out on ep%d%s len=%u/%u\n", (char *)(& tmp___3->comm),
                        tmp___2, tmp___6, urb->actual_length, urb->transfer_buffer_length);
    }
  } else {
    retval = ctx.status;
  }
  out: ;
  if ((unsigned long )actual_length != (unsigned long )((int *)0)) {
    *actual_length = (int )urb->actual_length;
  }
  usb_free_urb(urb);
  return (retval);
}
}
static int usb_internal_control_msg(struct usb_device *usb_dev , unsigned int pipe ,
                                    struct usb_ctrlrequest *cmd , void *data , int len ,
                                    int timeout ) 
{ struct urb *urb ;
  int retv ;
  int length ;

  {
  urb = usb_alloc_urb(0, 16U);
  if ((unsigned long )urb == (unsigned long )((struct urb *)0)) {
    return (-12);
  }
  usb_fill_control_urb(urb, usb_dev, pipe, (unsigned char *)cmd, data, len, & usb_api_blocking_completion,
                       0);
  retv = usb_start_wait_urb(urb, timeout, & length);
  if (retv < 0) {
    return (retv);
  } else {
    return (length);
  }
}
}
int usb_control_msg(struct usb_device *dev , unsigned int pipe , __u8 request , __u8 requesttype ,
                    __u16 value , __u16 index , void *data , __u16 size , int timeout ) 
{ struct usb_ctrlrequest *dr ;
  int ret ;
  void *tmp ;

  {
  tmp = kmalloc(8UL, 16U);
  dr = (struct usb_ctrlrequest *)tmp;
  if ((unsigned long )dr == (unsigned long )((struct usb_ctrlrequest *)0)) {
    return (-12);
  }
  dr->bRequestType = requesttype;
  dr->bRequest = request;
  dr->wValue = value;
  dr->wIndex = index;
  dr->wLength = size;
  ret = usb_internal_control_msg(dev, pipe, dr, data, (int )size, timeout);
  kfree((void const   *)dr);
  return (ret);
}
}
int usb_interrupt_msg(struct usb_device *usb_dev , unsigned int pipe , void *data ,
                      int len , int *actual_length , int timeout ) 
{ int tmp ;

  {
  tmp = usb_bulk_msg(usb_dev, pipe, data, len, actual_length, timeout);
  return (tmp);
}
}
int usb_bulk_msg(struct usb_device *usb_dev , unsigned int pipe , void *data , int len ,
                 int *actual_length , int timeout ) 
{ struct urb *urb ;
  struct usb_host_endpoint *ep ;
  int tmp ;

  {
  ep = usb_pipe_endpoint(usb_dev, pipe);
  if ((unsigned long )ep == (unsigned long )((struct usb_host_endpoint *)0) || len < 0) {
    return (-22);
  }
  urb = usb_alloc_urb(0, 208U);
  if ((unsigned long )urb == (unsigned long )((struct urb *)0)) {
    return (-12);
  }
  if (((int )ep->desc.bmAttributes & 3) == 3) {
    pipe = (pipe & 1073741823U) | 1073741824U;
    usb_fill_int_urb(urb, usb_dev, pipe, data, len, & usb_api_blocking_completion,
                     0, (int )ep->desc.bInterval);
  } else {
    usb_fill_bulk_urb(urb, usb_dev, pipe, data, len, & usb_api_blocking_completion,
                      0);
  }
  tmp = usb_start_wait_urb(urb, timeout, actual_length);
  return (tmp);
}
}
static void sg_clean(struct usb_sg_request *io ) 
{ int tmp ;

  {
  if ((unsigned long )io->urbs != (unsigned long )((struct urb **)0)) {
    goto ldv_33935;
    ldv_33934: 
    usb_free_urb(*(io->urbs + (unsigned long )io->entries));
    ldv_33935: 
    tmp = io->entries;
    (io->entries) --;
    if (tmp != 0) {
      goto ldv_33934;
    }
    kfree((void const   *)io->urbs);
    io->urbs = 0;
  }
  io->dev = 0;
  return;
}
}
static void sg_complete(struct urb *urb ) 
{ struct usb_sg_request *io ;
  int status ;
  int tmp ;
  int tmp___0 ;
  int i ;
  int found ;
  int retval ;
  char *tmp___1 ;

  {
  io = (struct usb_sg_request *)urb->context;
  status = urb->status;
  spin_lock(& io->lock);
  if ((io->status != 0 && (io->status != -104 || status != -104)) && urb->actual_length != 0U) {
    tmp = usb_urb_dir_in(urb);
    tmp___0 = usb_endpoint_num((struct usb_endpoint_descriptor  const  *)(& (urb->ep)->desc));
    if (tmp != 0) {
      tmp___1 = (char *)"in";
    } else {
      tmp___1 = (char *)"out";
    }
    dev_err((struct device  const  *)((io->dev)->bus)->controller, "dev %s ep%d%s scatterlist error %d/%d\n",
            (char *)(& (io->dev)->devpath), tmp___0, tmp___1, status, io->status);
  }
  if ((io->status == 0 && status != 0) && status != -104) {
    io->status = status;
    spin_unlock(& io->lock);
    i = 0;
    found = 0;
    goto ldv_33948;
    ldv_33947: ;
    if ((unsigned long )*(io->urbs + (unsigned long )i) == (unsigned long )((struct urb *)0) || (unsigned long )(*(io->urbs + (unsigned long )i))->dev == (unsigned long )((struct usb_device *)0)) {
      goto ldv_33945;
    }
    if (found != 0) {
      retval = usb_unlink_urb(*(io->urbs + (unsigned long )i));
      if (((retval != -115 && retval != -19) && retval != -16) && retval != -43) {
        dev_err((struct device  const  *)(& (io->dev)->dev), "%s, unlink --> %d\n",
                "sg_complete", retval);
      }
    } else
    if ((unsigned long )*(io->urbs + (unsigned long )i) == (unsigned long )urb) {
      found = 1;
    }
    ldv_33945: 
    i ++;
    ldv_33948: ;
    if (io->entries > i) {
      goto ldv_33947;
    }
    spin_lock(& io->lock);
  }
  io->bytes += (size_t )urb->actual_length;
  (io->count) --;
  if (io->count == 0) {
    complete(& io->complete);
  }
  spin_unlock(& io->lock);
  return;
}
}
int usb_sg_init(struct usb_sg_request *io , struct usb_device *dev , unsigned int pipe ,
                unsigned int period , struct scatterlist *sg , int nents , size_t length ,
                gfp_t mem_flags ) 
{ int i ;
  int urb_flags ;
  int use_sg ;
  struct lock_class_key __key ;
  void *tmp ;
  struct urb *urb ;
  unsigned int len ;
  struct scatterlist *sg2 ;
  int j ;
  struct page *tmp___0 ;
  int tmp___1 ;
  size_t __min1 ;
  size_t __min2 ;
  size_t tmp___2 ;

  {
  if ((((((unsigned long )io == (unsigned long )((struct usb_sg_request *)0) || (unsigned long )dev == (unsigned long )((struct usb_device *)0)) || (unsigned long )sg == (unsigned long )((struct scatterlist *)0)) || pipe >> 30 == 2U) || pipe >> 30 == 0U) || nents <= 0) {
    return (-22);
  }
  spinlock_check(& io->lock);
  __raw_spin_lock_init(& io->lock.ldv_6014.rlock, "&(&io->lock)->rlock", & __key);
  io->dev = dev;
  io->pipe = (int )pipe;
  if ((dev->bus)->sg_tablesize != 0U) {
    use_sg = 1;
    io->entries = 1;
  } else {
    use_sg = 0;
    io->entries = nents;
  }
  tmp = kmalloc((unsigned long )io->entries * 8UL, mem_flags);
  io->urbs = (struct urb **)tmp;
  if ((unsigned long )io->urbs == (unsigned long )((struct urb **)0)) {
    goto nomem;
  }
  urb_flags = 128;
  if ((pipe & 128U) != 0U) {
    urb_flags |= 1;
  }
  i = 0;
  sg = sg;
  goto ldv_33976;
  ldv_33975: 
  urb = usb_alloc_urb(0, mem_flags);
  if ((unsigned long )urb == (unsigned long )((struct urb *)0)) {
    io->entries = i;
    goto nomem;
  }
  *(io->urbs + (unsigned long )i) = urb;
  urb->dev = 0;
  urb->pipe = pipe;
  urb->interval = (int )period;
  urb->transfer_flags = (unsigned int )urb_flags;
  urb->complete = & sg_complete;
  urb->context = (void *)io;
  urb->sg = sg;
  if (use_sg != 0) {
    urb->transfer_buffer = 0;
    urb->num_sgs = nents;
    len = (unsigned int )length;
    if (len == 0U) {
      j = 0;
      sg2 = sg;
      goto ldv_33970;
      ldv_33969: 
      len = sg2->length + len;
      j ++;
      sg2 = sg_next(sg2);
      ldv_33970: ;
      if (j < nents) {
        goto ldv_33969;
      }
    }
  } else {
    tmp___0 = sg_page___0(sg);
    tmp___1 = PageHighMem((struct page  const  *)tmp___0);
    if (tmp___1 == 0) {
      urb->transfer_buffer = sg_virt___0(sg);
    } else {
      urb->transfer_buffer = 0;
    }
    len = sg->length;
    if (length != 0UL) {
      __min1 = (size_t )len;
      __min2 = length;
      if (__min1 < __min2) {
        tmp___2 = __min1;
      } else {
        tmp___2 = __min2;
      }
      len = (unsigned int )tmp___2;
      length -= (size_t )len;
      if (length == 0UL) {
        io->entries = i + 1;
      }
    }
  }
  urb->transfer_buffer_length = len;
  i ++;
  sg = sg_next(sg);
  ldv_33976: ;
  if (io->entries > i) {
    goto ldv_33975;
  }
  i --;
  (*(io->urbs + (unsigned long )i))->transfer_flags &= 4294967167U;
  io->count = io->entries;
  io->status = 0;
  io->bytes = 0UL;
  init_completion(& io->complete);
  return (0);
  nomem: 
  sg_clean(io);
  return (-12);
}
}
void usb_sg_wait(struct usb_sg_request *io ) 
{ int i ;
  int entries ;
  int retval ;
  struct _ddebug descriptor ;
  long tmp ;

  {
  entries = io->entries;
  spin_lock_irq(& io->lock);
  i = 0;
  goto ldv_34006;
  ldv_34005: 
  (*(io->urbs + (unsigned long )i))->dev = io->dev;
  retval = usb_submit_urb(*(io->urbs + (unsigned long )i), 32U);
  spin_unlock_irq(& io->lock);
  switch (retval) {
  case -6: ;
  case -11: ;
  case -12: 
  retval = 0;
  yield();
  goto ldv_34000;
  case 0: 
  i ++;
  cpu_relax();
  goto ldv_34000;
  default: 
  (*(io->urbs + (unsigned long )i))->status = retval;
  descriptor.modname = "usbcore";
  descriptor.function = "usb_sg_wait";
  descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/message.c.prepared";
  descriptor.format = "%s, submit --> %d\n";
  descriptor.lineno = 616U;
  descriptor.flags = 1U;
  tmp = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
  if (tmp != 0L) {
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& (io->dev)->dev), "%s, submit --> %d\n",
                      "usb_sg_wait", retval);
  }
  usb_sg_cancel(io);
  }
  ldv_34000: 
  spin_lock_irq(& io->lock);
  if (retval != 0 && (io->status == 0 || io->status == -104)) {
    io->status = retval;
  }
  ldv_34006: ;
  if (i < entries && io->status == 0) {
    goto ldv_34005;
  }
  io->count += i - entries;
  if (io->count == 0) {
    complete(& io->complete);
  }
  spin_unlock_irq(& io->lock);
  wait_for_completion(& io->complete);
  sg_clean(io);
  return;
}
}
void usb_sg_cancel(struct usb_sg_request *io ) 
{ unsigned long flags ;
  raw_spinlock_t *tmp ;
  int i ;
  int retval ;

  {
  tmp = spinlock_check(& io->lock);
  flags = _raw_spin_lock_irqsave(tmp);
  if (io->status == 0) {
    io->status = -104;
    spin_unlock(& io->lock);
    i = 0;
    goto ldv_34026;
    ldv_34025: ;
    if ((unsigned long )(*(io->urbs + (unsigned long )i))->dev == (unsigned long )((struct usb_device *)0)) {
      goto ldv_34023;
    }
    retval = usb_unlink_urb(*(io->urbs + (unsigned long )i));
    if (((retval != -115 && retval != -19) && retval != -16) && retval != -43) {
      dev_warn((struct device  const  *)(& (io->dev)->dev), "%s, unlink --> %d\n",
               "usb_sg_cancel", retval);
    }
    ldv_34023: 
    i ++;
    ldv_34026: ;
    if (io->entries > i) {
      goto ldv_34025;
    }
    spin_lock(& io->lock);
  }
  spin_unlock_irqrestore(& io->lock, flags);
  return;
}
}
int usb_get_descriptor(struct usb_device *dev , unsigned char type , unsigned char index ,
                       void *buf , int size ) 
{ int i ;
  int result ;
  unsigned int tmp ;

  {
  memset(buf, 0, (size_t )size);
  i = 0;
  goto ldv_34046;
  ldv_34045: 
  tmp = __create_pipe(dev, 0U);
  result = usb_control_msg(dev, tmp | 2147483776U, 6, 128, ((int )((__u16 )type) << 8U) + (int )((__u16 )index),
                           0, buf, (int )((__u16 )size), 5000);
  if (result <= 0 && result != -110) {
    goto ldv_34043;
  }
  if (result > 1 && (int )*((u8 *)buf + 1UL) != (int )type) {
    result = -61;
    goto ldv_34043;
  }
  goto ldv_34044;
  ldv_34043: 
  i ++;
  ldv_34046: ;
  if (i <= 2) {
    goto ldv_34045;
  }
  ldv_34044: ;
  return (result);
}
}
static int usb_get_string(struct usb_device *dev , unsigned short langid , unsigned char index ,
                          void *buf , int size ) 
{ int i ;
  int result ;
  unsigned int tmp ;

  {
  i = 0;
  goto ldv_34069;
  ldv_34068: 
  tmp = __create_pipe(dev, 0U);
  result = usb_control_msg(dev, tmp | 2147483776U, 6, 128, (int )((unsigned int )((__u16 )index) + 768U),
                           (int )langid, buf, (int )((__u16 )size), 5000);
  if (result == 0 || result == -32) {
    goto ldv_34066;
  }
  if (result > 1 && (unsigned int )*((u8 *)buf + 1UL) != 3U) {
    result = -61;
    goto ldv_34066;
  }
  goto ldv_34067;
  ldv_34066: 
  i ++;
  ldv_34069: ;
  if (i <= 2) {
    goto ldv_34068;
  }
  ldv_34067: ;
  return (result);
}
}
static void usb_try_string_workarounds(unsigned char *buf , int *length ) 
{ int newlength ;
  int oldlength ;

  {
  oldlength = *length;
  newlength = 2;
  goto ldv_34078;
  ldv_34077: ;
  if (((int )_ctype[(int )*(buf + (unsigned long )newlength)] & 151) == 0 || (unsigned int )*(buf + ((unsigned long )newlength + 1UL)) != 0U) {
    goto ldv_34076;
  }
  newlength += 2;
  ldv_34078: ;
  if (newlength + 1 < oldlength) {
    goto ldv_34077;
  }
  ldv_34076: ;
  if (newlength > 2) {
    *buf = (unsigned char )newlength;
    *length = newlength;
  }
  return;
}
}
static int usb_string_sub(struct usb_device *dev , unsigned int langid , unsigned int index ,
                          unsigned char *buf ) 
{ int rc ;

  {
  if ((int )dev->quirks & 1) {
    rc = -5;
  } else {
    rc = usb_get_string(dev, (int )((unsigned short )langid), (int )((unsigned char )index),
                        (void *)buf, 255);
  }
  if (rc <= 1) {
    rc = usb_get_string(dev, (int )((unsigned short )langid), (int )((unsigned char )index),
                        (void *)buf, 2);
    if (rc == 2) {
      rc = usb_get_string(dev, (int )((unsigned short )langid), (int )((unsigned char )index),
                          (void *)buf, (int )*buf);
    }
  }
  if (rc > 1) {
    if ((unsigned int )*buf == 0U && (unsigned int )*(buf + 1UL) == 0U) {
      usb_try_string_workarounds(buf, & rc);
    }
    if ((int )*buf < rc) {
      rc = (int )*buf;
    }
    rc &= -2;
  }
  if (rc <= 1) {
    if (rc < 0) {
      rc = rc;
    } else {
      rc = -22;
    }
  }
  return (rc);
}
}
static int usb_get_langid(struct usb_device *dev , unsigned char *tbuf ) 
{ int err ;
  struct _ddebug descriptor ;
  long tmp ;

  {
  if ((unsigned int )*((unsigned char *)dev + 1588UL) != 0U) {
    return (0);
  }
  if (dev->string_langid < 0) {
    return (-32);
  }
  err = usb_string_sub(dev, 0U, 0U, tbuf);
  if (err == -61 || (err > 0 && err <= 3)) {
    dev->string_langid = 1033;
    dev->have_langid = 1U;
    dev_err((struct device  const  *)(& dev->dev), "string descriptor 0 malformed (err = %d), defaulting to 0x%04x\n",
            err, dev->string_langid);
    return (0);
  }
  if (err < 0) {
    dev_err((struct device  const  *)(& dev->dev), "string descriptor 0 read error: %d\n",
            err);
    dev->string_langid = -1;
    return (-32);
  }
  dev->string_langid = (int )*(tbuf + 2UL) | ((int )*(tbuf + 3UL) << 8);
  dev->have_langid = 1U;
  descriptor.modname = "usbcore";
  descriptor.function = "usb_get_langid";
  descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/message.c.prepared";
  descriptor.format = "default language 0x%04x\n";
  descriptor.lineno = 861U;
  descriptor.flags = 1U;
  tmp = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
  if (tmp != 0L) {
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& dev->dev), "default language 0x%04x\n",
                      dev->string_langid);
  }
  return (0);
}
}
int usb_string(struct usb_device *dev , int index , char *buf , size_t size ) 
{ unsigned char *tbuf ;
  int err ;
  void *tmp ;
  struct _ddebug descriptor ;
  long tmp___0 ;

  {
  if ((unsigned int )dev->state == 8U) {
    return (-113);
  }
  if ((size == 0UL || (unsigned long )buf == (unsigned long )((char *)0)) || index == 0) {
    return (-22);
  }
  *buf = 0;
  tmp = kmalloc(256UL, 16U);
  tbuf = (unsigned char *)tmp;
  if ((unsigned long )tbuf == (unsigned long )((unsigned char *)0)) {
    return (-12);
  }
  err = usb_get_langid(dev, tbuf);
  if (err < 0) {
    goto errout;
  }
  err = usb_string_sub(dev, (unsigned int )dev->string_langid, (unsigned int )index,
                       tbuf);
  if (err < 0) {
    goto errout;
  }
  size --;
  err = utf16s_to_utf8s((wchar_t const   *)tbuf + 2U, (err + -2) / 2, 1, (u8 *)buf,
                        (int )size);
  *(buf + (unsigned long )err) = 0;
  if ((unsigned int )*(tbuf + 1UL) != 3U) {
    descriptor.modname = "usbcore";
    descriptor.function = "usb_string";
    descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/message.c.prepared";
    descriptor.format = "wrong descriptor type %02x for string %d (\"%s\")\n";
    descriptor.lineno = 912U;
    descriptor.flags = 1U;
    tmp___0 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
    if (tmp___0 != 0L) {
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& dev->dev), "wrong descriptor type %02x for string %d (\"%s\")\n",
                        (int )*(tbuf + 1UL), index, buf);
    }
  }
  errout: 
  kfree((void const   *)tbuf);
  return (err);
}
}
char *usb_cache_string(struct usb_device *udev , int index ) 
{ char *buf ;
  char *smallbuf ;
  int len ;
  void *tmp ;
  void *tmp___0 ;
  size_t __len ;
  void *__ret ;

  {
  smallbuf = 0;
  if (index <= 0) {
    return (0);
  }
  tmp = kmalloc(382UL, 16U);
  buf = (char *)tmp;
  if ((unsigned long )buf != (unsigned long )((char *)0)) {
    len = usb_string(udev, index, buf, 382UL);
    if (len > 0) {
      len ++;
      tmp___0 = kmalloc((size_t )len, 16U);
      smallbuf = (char *)tmp___0;
      if ((unsigned long )smallbuf == (unsigned long )((char *)0)) {
        return (buf);
      }
      __len = (size_t )len;
      __ret = __builtin_memcpy((void *)smallbuf, (void const   *)buf, __len);
    }
    kfree((void const   *)buf);
  }
  return (smallbuf);
}
}
int usb_get_device_descriptor(struct usb_device *dev , unsigned int size ) 
{ struct usb_device_descriptor *desc ;
  int ret ;
  void *tmp ;
  size_t __len ;
  void *__ret ;

  {
  if (size > 18U) {
    return (-22);
  }
  tmp = kmalloc(18UL, 16U);
  desc = (struct usb_device_descriptor *)tmp;
  if ((unsigned long )desc == (unsigned long )((struct usb_device_descriptor *)0)) {
    return (-12);
  }
  ret = usb_get_descriptor(dev, 1, 0, (void *)desc, (int )size);
  if (ret >= 0) {
    __len = (size_t )size;
    __ret = __builtin_memcpy((void *)(& dev->descriptor), (void const   *)desc, __len);
  }
  kfree((void const   *)desc);
  return (ret);
}
}
int usb_get_status(struct usb_device *dev , int type , int target , void *data ) 
{ int ret ;
  u16 *status ;
  void *tmp ;
  unsigned int tmp___0 ;

  {
  tmp = kmalloc(2UL, 208U);
  status = (u16 *)tmp;
  if ((unsigned long )status == (unsigned long )((u16 *)0)) {
    return (-12);
  }
  tmp___0 = __create_pipe(dev, 0U);
  ret = usb_control_msg(dev, tmp___0 | 2147483776U, 0, (int )((__u8 )((int )((signed char )type) | -128)),
                        0, (int )((__u16 )target), (void *)status, 2, 5000);
  *((u16 *)data) = *status;
  kfree((void const   *)status);
  return (ret);
}
}
int usb_clear_halt(struct usb_device *dev , int pipe ) 
{ int result ;
  int endp ;
  unsigned int tmp ;

  {
  endp = (pipe >> 15) & 15;
  if ((pipe & 128) != 0) {
    endp |= 128;
  }
  tmp = __create_pipe(dev, 0U);
  result = usb_control_msg(dev, tmp | 2147483648U, 1, 2, 0, (int )((__u16 )endp),
                           0, 0, 5000);
  if (result < 0) {
    return (result);
  }
  usb_reset_endpoint(dev, (unsigned int )endp);
  return (0);
}
}
static int create_intf_ep_devs(struct usb_interface *intf ) 
{ struct usb_device *udev ;
  struct usb_device *tmp ;
  struct usb_host_interface *alt ;
  int i ;

  {
  tmp = interface_to_usbdev(intf);
  udev = tmp;
  alt = intf->cur_altsetting;
  if ((unsigned int )*((unsigned char *)intf + 40UL) != 0U || (unsigned int )*((unsigned char *)intf + 40UL) != 0U) {
    return (0);
  }
  i = 0;
  goto ldv_34169;
  ldv_34168: 
  usb_create_ep_devs(& intf->dev, alt->endpoint + (unsigned long )i, udev);
  i ++;
  ldv_34169: ;
  if ((int )alt->desc.bNumEndpoints > i) {
    goto ldv_34168;
  }
  intf->ep_devs_created = 1U;
  return (0);
}
}
static void remove_intf_ep_devs(struct usb_interface *intf ) 
{ struct usb_host_interface *alt ;
  int i ;

  {
  alt = intf->cur_altsetting;
  if ((unsigned int )*((unsigned char *)intf + 40UL) == 0U) {
    return;
  }
  i = 0;
  goto ldv_34177;
  ldv_34176: 
  usb_remove_ep_devs(alt->endpoint + (unsigned long )i);
  i ++;
  ldv_34177: ;
  if ((int )alt->desc.bNumEndpoints > i) {
    goto ldv_34176;
  }
  intf->ep_devs_created = 0U;
  return;
}
}
void usb_disable_endpoint(struct usb_device *dev , unsigned int epaddr , bool reset_hardware ) 
{ unsigned int epnum ;
  struct usb_host_endpoint *ep ;

  {
  epnum = epaddr & 15U;
  if ((unsigned long )dev == (unsigned long )((struct usb_device *)0)) {
    return;
  }
  if ((epaddr & 128U) == 0U) {
    ep = dev->ep_out[epnum];
    if ((int )reset_hardware) {
      dev->ep_out[epnum] = 0;
    }
  } else {
    ep = dev->ep_in[epnum];
    if ((int )reset_hardware) {
      dev->ep_in[epnum] = 0;
    }
  }
  if ((unsigned long )ep != (unsigned long )((struct usb_host_endpoint *)0)) {
    ep->enabled = 0;
    usb_hcd_flush_endpoint(dev, ep);
    if ((int )reset_hardware) {
      usb_hcd_disable_endpoint(dev, ep);
    }
  }
  return;
}
}
void usb_reset_endpoint(struct usb_device *dev , unsigned int epaddr ) 
{ unsigned int epnum ;
  struct usb_host_endpoint *ep ;

  {
  epnum = epaddr & 15U;
  if ((epaddr & 128U) == 0U) {
    ep = dev->ep_out[epnum];
  } else {
    ep = dev->ep_in[epnum];
  }
  if ((unsigned long )ep != (unsigned long )((struct usb_host_endpoint *)0)) {
    usb_hcd_reset_endpoint(dev, ep);
  }
  return;
}
}
void usb_disable_interface(struct usb_device *dev , struct usb_interface *intf , bool reset_hardware ) 
{ struct usb_host_interface *alt ;
  int i ;

  {
  alt = intf->cur_altsetting;
  i = 0;
  goto ldv_34207;
  ldv_34206: 
  usb_disable_endpoint(dev, (unsigned int )(alt->endpoint + (unsigned long )i)->desc.bEndpointAddress,
                       (int )reset_hardware);
  i ++;
  ldv_34207: ;
  if ((int )alt->desc.bNumEndpoints > i) {
    goto ldv_34206;
  }
  return;
}
}
void usb_disable_device(struct usb_device *dev , int skip_ep0 ) 
{ int i ;
  struct usb_hcd *hcd ;
  struct usb_hcd *tmp ;
  struct usb_interface *interface ;
  int tmp___0 ;
  struct _ddebug descriptor ;
  char const   *tmp___1 ;
  long tmp___2 ;
  struct _ddebug descriptor___0 ;
  long tmp___3 ;
  char *tmp___4 ;

  {
  tmp = bus_to_hcd(dev->bus);
  hcd = tmp;
  if ((unsigned long )dev->actconfig != (unsigned long )((struct usb_host_config *)0)) {
    i = 0;
    goto ldv_34216;
    ldv_34215: 
    ((dev->actconfig)->interface[i])->unregistering = 1U;
    i ++;
    ldv_34216: ;
    if ((int )(dev->actconfig)->desc.bNumInterfaces > i) {
      goto ldv_34215;
    }
    i = 0;
    goto ldv_34223;
    ldv_34222: 
    interface = (dev->actconfig)->interface[i];
    tmp___0 = device_is_registered(& interface->dev);
    if (tmp___0 == 0) {
      goto ldv_34219;
    }
    descriptor.modname = "usbcore";
    descriptor.function = "usb_disable_device";
    descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/message.c.prepared";
    descriptor.format = "unregistering interface %s\n";
    descriptor.lineno = 1235U;
    descriptor.flags = 1U;
    tmp___2 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
    if (tmp___2 != 0L) {
      tmp___1 = dev_name((struct device  const  *)(& interface->dev));
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& dev->dev), "unregistering interface %s\n",
                        tmp___1);
    }
    remove_intf_ep_devs(interface);
    device_del(& interface->dev);
    ldv_34219: 
    i ++;
    ldv_34223: ;
    if ((int )(dev->actconfig)->desc.bNumInterfaces > i) {
      goto ldv_34222;
    }
    i = 0;
    goto ldv_34226;
    ldv_34225: 
    put_device(& ((dev->actconfig)->interface[i])->dev);
    (dev->actconfig)->interface[i] = 0;
    i ++;
    ldv_34226: ;
    if ((int )(dev->actconfig)->desc.bNumInterfaces > i) {
      goto ldv_34225;
    }
    usb_unlocked_disable_lpm(dev);
    usb_disable_ltm(dev);
    dev->actconfig = 0;
    if ((unsigned int )dev->state == 7U) {
      usb_set_device_state(dev, 6);
    }
  }
  descriptor___0.modname = "usbcore";
  descriptor___0.function = "usb_disable_device";
  descriptor___0.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/message.c.prepared";
  descriptor___0.format = "%s nuking %s URBs\n";
  descriptor___0.lineno = 1255U;
  descriptor___0.flags = 1U;
  tmp___3 = ldv__builtin_expect((long )descriptor___0.flags & 1L, 0L);
  if (tmp___3 != 0L) {
    if (skip_ep0 != 0) {
      tmp___4 = (char *)"non-ep0";
    } else {
      tmp___4 = (char *)"all";
    }
    __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)(& dev->dev), "%s nuking %s URBs\n",
                      "usb_disable_device", tmp___4);
  }
  if ((unsigned long )(hcd->driver)->check_bandwidth != (unsigned long )((int (*)(struct usb_hcd * ,
                                                                                  struct usb_device * ))0)) {
    i = skip_ep0;
    goto ldv_34230;
    ldv_34229: 
    usb_disable_endpoint(dev, (unsigned int )i, 0);
    usb_disable_endpoint(dev, (unsigned int )(i + 128), 0);
    i ++;
    ldv_34230: ;
    if (i <= 15) {
      goto ldv_34229;
    }
    ldv_mutex_lock_100(hcd->bandwidth_mutex);
    usb_hcd_alloc_bandwidth(dev, 0, 0, 0);
    ldv_mutex_unlock_101(hcd->bandwidth_mutex);
  }
  i = skip_ep0;
  goto ldv_34233;
  ldv_34232: 
  usb_disable_endpoint(dev, (unsigned int )i, 1);
  usb_disable_endpoint(dev, (unsigned int )(i + 128), 1);
  i ++;
  ldv_34233: ;
  if (i <= 15) {
    goto ldv_34232;
  }
  return;
}
}
void usb_enable_endpoint(struct usb_device *dev , struct usb_host_endpoint *ep , bool reset_ep ) 
{ int epnum ;
  int tmp ;
  int is_out ;
  int tmp___0 ;
  int is_control ;
  int tmp___1 ;

  {
  tmp = usb_endpoint_num((struct usb_endpoint_descriptor  const  *)(& ep->desc));
  epnum = tmp;
  tmp___0 = usb_endpoint_dir_out((struct usb_endpoint_descriptor  const  *)(& ep->desc));
  is_out = tmp___0;
  tmp___1 = usb_endpoint_xfer_control((struct usb_endpoint_descriptor  const  *)(& ep->desc));
  is_control = tmp___1;
  if ((int )reset_ep) {
    usb_hcd_reset_endpoint(dev, ep);
  }
  if (is_out != 0 || is_control != 0) {
    dev->ep_out[epnum] = ep;
  }
  if (is_out == 0 || is_control != 0) {
    dev->ep_in[epnum] = ep;
  }
  ep->enabled = 1;
  return;
}
}
void usb_enable_interface(struct usb_device *dev , struct usb_interface *intf , bool reset_eps ) 
{ struct usb_host_interface *alt ;
  int i ;

  {
  alt = intf->cur_altsetting;
  i = 0;
  goto ldv_34251;
  ldv_34250: 
  usb_enable_endpoint(dev, alt->endpoint + (unsigned long )i, (int )reset_eps);
  i ++;
  ldv_34251: ;
  if ((int )alt->desc.bNumEndpoints > i) {
    goto ldv_34250;
  }
  return;
}
}
int usb_set_interface(struct usb_device *dev , int interface , int alternate ) 
{ struct usb_interface *iface ;
  struct usb_host_interface *alt ;
  struct usb_hcd *hcd ;
  struct usb_hcd *tmp ;
  int ret ;
  int manual ;
  unsigned int epaddr ;
  unsigned int pipe ;
  struct _ddebug descriptor ;
  long tmp___0 ;
  int tmp___1 ;
  unsigned int tmp___2 ;
  struct _ddebug descriptor___0 ;
  long tmp___3 ;
  int i ;
  unsigned int tmp___4 ;
  int tmp___5 ;
  unsigned int tmp___6 ;

  {
  tmp = bus_to_hcd(dev->bus);
  hcd = tmp;
  manual = 0;
  if ((unsigned int )dev->state == 8U) {
    return (-113);
  }
  iface = usb_ifnum_to_if((struct usb_device  const  *)dev, (unsigned int )interface);
  if ((unsigned long )iface == (unsigned long )((struct usb_interface *)0)) {
    descriptor.modname = "usbcore";
    descriptor.function = "usb_set_interface";
    descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/message.c.prepared";
    descriptor.format = "selecting invalid interface %d\n";
    descriptor.lineno = 1366U;
    descriptor.flags = 1U;
    tmp___0 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
    if (tmp___0 != 0L) {
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& dev->dev), "selecting invalid interface %d\n",
                        interface);
    }
    return (-22);
  }
  if ((unsigned int )*((unsigned char *)iface + 40UL) != 0U) {
    return (-19);
  }
  alt = usb_altnum_to_altsetting((struct usb_interface  const  *)iface, (unsigned int )alternate);
  if ((unsigned long )alt == (unsigned long )((struct usb_host_interface *)0)) {
    dev_warn((struct device  const  *)(& dev->dev), "selecting invalid altsetting %d\n",
             alternate);
    return (-22);
  }
  ldv_mutex_lock_102(hcd->bandwidth_mutex);
  tmp___1 = usb_disable_lpm(dev);
  if (tmp___1 != 0) {
    dev_err((struct device  const  *)(& iface->dev), "%s Failed to disable LPM\n.",
            "usb_set_interface");
    ldv_mutex_unlock_103(hcd->bandwidth_mutex);
    return (-12);
  }
  ret = usb_hcd_alloc_bandwidth(dev, 0, iface->cur_altsetting, alt);
  if (ret < 0) {
    _dev_info((struct device  const  *)(& dev->dev), "Not enough bandwidth for altsetting %d\n",
              alternate);
    usb_enable_lpm(dev);
    ldv_mutex_unlock_104(hcd->bandwidth_mutex);
    return (ret);
  }
  if ((dev->quirks & 4U) != 0U) {
    ret = -32;
  } else {
    tmp___2 = __create_pipe(dev, 0U);
    ret = usb_control_msg(dev, tmp___2 | 2147483648U, 11, 1, (int )((__u16 )alternate),
                          (int )((__u16 )interface), 0, 0, 5000);
  }
  if (ret == -32 && iface->num_altsetting == 1U) {
    descriptor___0.modname = "usbcore";
    descriptor___0.function = "usb_set_interface";
    descriptor___0.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/message.c.prepared";
    descriptor___0.format = "manual set_interface for iface %d, alt %d\n";
    descriptor___0.lineno = 1413U;
    descriptor___0.flags = 1U;
    tmp___3 = ldv__builtin_expect((long )descriptor___0.flags & 1L, 0L);
    if (tmp___3 != 0L) {
      __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)(& dev->dev), "manual set_interface for iface %d, alt %d\n",
                        interface, alternate);
    }
    manual = 1;
  } else
  if (ret < 0) {
    usb_hcd_alloc_bandwidth(dev, 0, alt, iface->cur_altsetting);
    usb_enable_lpm(dev);
    ldv_mutex_unlock_105(hcd->bandwidth_mutex);
    return (ret);
  }
  ldv_mutex_unlock_106(hcd->bandwidth_mutex);
  if ((unsigned long )iface->cur_altsetting != (unsigned long )alt) {
    remove_intf_ep_devs(iface);
    usb_remove_sysfs_intf_files(iface);
  }
  usb_disable_interface(dev, iface, 1);
  iface->cur_altsetting = alt;
  usb_unlocked_enable_lpm(dev);
  if (manual != 0) {
    i = 0;
    goto ldv_34270;
    ldv_34269: 
    epaddr = (unsigned int )(alt->endpoint + (unsigned long )i)->desc.bEndpointAddress;
    tmp___4 = __create_pipe(dev, epaddr & 15U);
    if ((epaddr & 128U) == 0U) {
      tmp___6 = 0U;
    } else {
      tmp___6 = 128U;
    }
    pipe = tmp___4 | tmp___6;
    usb_clear_halt(dev, (int )pipe);
    i ++;
    ldv_34270: ;
    if ((int )alt->desc.bNumEndpoints > i) {
      goto ldv_34269;
    }
  }
  usb_enable_interface(dev, iface, 1);
  tmp___5 = device_is_registered(& iface->dev);
  if (tmp___5 != 0) {
    usb_create_sysfs_intf_files(iface);
    create_intf_ep_devs(iface);
  }
  return (0);
}
}
int usb_reset_configuration(struct usb_device *dev ) 
{ int i ;
  int retval ;
  struct usb_host_config *config ;
  struct usb_hcd *hcd ;
  struct usb_hcd *tmp ;
  int tmp___0 ;
  struct usb_interface *intf ;
  struct usb_host_interface *alt ;
  struct usb_interface *intf___0 ;
  struct usb_host_interface *alt___0 ;
  unsigned int tmp___1 ;
  struct usb_interface *intf___1 ;
  struct usb_host_interface *alt___1 ;
  int tmp___2 ;

  {
  tmp = bus_to_hcd(dev->bus);
  hcd = tmp;
  if ((unsigned int )dev->state == 8U) {
    return (-113);
  }
  i = 1;
  goto ldv_34288;
  ldv_34287: 
  usb_disable_endpoint(dev, (unsigned int )i, 1);
  usb_disable_endpoint(dev, (unsigned int )(i + 128), 1);
  i ++;
  ldv_34288: ;
  if (i <= 15) {
    goto ldv_34287;
  }
  config = dev->actconfig;
  retval = 0;
  ldv_mutex_lock_107(hcd->bandwidth_mutex);
  tmp___0 = usb_disable_lpm(dev);
  if (tmp___0 != 0) {
    dev_err((struct device  const  *)(& dev->dev), "%s Failed to disable LPM\n.",
            "usb_reset_configuration");
    ldv_mutex_unlock_108(hcd->bandwidth_mutex);
    return (-12);
  }
  i = 0;
  goto ldv_34295;
  ldv_34294: 
  intf = config->interface[i];
  alt = usb_altnum_to_altsetting((struct usb_interface  const  *)intf, 0U);
  if ((unsigned long )alt == (unsigned long )((struct usb_host_interface *)0)) {
    alt = intf->altsetting;
  }
  if ((unsigned long )intf->cur_altsetting != (unsigned long )alt) {
    retval = usb_hcd_alloc_bandwidth(dev, 0, intf->cur_altsetting, alt);
  }
  if (retval < 0) {
    goto ldv_34293;
  }
  i ++;
  ldv_34295: ;
  if ((int )config->desc.bNumInterfaces > i) {
    goto ldv_34294;
  }
  ldv_34293: ;
  if (retval < 0) {
    reset_old_alts: 
    i --;
    goto ldv_34300;
    ldv_34299: 
    intf___0 = config->interface[i];
    alt___0 = usb_altnum_to_altsetting((struct usb_interface  const  *)intf___0, 0U);
    if ((unsigned long )alt___0 == (unsigned long )((struct usb_host_interface *)0)) {
      alt___0 = intf___0->altsetting;
    }
    if ((unsigned long )intf___0->cur_altsetting != (unsigned long )alt___0) {
      usb_hcd_alloc_bandwidth(dev, 0, alt___0, intf___0->cur_altsetting);
    }
    i --;
    ldv_34300: ;
    if (i >= 0) {
      goto ldv_34299;
    }
    usb_enable_lpm(dev);
    ldv_mutex_unlock_109(hcd->bandwidth_mutex);
    return (retval);
  }
  tmp___1 = __create_pipe(dev, 0U);
  retval = usb_control_msg(dev, tmp___1 | 2147483648U, 9, 0, (int )config->desc.bConfigurationValue,
                           0, 0, 0, 5000);
  if (retval < 0) {
    goto reset_old_alts;
  }
  ldv_mutex_unlock_110(hcd->bandwidth_mutex);
  i = 0;
  goto ldv_34305;
  ldv_34304: 
  intf___1 = config->interface[i];
  alt___1 = usb_altnum_to_altsetting((struct usb_interface  const  *)intf___1, 0U);
  if ((unsigned long )alt___1 == (unsigned long )((struct usb_host_interface *)0)) {
    alt___1 = intf___1->altsetting;
  }
  if ((unsigned long )intf___1->cur_altsetting != (unsigned long )alt___1) {
    remove_intf_ep_devs(intf___1);
    usb_remove_sysfs_intf_files(intf___1);
  }
  intf___1->cur_altsetting = alt___1;
  usb_enable_interface(dev, intf___1, 1);
  tmp___2 = device_is_registered(& intf___1->dev);
  if (tmp___2 != 0) {
    usb_create_sysfs_intf_files(intf___1);
    create_intf_ep_devs(intf___1);
  }
  i ++;
  ldv_34305: ;
  if ((int )config->desc.bNumInterfaces > i) {
    goto ldv_34304;
  }
  usb_unlocked_enable_lpm(dev);
  return (0);
}
}
static void usb_release_interface(struct device *dev ) 
{ struct usb_interface *intf ;
  struct device  const  *__mptr ;
  struct usb_interface_cache *intfc ;
  struct usb_host_interface  const  *__mptr___0 ;

  {
  __mptr = (struct device  const  *)dev;
  intf = (struct usb_interface *)__mptr + 0xffffffffffffffd0UL;
  __mptr___0 = (struct usb_host_interface  const  *)intf->altsetting;
  intfc = (struct usb_interface_cache *)__mptr___0 + 0xfffffffffffffff8UL;
  kref_put(& intfc->ref, & usb_release_interface_cache);
  kfree((void const   *)intf);
  return;
}
}
static int usb_if_uevent(struct device *dev , struct kobj_uevent_env *env ) 
{ struct usb_device *usb_dev ;
  struct usb_interface *intf ;
  struct usb_host_interface *alt ;
  struct device  const  *__mptr ;
  int tmp ;
  int tmp___0 ;

  {
  __mptr = (struct device  const  *)dev;
  intf = (struct usb_interface *)__mptr + 0xffffffffffffffd0UL;
  usb_dev = interface_to_usbdev(intf);
  alt = intf->cur_altsetting;
  tmp = add_uevent_var(env, "INTERFACE=%d/%d/%d", (int )alt->desc.bInterfaceClass,
                       (int )alt->desc.bInterfaceSubClass, (int )alt->desc.bInterfaceProtocol);
  if (tmp != 0) {
    return (-12);
  }
  tmp___0 = add_uevent_var(env, "MODALIAS=usb:v%04Xp%04Xd%04Xdc%02Xdsc%02Xdp%02Xic%02Xisc%02Xip%02Xin%02X",
                           (int )usb_dev->descriptor.idVendor, (int )usb_dev->descriptor.idProduct,
                           (int )usb_dev->descriptor.bcdDevice, (int )usb_dev->descriptor.bDeviceClass,
                           (int )usb_dev->descriptor.bDeviceSubClass, (int )usb_dev->descriptor.bDeviceProtocol,
                           (int )alt->desc.bInterfaceClass, (int )alt->desc.bInterfaceSubClass,
                           (int )alt->desc.bInterfaceProtocol, (int )alt->desc.bInterfaceNumber);
  if (tmp___0 != 0) {
    return (-12);
  }
  return (0);
}
}
struct device_type usb_if_device_type  =    {"usb_interface", 0, & usb_if_uevent, 0, & usb_release_interface, 0};
static struct usb_interface_assoc_descriptor *find_iad(struct usb_device *dev , struct usb_host_config *config ,
                                                       u8 inum ) 
{ struct usb_interface_assoc_descriptor *retval ;
  struct usb_interface_assoc_descriptor *intf_assoc ;
  int first_intf ;
  int last_intf ;
  int i ;

  {
  retval = 0;
  i = 0;
  goto ldv_34344;
  ldv_34343: 
  intf_assoc = config->intf_assoc[i];
  if ((unsigned int )intf_assoc->bInterfaceCount == 0U) {
    goto ldv_34342;
  }
  first_intf = (int )intf_assoc->bFirstInterface;
  last_intf = ((int )intf_assoc->bInterfaceCount + -1) + first_intf;
  if ((int )inum >= first_intf && (int )inum <= last_intf) {
    if ((unsigned long )retval == (unsigned long )((struct usb_interface_assoc_descriptor *)0)) {
      retval = intf_assoc;
    } else {
      dev_err((struct device  const  *)(& dev->dev), "Interface #%d referenced by multiple IADs\n",
              (int )inum);
    }
  }
  ldv_34342: 
  i ++;
  ldv_34344: ;
  if (i <= 15 && (unsigned long )config->intf_assoc[i] != (unsigned long )((struct usb_interface_assoc_descriptor *)0)) {
    goto ldv_34343;
  }
  return (retval);
}
}
static void __usb_queue_reset_device(struct work_struct *ws ) 
{ int rc ;
  struct usb_interface *iface ;
  struct work_struct  const  *__mptr ;
  struct usb_device *udev ;
  struct usb_device *tmp ;

  {
  __mptr = (struct work_struct  const  *)ws;
  iface = (struct usb_interface *)__mptr + 0xfffffffffffffb50UL;
  tmp = interface_to_usbdev(iface);
  udev = tmp;
  rc = usb_lock_device_for_reset(udev, (struct usb_interface  const  *)iface);
  if (rc >= 0) {
    iface->reset_running = 1U;
    usb_reset_device(udev);
    iface->reset_running = 0U;
    device_unlock___1(& udev->dev);
  }
  return;
}
}
int usb_set_configuration(struct usb_device *dev , int configuration ) 
{ int i ;
  int ret ;
  struct usb_host_config *cp ;
  struct usb_interface **new_interfaces ;
  struct usb_hcd *hcd ;
  struct usb_hcd *tmp ;
  int n ;
  int nintf ;
  void *tmp___0 ;
  void *tmp___1 ;
  unsigned int tmp___2 ;
  int tmp___3 ;
  struct usb_interface_cache *intfc ;
  struct usb_interface *intf ;
  struct usb_host_interface *alt ;
  struct lock_class_key __key ;
  atomic_long_t __constr_expr_0 ;
  unsigned int tmp___4 ;
  struct usb_interface *intf___0 ;
  struct _ddebug descriptor ;
  char const   *tmp___5 ;
  long tmp___6 ;
  char const   *tmp___7 ;

  {
  cp = 0;
  new_interfaces = 0;
  tmp = bus_to_hcd(dev->bus);
  hcd = tmp;
  if ((unsigned int )*((unsigned char *)dev + 1588UL) == 0U || configuration == -1) {
    configuration = 0;
  } else {
    i = 0;
    goto ldv_34367;
    ldv_34366: ;
    if ((int )(dev->config + (unsigned long )i)->desc.bConfigurationValue == configuration) {
      cp = dev->config + (unsigned long )i;
      goto ldv_34365;
    }
    i ++;
    ldv_34367: ;
    if ((int )dev->descriptor.bNumConfigurations > i) {
      goto ldv_34366;
    }
    ldv_34365: ;
  }
  if ((unsigned long )cp == (unsigned long )((struct usb_host_config *)0) && configuration != 0) {
    return (-22);
  }
  if ((unsigned long )cp != (unsigned long )((struct usb_host_config *)0) && configuration == 0) {
    dev_warn((struct device  const  *)(& dev->dev), "config 0 descriptor??\n");
  }
  nintf = 0;
  n = nintf;
  if ((unsigned long )cp != (unsigned long )((struct usb_host_config *)0)) {
    nintf = (int )cp->desc.bNumInterfaces;
    tmp___0 = kmalloc((unsigned long )nintf * 8UL, 16U);
    new_interfaces = (struct usb_interface **)tmp___0;
    if ((unsigned long )new_interfaces == (unsigned long )((struct usb_interface **)0)) {
      dev_err((struct device  const  *)(& dev->dev), "Out of memory\n");
      return (-12);
    }
    goto ldv_34373;
    ldv_34372: 
    tmp___1 = kzalloc(1280UL, 16U);
    *(new_interfaces + (unsigned long )n) = (struct usb_interface *)tmp___1;
    if ((unsigned long )*(new_interfaces + (unsigned long )n) == (unsigned long )((struct usb_interface *)0)) {
      dev_err((struct device  const  *)(& dev->dev), "Out of memory\n");
      ret = -12;
      free_interfaces: ;
      goto ldv_34370;
      ldv_34369: 
      kfree((void const   *)*(new_interfaces + (unsigned long )n));
      ldv_34370: 
      n --;
      if (n >= 0) {
        goto ldv_34369;
      }
      kfree((void const   *)new_interfaces);
      return (ret);
    }
    n ++;
    ldv_34373: ;
    if (n < nintf) {
      goto ldv_34372;
    }
    tmp___2 = usb_get_max_power(dev, cp);
    i = (int )((unsigned int )dev->bus_mA - tmp___2);
    if (i < 0) {
      dev_warn((struct device  const  *)(& dev->dev), "new config #%d exceeds power limit by %dmA\n",
               configuration, - i);
    }
  }
  ret = usb_autoresume_device(dev);
  if (ret != 0) {
    goto free_interfaces;
  }
  if ((unsigned int )dev->state != 6U) {
    usb_disable_device(dev, 1);
  }
  cancel_async_set_config(dev);
  ldv_mutex_lock_111(hcd->bandwidth_mutex);
  if ((unsigned long )dev->actconfig != (unsigned long )((struct usb_host_config *)0)) {
    tmp___3 = usb_disable_lpm(dev);
    if (tmp___3 != 0) {
      dev_err((struct device  const  *)(& dev->dev), "%s Failed to disable LPM\n.",
              "usb_set_configuration");
      ldv_mutex_unlock_112(hcd->bandwidth_mutex);
      ret = -12;
      goto free_interfaces;
    }
  }
  ret = usb_hcd_alloc_bandwidth(dev, cp, 0, 0);
  if (ret < 0) {
    if ((unsigned long )dev->actconfig != (unsigned long )((struct usb_host_config *)0)) {
      usb_enable_lpm(dev);
    }
    ldv_mutex_unlock_113(hcd->bandwidth_mutex);
    usb_autosuspend_device(dev);
    goto free_interfaces;
  }
  i = 0;
  goto ldv_34382;
  ldv_34381: 
  intf = *(new_interfaces + (unsigned long )i);
  cp->interface[i] = intf;
  intfc = cp->intf_cache[i];
  intf->altsetting = (struct usb_host_interface *)(& intfc->altsetting);
  intf->num_altsetting = intfc->num_altsetting;
  kref_get(& intfc->ref);
  alt = usb_altnum_to_altsetting((struct usb_interface  const  *)intf, 0U);
  if ((unsigned long )alt == (unsigned long )((struct usb_host_interface *)0)) {
    alt = intf->altsetting;
  }
  intf->intf_assoc = find_iad(dev, cp, (int )alt->desc.bInterfaceNumber);
  intf->cur_altsetting = alt;
  usb_enable_interface(dev, intf, 1);
  intf->dev.parent = & dev->dev;
  intf->dev.driver = 0;
  intf->dev.bus = & usb_bus_type;
  intf->dev.type = (struct device_type  const  *)(& usb_if_device_type);
  intf->dev.groups = (struct attribute_group  const  **)(& usb_interface_groups);
  intf->dev.dma_mask = dev->dev.dma_mask;
  __init_work(& intf->reset_ws, 0);
  __constr_expr_0.counter = 137438953408L;
  intf->reset_ws.data = __constr_expr_0;
  lockdep_init_map(& intf->reset_ws.lockdep_map, "(&intf->reset_ws)", & __key, 0);
  INIT_LIST_HEAD(& intf->reset_ws.entry);
  intf->reset_ws.func = & __usb_queue_reset_device;
  intf->minor = -1;
  device_initialize(& intf->dev);
  pm_runtime_no_callbacks(& intf->dev);
  dev_set_name(& intf->dev, "%d-%s:%d.%d", (dev->bus)->busnum, (char *)(& dev->devpath),
               configuration, (int )alt->desc.bInterfaceNumber);
  i ++;
  ldv_34382: ;
  if (i < nintf) {
    goto ldv_34381;
  }
  kfree((void const   *)new_interfaces);
  tmp___4 = __create_pipe(dev, 0U);
  ret = usb_control_msg(dev, tmp___4 | 2147483648U, 9, 0, (int )((__u16 )configuration),
                        0, 0, 0, 5000);
  if (ret < 0 && (unsigned long )cp != (unsigned long )((struct usb_host_config *)0)) {
    usb_hcd_alloc_bandwidth(dev, 0, 0, 0);
    i = 0;
    goto ldv_34385;
    ldv_34384: 
    usb_disable_interface(dev, cp->interface[i], 1);
    put_device(& (cp->interface[i])->dev);
    cp->interface[i] = 0;
    i ++;
    ldv_34385: ;
    if (i < nintf) {
      goto ldv_34384;
    }
    cp = 0;
  }
  dev->actconfig = cp;
  ldv_mutex_unlock_114(hcd->bandwidth_mutex);
  if ((unsigned long )cp == (unsigned long )((struct usb_host_config *)0)) {
    usb_set_device_state(dev, 6);
    usb_autosuspend_device(dev);
    return (ret);
  }
  usb_set_device_state(dev, 7);
  if ((unsigned long )cp->string == (unsigned long )((char *)0) && (dev->quirks & 8U) == 0U) {
    cp->string = usb_cache_string(dev, (int )cp->desc.iConfiguration);
  }
  usb_unlocked_enable_lpm(dev);
  usb_enable_ltm(dev);
  i = 0;
  goto ldv_34391;
  ldv_34390: 
  intf___0 = cp->interface[i];
  descriptor.modname = "usbcore";
  descriptor.function = "usb_set_configuration";
  descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/message.c.prepared";
  descriptor.format = "adding %s (config #%d, interface %d)\n";
  descriptor.lineno = 1968U;
  descriptor.flags = 1U;
  tmp___6 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
  if (tmp___6 != 0L) {
    tmp___5 = dev_name((struct device  const  *)(& intf___0->dev));
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& dev->dev), "adding %s (config #%d, interface %d)\n",
                      tmp___5, configuration, (int )(intf___0->cur_altsetting)->desc.bInterfaceNumber);
  }
  device_enable_async_suspend(& intf___0->dev);
  ret = device_add(& intf___0->dev);
  if (ret != 0) {
    tmp___7 = dev_name((struct device  const  *)(& intf___0->dev));
    dev_err((struct device  const  *)(& dev->dev), "device_add(%s) --> %d\n", tmp___7,
            ret);
    goto ldv_34389;
  }
  create_intf_ep_devs(intf___0);
  ldv_34389: 
  i ++;
  ldv_34391: ;
  if (i < nintf) {
    goto ldv_34390;
  }
  usb_autosuspend_device(dev);
  return (0);
}
}
static struct list_head set_config_list  =    {& set_config_list, & set_config_list};
static spinlock_t set_config_lock  =    {{{{{0U}}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "set_config_lock",
                                                               0, 0UL}}}};
static void driver_set_config_work(struct work_struct *work ) 
{ struct set_config_request *req ;
  struct work_struct  const  *__mptr ;
  struct usb_device *udev ;

  {
  __mptr = (struct work_struct  const  *)work;
  req = (struct set_config_request *)__mptr + 0xfffffffffffffff0UL;
  udev = req->udev;
  device_lock___1(& udev->dev);
  spin_lock(& set_config_lock);
  list_del(& req->node);
  spin_unlock(& set_config_lock);
  if (req->config >= -1) {
    usb_set_configuration(udev, req->config);
  }
  device_unlock___1(& udev->dev);
  usb_put_dev(udev);
  kfree((void const   *)req);
  return;
}
}
static void cancel_async_set_config(struct usb_device *udev ) 
{ struct set_config_request *req ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
  spin_lock(& set_config_lock);
  __mptr = (struct list_head  const  *)set_config_list.next;
  req = (struct set_config_request *)__mptr + 0xffffffffffffffa0UL;
  goto ldv_34417;
  ldv_34416: ;
  if ((unsigned long )req->udev == (unsigned long )udev) {
    req->config = -999;
  }
  __mptr___0 = (struct list_head  const  *)req->node.next;
  req = (struct set_config_request *)__mptr___0 + 0xffffffffffffffa0UL;
  ldv_34417: ;
  if ((unsigned long )(& req->node) != (unsigned long )(& set_config_list)) {
    goto ldv_34416;
  }
  spin_unlock(& set_config_lock);
  return;
}
}
int usb_driver_set_configuration(struct usb_device *udev , int config ) 
{ struct set_config_request *req ;
  void *tmp ;
  struct lock_class_key __key ;
  atomic_long_t __constr_expr_0 ;

  {
  tmp = kmalloc(112UL, 208U);
  req = (struct set_config_request *)tmp;
  if ((unsigned long )req == (unsigned long )((struct set_config_request *)0)) {
    return (-12);
  }
  req->udev = udev;
  req->config = config;
  __init_work(& req->work, 0);
  __constr_expr_0.counter = 137438953408L;
  req->work.data = __constr_expr_0;
  lockdep_init_map(& req->work.lockdep_map, "(&req->work)", & __key, 0);
  INIT_LIST_HEAD(& req->work.entry);
  req->work.func = & driver_set_config_work;
  spin_lock(& set_config_lock);
  list_add(& req->node, & set_config_list);
  spin_unlock(& set_config_lock);
  usb_get_dev(udev);
  schedule_work(& req->work);
  return (0);
}
}
void ldv_main4_sequence_infinite_withcheck_stateful(void) 
{ struct device *var_group1 ;
  struct kobj_uevent_env *var_group2 ;
  int ldv_s_usb_if_device_type_device_type ;
  int tmp ;
  int tmp___0 ;

  {
  ldv_s_usb_if_device_type_device_type = 0;
  LDV_IN_INTERRUPT = 1;
  ldv_initialize();
  goto ldv_34457;
  ldv_34456: 
  tmp = __VERIFIER_nondet_int();
  switch (tmp) {
  case 0: ;
  if (ldv_s_usb_if_device_type_device_type == 0) {
    ldv_handler_precall();
    usb_release_interface(var_group1);
    ldv_s_usb_if_device_type_device_type = 0;
  }
  goto ldv_34453;
  case 1: 
  ldv_handler_precall();
  usb_if_uevent(var_group1, var_group2);
  goto ldv_34453;
  default: ;
  goto ldv_34453;
  }
  ldv_34453: ;
  ldv_34457: 
  tmp___0 = __VERIFIER_nondet_int();
  if (tmp___0 != 0 || ldv_s_usb_if_device_type_device_type != 0) {
    goto ldv_34456;
  }
  ldv_check_final_state();
  return;
}
}
void ldv_mutex_lock_95(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_lock(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_96(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_lock(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_97(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
int ldv_mutex_trylock_98(struct mutex *ldv_func_arg1 ) 
{ ldv_func_ret_type___2 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
  tmp = mutex_trylock(ldv_func_arg1);
  ldv_func_res = tmp;
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
  return (tmp___0);
  return (ldv_func_res);
}
}
void ldv_mutex_unlock_99(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_100(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_bandwidth_mutex_of_usb_hcd(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_101(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_bandwidth_mutex_of_usb_hcd(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_102(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_bandwidth_mutex_of_usb_hcd(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_103(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_bandwidth_mutex_of_usb_hcd(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_104(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_bandwidth_mutex_of_usb_hcd(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_105(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_bandwidth_mutex_of_usb_hcd(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_106(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_bandwidth_mutex_of_usb_hcd(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_107(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_bandwidth_mutex_of_usb_hcd(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_108(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_bandwidth_mutex_of_usb_hcd(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_109(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_bandwidth_mutex_of_usb_hcd(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_110(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_bandwidth_mutex_of_usb_hcd(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_111(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_bandwidth_mutex_of_usb_hcd(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_112(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_bandwidth_mutex_of_usb_hcd(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_113(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_bandwidth_mutex_of_usb_hcd(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_114(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_bandwidth_mutex_of_usb_hcd(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
extern int scnprintf(char * , size_t  , char const   *  , ...) ;
int ldv_mutex_trylock_138(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_136(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_139(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_135(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_137(struct mutex *ldv_func_arg1 ) ;
extern int device_pm_wait_for_dev(struct device * , struct device * ) ;
extern int driver_register(struct device_driver * ) ;
extern void driver_unregister(struct device_driver * ) ;
extern int driver_create_file(struct device_driver * , struct driver_attribute  const  * ) ;
extern void driver_remove_file(struct device_driver * , struct driver_attribute  const  * ) ;
 static void device_lock___2(struct device *dev ) 
{ 

  {
  ldv_mutex_lock_137(& dev->mutex);
  return;
}
}
 static void device_unlock___2(struct device *dev ) 
{ 

  {
  ldv_mutex_unlock_139(& dev->mutex);
  return;
}
}
extern int device_bind_driver(struct device * ) ;
extern void device_release_driver(struct device * ) ;
extern int device_attach(struct device * ) ;
extern int driver_attach(struct device_driver * ) ;
extern void pm_runtime_allow(struct device * ) ;
extern void pm_runtime_forbid(struct device * ) ;
 static int pm_runtime_autosuspend(struct device *dev ) 
{ int tmp ;

  {
  tmp = __pm_runtime_suspend(dev, 8);
  return (tmp);
}
}
 static int pm_runtime_resume(struct device *dev ) 
{ int tmp ;

  {
  tmp = __pm_runtime_resume(dev, 0);
  return (tmp);
}
}
 static int pm_runtime_get(struct device *dev ) 
{ int tmp ;

  {
  tmp = __pm_runtime_resume(dev, 5);
  return (tmp);
}
}
int usb_autopm_get_interface_async(struct usb_interface *intf ) ;
int usb_driver_claim_interface(struct usb_driver *driver , struct usb_interface *iface ,
                               void *priv ) ;
void usb_driver_release_interface(struct usb_driver *driver , struct usb_interface *iface ) ;
struct usb_device_id  const  *usb_match_id(struct usb_interface *interface , struct usb_device_id  const  *id ) ;
int usb_match_one_id(struct usb_interface *interface , struct usb_device_id  const  *id ) ;
ssize_t usb_store_new_id(struct usb_dynids *dynids , struct device_driver *driver ,
                         char const   *buf , size_t count ) ;
ssize_t usb_show_dynids(struct usb_dynids *dynids , char *buf ) ;
int usb_match_one_id_intf(struct usb_device *dev , struct usb_host_interface *intf ,
                          struct usb_device_id  const  *id ) ;
int usb_match_device(struct usb_device *dev , struct usb_device_id  const  *id ) ;
 static int is_usb_device(struct device  const  *dev ) 
{ 

  {
  return ((unsigned long )((struct device_type  const  *)dev->type) == (unsigned long )((struct device_type  const  *)(& usb_device_type)));
}
}
 static int is_usb_device_driver(struct device_driver *drv ) 
{ struct device_driver  const  *__mptr ;

  {
  __mptr = (struct device_driver  const  *)drv;
  return (((struct usbdrv_wrap *)__mptr)->for_devices);
}
}
ssize_t usb_store_new_id(struct usb_dynids *dynids , struct device_driver *driver ,
                         char const   *buf , size_t count ) 
{ struct usb_dynid *dynid ;
  u32 idVendor ;
  u32 idProduct ;
  unsigned int bInterfaceClass ;
  int fields ;
  int retval ;
  void *tmp ;

  {
  idVendor = 0U;
  idProduct = 0U;
  bInterfaceClass = 0U;
  fields = 0;
  retval = 0;
  fields = sscanf(buf, "%x %x %x", & idVendor, & idProduct, & bInterfaceClass);
  if (fields <= 1) {
    return (-22L);
  }
  tmp = kzalloc(48UL, 208U);
  dynid = (struct usb_dynid *)tmp;
  if ((unsigned long )dynid == (unsigned long )((struct usb_dynid *)0)) {
    return (-12L);
  }
  INIT_LIST_HEAD(& dynid->node);
  dynid->id.idVendor = (__u16 )idVendor;
  dynid->id.idProduct = (__u16 )idProduct;
  dynid->id.match_flags = 3U;
  if (fields == 3) {
    dynid->id.bInterfaceClass = (unsigned char )bInterfaceClass;
    dynid->id.match_flags = (__u16 )((unsigned int )dynid->id.match_flags | 128U);
  }
  spin_lock(& dynids->lock);
  list_add_tail(& dynid->node, & dynids->list);
  spin_unlock(& dynids->lock);
  retval = driver_attach(driver);
  if (retval != 0) {
    return ((ssize_t )retval);
  }
  return ((ssize_t )count);
}
}
ssize_t usb_show_dynids(struct usb_dynids *dynids , char *buf ) 
{ struct usb_dynid *dynid ;
  size_t count ;
  struct list_head  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  struct list_head  const  *__mptr___0 ;

  {
  count = 0UL;
  __mptr = (struct list_head  const  *)dynids->list.next;
  dynid = (struct usb_dynid *)__mptr;
  goto ldv_27941;
  ldv_27940: ;
  if ((unsigned int )dynid->id.bInterfaceClass != 0U) {
    tmp = scnprintf(buf + count, 4096UL - count, "%04x %04x %02x\n", (int )dynid->id.idVendor,
                    (int )dynid->id.idProduct, (int )dynid->id.bInterfaceClass);
    count = (size_t )tmp + count;
  } else {
    tmp___0 = scnprintf(buf + count, 4096UL - count, "%04x %04x\n", (int )dynid->id.idVendor,
                        (int )dynid->id.idProduct);
    count = (size_t )tmp___0 + count;
  }
  __mptr___0 = (struct list_head  const  *)dynid->node.next;
  dynid = (struct usb_dynid *)__mptr___0;
  ldv_27941: ;
  if ((unsigned long )(& dynid->node) != (unsigned long )(& dynids->list)) {
    goto ldv_27940;
  }
  return ((ssize_t )count);
}
}
static ssize_t show_dynids(struct device_driver *driver , char *buf ) 
{ struct usb_driver *usb_drv ;
  struct device_driver  const  *__mptr ;
  ssize_t tmp ;

  {
  __mptr = (struct device_driver  const  *)driver;
  usb_drv = (struct usb_driver *)__mptr + 0xffffffffffffff58UL;
  tmp = usb_show_dynids(& usb_drv->dynids, buf);
  return (tmp);
}
}
static ssize_t store_new_id(struct device_driver *driver , char const   *buf , size_t count ) 
{ struct usb_driver *usb_drv ;
  struct device_driver  const  *__mptr ;
  ssize_t tmp ;

  {
  __mptr = (struct device_driver  const  *)driver;
  usb_drv = (struct usb_driver *)__mptr + 0xffffffffffffff58UL;
  tmp = usb_store_new_id(& usb_drv->dynids, driver, buf, count);
  return (tmp);
}
}
static struct driver_attribute driver_attr_new_id  =    {{"new_id", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                    {(char)0}, {(char)0}, {(char)0}}}}, & show_dynids,
    & store_new_id};
static ssize_t store_remove_id(struct device_driver *driver , char const   *buf ,
                               size_t count ) 
{ struct usb_dynid *dynid ;
  struct usb_dynid *n ;
  struct usb_driver *usb_driver ;
  struct device_driver  const  *__mptr ;
  u32 idVendor ;
  u32 idProduct ;
  int fields ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct usb_device_id *id ;
  struct list_head  const  *__mptr___2 ;

  {
  __mptr = (struct device_driver  const  *)driver;
  usb_driver = (struct usb_driver *)__mptr + 0xffffffffffffff58UL;
  fields = sscanf(buf, "%x %x", & idVendor, & idProduct);
  if (fields <= 1) {
    return (-22L);
  }
  spin_lock(& usb_driver->dynids.lock);
  __mptr___0 = (struct list_head  const  *)usb_driver->dynids.list.next;
  dynid = (struct usb_dynid *)__mptr___0;
  __mptr___1 = (struct list_head  const  *)dynid->node.next;
  n = (struct usb_dynid *)__mptr___1;
  goto ldv_27988;
  ldv_27987: 
  id = & dynid->id;
  if ((u32 )id->idVendor == idVendor && (u32 )id->idProduct == idProduct) {
    list_del(& dynid->node);
    kfree((void const   *)dynid);
    goto ldv_27986;
  }
  dynid = n;
  __mptr___2 = (struct list_head  const  *)n->node.next;
  n = (struct usb_dynid *)__mptr___2;
  ldv_27988: ;
  if ((unsigned long )(& dynid->node) != (unsigned long )(& usb_driver->dynids.list)) {
    goto ldv_27987;
  }
  ldv_27986: 
  spin_unlock(& usb_driver->dynids.lock);
  return ((ssize_t )count);
}
}
static struct driver_attribute driver_attr_remove_id  =    {{"remove_id", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                       {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & show_dynids, & store_remove_id};
static int usb_create_newid_files(struct usb_driver *usb_drv ) 
{ int error ;

  {
  error = 0;
  if ((unsigned int )*((unsigned char *)usb_drv + 296UL) != 0U) {
    goto exit;
  }
  if ((unsigned long )usb_drv->probe != (unsigned long )((int (*)(struct usb_interface * ,
                                                                  struct usb_device_id  const  * ))0)) {
    error = driver_create_file(& usb_drv->drvwrap.driver, (struct driver_attribute  const  *)(& driver_attr_new_id));
    if (error == 0) {
      error = driver_create_file(& usb_drv->drvwrap.driver, (struct driver_attribute  const  *)(& driver_attr_remove_id));
      if (error != 0) {
        driver_remove_file(& usb_drv->drvwrap.driver, (struct driver_attribute  const  *)(& driver_attr_new_id));
      }
    }
  }
  exit: ;
  return (error);
}
}
static void usb_remove_newid_files(struct usb_driver *usb_drv ) 
{ 

  {
  if ((unsigned int )*((unsigned char *)usb_drv + 296UL) != 0U) {
    return;
  }
  if ((unsigned long )usb_drv->probe != (unsigned long )((int (*)(struct usb_interface * ,
                                                                  struct usb_device_id  const  * ))0)) {
    driver_remove_file(& usb_drv->drvwrap.driver, (struct driver_attribute  const  *)(& driver_attr_remove_id));
    driver_remove_file(& usb_drv->drvwrap.driver, (struct driver_attribute  const  *)(& driver_attr_new_id));
  }
  return;
}
}
static void usb_free_dynids(struct usb_driver *usb_drv ) 
{ struct usb_dynid *dynid ;
  struct usb_dynid *n ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
  spin_lock(& usb_drv->dynids.lock);
  __mptr = (struct list_head  const  *)usb_drv->dynids.list.next;
  dynid = (struct usb_dynid *)__mptr;
  __mptr___0 = (struct list_head  const  *)dynid->node.next;
  n = (struct usb_dynid *)__mptr___0;
  goto ldv_28010;
  ldv_28009: 
  list_del(& dynid->node);
  kfree((void const   *)dynid);
  dynid = n;
  __mptr___1 = (struct list_head  const  *)n->node.next;
  n = (struct usb_dynid *)__mptr___1;
  ldv_28010: ;
  if ((unsigned long )(& dynid->node) != (unsigned long )(& usb_drv->dynids.list)) {
    goto ldv_28009;
  }
  spin_unlock(& usb_drv->dynids.lock);
  return;
}
}
static struct usb_device_id  const  *usb_match_dynamic_id(struct usb_interface *intf ,
                                                          struct usb_driver *drv ) 
{ struct usb_dynid *dynid ;
  struct list_head  const  *__mptr ;
  int tmp ;
  struct list_head  const  *__mptr___0 ;

  {
  spin_lock(& drv->dynids.lock);
  __mptr = (struct list_head  const  *)drv->dynids.list.next;
  dynid = (struct usb_dynid *)__mptr;
  goto ldv_28022;
  ldv_28021: 
  tmp = usb_match_one_id(intf, (struct usb_device_id  const  *)(& dynid->id));
  if (tmp != 0) {
    spin_unlock(& drv->dynids.lock);
    return ((struct usb_device_id  const  *)(& dynid->id));
  }
  __mptr___0 = (struct list_head  const  *)dynid->node.next;
  dynid = (struct usb_dynid *)__mptr___0;
  ldv_28022: ;
  if ((unsigned long )(& dynid->node) != (unsigned long )(& drv->dynids.list)) {
    goto ldv_28021;
  }
  spin_unlock(& drv->dynids.lock);
  return (0);
}
}
static int usb_probe_device(struct device *dev ) 
{ struct usb_device_driver *udriver ;
  struct device_driver  const  *__mptr ;
  struct usb_device *udev ;
  struct device  const  *__mptr___0 ;
  int error ;
  struct _ddebug descriptor ;
  long tmp ;

  {
  __mptr = (struct device_driver  const  *)dev->driver;
  udriver = (struct usb_device_driver *)__mptr + 0xffffffffffffffd8UL;
  __mptr___0 = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr___0 + 0xffffffffffffff78UL;
  error = 0;
  descriptor.modname = "usbcore";
  descriptor.function = "usb_probe_device";
  descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/driver.c.prepared";
  descriptor.format = "%s\n";
  descriptor.lineno = 292U;
  descriptor.flags = 1U;
  tmp = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
  if (tmp != 0L) {
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)dev, "%s\n", "usb_probe_device");
  }
  if ((unsigned int )*((unsigned char *)udriver + 168UL) == 0U) {
    error = usb_autoresume_device(udev);
  }
  if (error == 0) {
    error = (*(udriver->probe))(udev);
  }
  return (error);
}
}
static int usb_unbind_device(struct device *dev ) 
{ struct usb_device *udev ;
  struct device  const  *__mptr ;
  struct usb_device_driver *udriver ;
  struct device_driver  const  *__mptr___0 ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  __mptr___0 = (struct device_driver  const  *)dev->driver;
  udriver = (struct usb_device_driver *)__mptr___0 + 0xffffffffffffffd8UL;
  (*(udriver->disconnect))(udev);
  if ((unsigned int )*((unsigned char *)udriver + 168UL) == 0U) {
    usb_autosuspend_device(udev);
  }
  return (0);
}
}
static void usb_cancel_queued_reset(struct usb_interface *iface ) 
{ 

  {
  if ((unsigned int )*((unsigned char *)iface + 40UL) == 0U) {
    cancel_work_sync(& iface->reset_ws);
  }
  return;
}
}
static int usb_probe_interface(struct device *dev ) 
{ struct usb_driver *driver ;
  struct device_driver  const  *__mptr ;
  struct usb_interface *intf ;
  struct device  const  *__mptr___0 ;
  struct usb_device *udev ;
  struct usb_device *tmp ;
  struct usb_device_id  const  *id ;
  int error ;
  int lpm_disable_error ;
  struct _ddebug descriptor ;
  long tmp___0 ;
  bool tmp___1 ;
  struct _ddebug descriptor___0 ;
  long tmp___2 ;

  {
  __mptr = (struct device_driver  const  *)dev->driver;
  driver = (struct usb_driver *)__mptr + 0xffffffffffffff58UL;
  __mptr___0 = (struct device  const  *)dev;
  intf = (struct usb_interface *)__mptr___0 + 0xffffffffffffffd0UL;
  tmp = interface_to_usbdev(intf);
  udev = tmp;
  error = -19;
  descriptor.modname = "usbcore";
  descriptor.function = "usb_probe_interface";
  descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/driver.c.prepared";
  descriptor.format = "%s\n";
  descriptor.lineno = 344U;
  descriptor.flags = 1U;
  tmp___0 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
  if (tmp___0 != 0L) {
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)dev, "%s\n", "usb_probe_interface");
  }
  intf->needs_binding = 0U;
  tmp___1 = usb_device_is_owned(udev);
  if ((int )tmp___1) {
    return (error);
  }
  if ((unsigned int )*((unsigned char *)udev + 1588UL) == 0U) {
    dev_err((struct device  const  *)(& intf->dev), "Device is not authorized for usage\n");
    return (error);
  }
  id = usb_match_id(intf, driver->id_table);
  if ((unsigned long )id == (unsigned long )((struct usb_device_id  const  *)0)) {
    id = usb_match_dynamic_id(intf, driver);
  }
  if ((unsigned long )id == (unsigned long )((struct usb_device_id  const  *)0)) {
    return (error);
  }
  descriptor___0.modname = "usbcore";
  descriptor___0.function = "usb_probe_interface";
  descriptor___0.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/driver.c.prepared";
  descriptor___0.format = "%s - got id\n";
  descriptor___0.lineno = 362U;
  descriptor___0.flags = 1U;
  tmp___2 = ldv__builtin_expect((long )descriptor___0.flags & 1L, 0L);
  if (tmp___2 != 0L) {
    __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)dev, "%s - got id\n",
                      "usb_probe_interface");
  }
  error = usb_autoresume_device(udev);
  if (error != 0) {
    return (error);
  }
  intf->condition = 1;
  pm_runtime_set_active(dev);
  pm_suspend_ignore_children(dev, 0);
  if ((unsigned int )*((unsigned char *)driver + 296UL) != 0U) {
    pm_runtime_enable(dev);
  }
  lpm_disable_error = usb_unlocked_disable_lpm(udev);
  if (lpm_disable_error != 0 && (unsigned int )*((unsigned char *)driver + 296UL) != 0U) {
    dev_err((struct device  const  *)(& intf->dev), "%s Failed to disable LPM for driver %s\n.",
            "usb_probe_interface", driver->name);
    error = lpm_disable_error;
    goto err;
  }
  if ((unsigned int )*((unsigned char *)intf + 40UL) != 0U) {
    error = usb_set_interface(udev, (int )(intf->altsetting)->desc.bInterfaceNumber,
                              0);
    if (error < 0) {
      goto err;
    }
    intf->needs_altsetting0 = 0U;
  }
  error = (*(driver->probe))(intf, id);
  if (error != 0) {
    goto err;
  }
  intf->condition = 2;
  if (lpm_disable_error == 0) {
    usb_unlocked_enable_lpm(udev);
  }
  usb_autosuspend_device(udev);
  return (error);
  err: 
  usb_set_intfdata(intf, 0);
  intf->needs_remote_wakeup = 0U;
  intf->condition = 0;
  usb_cancel_queued_reset(intf);
  if (lpm_disable_error == 0) {
    usb_unlocked_enable_lpm(udev);
  }
  if ((unsigned int )*((unsigned char *)driver + 296UL) != 0U) {
    pm_runtime_disable(dev);
  }
  pm_runtime_set_suspended(dev);
  usb_autosuspend_device(udev);
  return (error);
}
}
static int usb_unbind_interface(struct device *dev ) 
{ struct usb_driver *driver ;
  struct device_driver  const  *__mptr ;
  struct usb_interface *intf ;
  struct device  const  *__mptr___0 ;
  struct usb_device *udev ;
  int error ;
  int r ;
  int lpm_disable_error ;

  {
  __mptr = (struct device_driver  const  *)dev->driver;
  driver = (struct usb_driver *)__mptr + 0xffffffffffffff58UL;
  __mptr___0 = (struct device  const  *)dev;
  intf = (struct usb_interface *)__mptr___0 + 0xffffffffffffffd0UL;
  intf->condition = 3;
  udev = interface_to_usbdev(intf);
  error = usb_autoresume_device(udev);
  lpm_disable_error = usb_unlocked_disable_lpm(udev);
  if ((unsigned int )*((unsigned char *)driver + 296UL) == 0U) {
    usb_disable_interface(udev, intf, 0);
  }
  (*(driver->disconnect))(intf);
  usb_cancel_queued_reset(intf);
  if ((unsigned int )(intf->cur_altsetting)->desc.bAlternateSetting == 0U) {
    usb_enable_interface(udev, intf, 0);
  } else
  if (error == 0 && ! intf->dev.power.is_prepared) {
    r = usb_set_interface(udev, (int )(intf->altsetting)->desc.bInterfaceNumber, 0);
    if (r < 0) {
      intf->needs_altsetting0 = 1U;
    }
  } else {
    intf->needs_altsetting0 = 1U;
  }
  usb_set_intfdata(intf, 0);
  intf->condition = 0;
  intf->needs_remote_wakeup = 0U;
  if (lpm_disable_error == 0) {
    usb_unlocked_enable_lpm(udev);
  }
  if ((unsigned int )*((unsigned char *)driver + 296UL) != 0U) {
    pm_runtime_disable(dev);
  }
  pm_runtime_set_suspended(dev);
  r = atomic_read((atomic_t const   *)(& intf->pm_usage_cnt));
  goto ldv_28079;
  ldv_28078: 
  usb_autopm_put_interface_no_suspend(intf);
  r --;
  ldv_28079: ;
  if (r > 0) {
    goto ldv_28078;
  }
  atomic_set(& intf->pm_usage_cnt, 0);
  if (error == 0) {
    usb_autosuspend_device(udev);
  }
  return (0);
}
}
int usb_driver_claim_interface(struct usb_driver *driver , struct usb_interface *iface ,
                               void *priv ) 
{ struct device *dev ;
  struct usb_device *udev ;
  int retval ;
  int lpm_disable_error ;
  int tmp ;

  {
  dev = & iface->dev;
  retval = 0;
  if ((unsigned long )dev->driver != (unsigned long )((struct device_driver *)0)) {
    return (-16);
  }
  udev = interface_to_usbdev(iface);
  dev->driver = & driver->drvwrap.driver;
  usb_set_intfdata(iface, priv);
  iface->needs_binding = 0U;
  iface->condition = 2;
  lpm_disable_error = usb_unlocked_disable_lpm(udev);
  if (lpm_disable_error != 0 && (unsigned int )*((unsigned char *)driver + 296UL) != 0U) {
    dev_err((struct device  const  *)(& iface->dev), "%s Failed to disable LPM for driver %s\n.",
            "usb_driver_claim_interface", driver->name);
    return (-12);
  }
  pm_suspend_ignore_children(dev, 0);
  if ((unsigned int )*((unsigned char *)driver + 296UL) != 0U) {
    pm_runtime_enable(dev);
  } else {
    pm_runtime_set_active(dev);
  }
  tmp = device_is_registered(dev);
  if (tmp != 0) {
    retval = device_bind_driver(dev);
  }
  if (lpm_disable_error == 0) {
    usb_unlocked_enable_lpm(udev);
  }
  return (retval);
}
}
void usb_driver_release_interface(struct usb_driver *driver , struct usb_interface *iface ) 
{ struct device *dev ;
  int tmp ;

  {
  dev = & iface->dev;
  if ((unsigned long )dev->driver == (unsigned long )((struct device_driver *)0) || (unsigned long )dev->driver != (unsigned long )(& driver->drvwrap.driver)) {
    return;
  }
  if ((unsigned int )iface->condition != 2U) {
    return;
  }
  iface->condition = 3;
  tmp = device_is_registered(dev);
  if (tmp != 0) {
    device_release_driver(dev);
  } else {
    device_lock___2(dev);
    usb_unbind_interface(dev);
    dev->driver = 0;
    device_unlock___2(dev);
  }
  return;
}
}
int usb_match_device(struct usb_device *dev , struct usb_device_id  const  *id ) 
{ 

  {
  if ((int )id->match_flags & 1 && (int )((unsigned short )id->idVendor) != (int )dev->descriptor.idVendor) {
    return (0);
  }
  if (((int )id->match_flags & 2) != 0 && (int )((unsigned short )id->idProduct) != (int )dev->descriptor.idProduct) {
    return (0);
  }
  if (((int )id->match_flags & 4) != 0 && (int )((unsigned short )id->bcdDevice_lo) > (int )dev->descriptor.bcdDevice) {
    return (0);
  }
  if (((int )id->match_flags & 8) != 0 && (int )((unsigned short )id->bcdDevice_hi) < (int )dev->descriptor.bcdDevice) {
    return (0);
  }
  if (((int )id->match_flags & 16) != 0 && (int )((unsigned char )id->bDeviceClass) != (int )dev->descriptor.bDeviceClass) {
    return (0);
  }
  if (((int )id->match_flags & 32) != 0 && (int )((unsigned char )id->bDeviceSubClass) != (int )dev->descriptor.bDeviceSubClass) {
    return (0);
  }
  if (((int )id->match_flags & 64) != 0 && (int )((unsigned char )id->bDeviceProtocol) != (int )dev->descriptor.bDeviceProtocol) {
    return (0);
  }
  return (1);
}
}
int usb_match_one_id_intf(struct usb_device *dev , struct usb_host_interface *intf ,
                          struct usb_device_id  const  *id ) 
{ 

  {
  if (((unsigned int )dev->descriptor.bDeviceClass == 255U && ((int )id->match_flags & 1) == 0) && ((int )id->match_flags & 1920) != 0) {
    return (0);
  }
  if (((int )id->match_flags & 128) != 0 && (int )((unsigned char )id->bInterfaceClass) != (int )intf->desc.bInterfaceClass) {
    return (0);
  }
  if (((int )id->match_flags & 256) != 0 && (int )((unsigned char )id->bInterfaceSubClass) != (int )intf->desc.bInterfaceSubClass) {
    return (0);
  }
  if (((int )id->match_flags & 512) != 0 && (int )((unsigned char )id->bInterfaceProtocol) != (int )intf->desc.bInterfaceProtocol) {
    return (0);
  }
  if (((int )id->match_flags & 1024) != 0 && (int )((unsigned char )id->bInterfaceNumber) != (int )intf->desc.bInterfaceNumber) {
    return (0);
  }
  return (1);
}
}
int usb_match_one_id(struct usb_interface *interface , struct usb_device_id  const  *id ) 
{ struct usb_host_interface *intf ;
  struct usb_device *dev ;
  int tmp ;
  int tmp___0 ;

  {
  if ((unsigned long )id == (unsigned long )((struct usb_device_id  const  *)0)) {
    return (0);
  }
  intf = interface->cur_altsetting;
  dev = interface_to_usbdev(interface);
  tmp = usb_match_device(dev, id);
  if (tmp == 0) {
    return (0);
  }
  tmp___0 = usb_match_one_id_intf(dev, intf, id);
  return (tmp___0);
}
}
struct usb_device_id  const  *usb_match_id(struct usb_interface *interface , struct usb_device_id  const  *id ) 
{ int tmp ;

  {
  if ((unsigned long )id == (unsigned long )((struct usb_device_id  const  *)0)) {
    return (0);
  }
  goto ldv_28138;
  ldv_28137: 
  tmp = usb_match_one_id(interface, id);
  if (tmp != 0) {
    return (id);
  }
  id ++;
  ldv_28138: ;
  if (((((unsigned int )((unsigned short )id->idVendor) != 0U || (unsigned int )((unsigned short )id->idProduct) != 0U) || (unsigned int )((unsigned char )id->bDeviceClass) != 0U) || (unsigned int )((unsigned char )id->bInterfaceClass) != 0U) || (unsigned long )id->driver_info != 0UL) {
    goto ldv_28137;
  }
  return (0);
}
}
static int usb_device_match(struct device *dev , struct device_driver *drv ) 
{ int tmp ;
  struct usb_interface *intf ;
  struct usb_driver *usb_drv ;
  struct usb_device_id  const  *id ;
  int tmp___0 ;
  struct device  const  *__mptr ;
  struct device_driver  const  *__mptr___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
  tmp___2 = is_usb_device((struct device  const  *)dev);
  if (tmp___2 != 0) {
    tmp = is_usb_device_driver(drv);
    if (tmp == 0) {
      return (0);
    }
    return (1);
  } else {
    tmp___1 = is_usb_interface((struct device  const  *)dev);
    if (tmp___1 != 0) {
      tmp___0 = is_usb_device_driver(drv);
      if (tmp___0 != 0) {
        return (0);
      }
      __mptr = (struct device  const  *)dev;
      intf = (struct usb_interface *)__mptr + 0xffffffffffffffd0UL;
      __mptr___0 = (struct device_driver  const  *)drv;
      usb_drv = (struct usb_driver *)__mptr___0 + 0xffffffffffffff58UL;
      id = usb_match_id(intf, usb_drv->id_table);
      if ((unsigned long )id != (unsigned long )((struct usb_device_id  const  *)0)) {
        return (1);
      }
      id = usb_match_dynamic_id(intf, usb_drv);
      if ((unsigned long )id != (unsigned long )((struct usb_device_id  const  *)0)) {
        return (1);
      }
    }
  }
  return (0);
}
}
static int usb_uevent(struct device *dev , struct kobj_uevent_env *env ) 
{ struct usb_device *usb_dev ;
  struct device  const  *__mptr ;
  struct usb_interface *intf ;
  struct device  const  *__mptr___0 ;
  int tmp ;
  int tmp___0 ;
  struct _ddebug descriptor ;
  char const   *tmp___1 ;
  long tmp___2 ;
  struct _ddebug descriptor___0 ;
  char const   *tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;

  {
  tmp___0 = is_usb_device((struct device  const  *)dev);
  if (tmp___0 != 0) {
    __mptr = (struct device  const  *)dev;
    usb_dev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  } else {
    tmp = is_usb_interface((struct device  const  *)dev);
    if (tmp != 0) {
      __mptr___0 = (struct device  const  *)dev;
      intf = (struct usb_interface *)__mptr___0 + 0xffffffffffffffd0UL;
      usb_dev = interface_to_usbdev(intf);
    } else {
      return (0);
    }
  }
  if (usb_dev->devnum < 0) {
    descriptor.modname = "usbcore";
    descriptor.function = "usb_uevent";
    descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/driver.c.prepared";
    descriptor.format = "usb %s: already deleted?\n";
    descriptor.lineno = 865U;
    descriptor.flags = 1U;
    tmp___2 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
    if (tmp___2 != 0L) {
      tmp___1 = dev_name((struct device  const  *)dev);
      __dynamic_pr_debug(& descriptor, "usb %s: already deleted?\n", tmp___1);
    }
    return (-19);
  }
  if ((unsigned long )usb_dev->bus == (unsigned long )((struct usb_bus *)0)) {
    descriptor___0.modname = "usbcore";
    descriptor___0.function = "usb_uevent";
    descriptor___0.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/driver.c.prepared";
    descriptor___0.format = "usb %s: bus removed?\n";
    descriptor___0.lineno = 869U;
    descriptor___0.flags = 1U;
    tmp___4 = ldv__builtin_expect((long )descriptor___0.flags & 1L, 0L);
    if (tmp___4 != 0L) {
      tmp___3 = dev_name((struct device  const  *)dev);
      __dynamic_pr_debug(& descriptor___0, "usb %s: bus removed?\n", tmp___3);
    }
    return (-19);
  }
  tmp___5 = add_uevent_var(env, "PRODUCT=%x/%x/%x", (int )usb_dev->descriptor.idVendor,
                           (int )usb_dev->descriptor.idProduct, (int )usb_dev->descriptor.bcdDevice);
  if (tmp___5 != 0) {
    return (-12);
  }
  tmp___6 = add_uevent_var(env, "TYPE=%d/%d/%d", (int )usb_dev->descriptor.bDeviceClass,
                           (int )usb_dev->descriptor.bDeviceSubClass, (int )usb_dev->descriptor.bDeviceProtocol);
  if (tmp___6 != 0) {
    return (-12);
  }
  return (0);
}
}
int usb_register_device_driver(struct usb_device_driver *new_udriver , struct module *owner ) 
{ int retval ;
  int tmp ;

  {
  retval = 0;
  tmp = usb_disabled();
  if (tmp != 0) {
    return (-19);
  }
  new_udriver->drvwrap.for_devices = 1;
  new_udriver->drvwrap.driver.name = new_udriver->name;
  new_udriver->drvwrap.driver.bus = & usb_bus_type;
  new_udriver->drvwrap.driver.probe = & usb_probe_device;
  new_udriver->drvwrap.driver.remove = & usb_unbind_device;
  new_udriver->drvwrap.driver.owner = owner;
  retval = driver_register(& new_udriver->drvwrap.driver);
  if (retval == 0) {
    printk("\016%s: registered new device driver %s\n", usbcore_name, new_udriver->name);
  } else {
    printk("\v%s: error %d registering device \tdriver %s\n", usbcore_name, retval,
           new_udriver->name);
  }
  return (retval);
}
}
void usb_deregister_device_driver(struct usb_device_driver *udriver ) 
{ 

  {
  printk("\016%s: deregistering device driver %s\n", usbcore_name, udriver->name);
  driver_unregister(& udriver->drvwrap.driver);
  return;
}
}
int usb_register_driver(struct usb_driver *new_driver , struct module *owner , char const   *mod_name ) 
{ int retval ;
  int tmp ;
  struct lock_class_key __key ;

  {
  retval = 0;
  tmp = usb_disabled();
  if (tmp != 0) {
    return (-19);
  }
  new_driver->drvwrap.for_devices = 0;
  new_driver->drvwrap.driver.name = new_driver->name;
  new_driver->drvwrap.driver.bus = & usb_bus_type;
  new_driver->drvwrap.driver.probe = & usb_probe_interface;
  new_driver->drvwrap.driver.remove = & usb_unbind_interface;
  new_driver->drvwrap.driver.owner = owner;
  new_driver->drvwrap.driver.mod_name = mod_name;
  spinlock_check(& new_driver->dynids.lock);
  __raw_spin_lock_init(& new_driver->dynids.lock.ldv_6014.rlock, "&(&new_driver->dynids.lock)->rlock",
                       & __key);
  INIT_LIST_HEAD(& new_driver->dynids.list);
  retval = driver_register(& new_driver->drvwrap.driver);
  if (retval != 0) {
    goto out;
  }
  retval = usb_create_newid_files(new_driver);
  if (retval != 0) {
    goto out_newid;
  }
  printk("\016%s: registered new interface driver %s\n", usbcore_name, new_driver->name);
  out: ;
  return (retval);
  out_newid: 
  driver_unregister(& new_driver->drvwrap.driver);
  printk("\v%s: error %d registering interface \tdriver %s\n", usbcore_name, retval,
         new_driver->name);
  goto out;
}
}
void usb_deregister(struct usb_driver *driver ) 
{ 

  {
  printk("\016%s: deregistering interface driver %s\n", usbcore_name, driver->name);
  usb_remove_newid_files(driver);
  driver_unregister(& driver->drvwrap.driver);
  usb_free_dynids(driver);
  return;
}
}
void usb_forced_unbind_intf(struct usb_interface *intf ) 
{ struct usb_driver *driver ;
  struct device_driver  const  *__mptr ;
  struct _ddebug descriptor ;
  long tmp ;

  {
  __mptr = (struct device_driver  const  *)intf->dev.driver;
  driver = (struct usb_driver *)__mptr + 0xffffffffffffff58UL;
  descriptor.modname = "usbcore";
  descriptor.function = "usb_forced_unbind_intf";
  descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/driver.c.prepared";
  descriptor.format = "forced unbind\n";
  descriptor.lineno = 1035U;
  descriptor.flags = 1U;
  tmp = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
  if (tmp != 0L) {
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& intf->dev), "forced unbind\n");
  }
  usb_driver_release_interface(driver, intf);
  intf->needs_binding = 1U;
  return;
}
}
void usb_rebind_intf(struct usb_interface *intf ) 
{ int rc ;

  {
  if ((unsigned long )intf->dev.driver != (unsigned long )((struct device_driver *)0)) {
    usb_forced_unbind_intf(intf);
  }
  if (! intf->dev.power.is_prepared) {
    intf->needs_binding = 0U;
    rc = device_attach(& intf->dev);
    if (rc < 0) {
      dev_warn((struct device  const  *)(& intf->dev), "rebind failed: %d\n", rc);
    }
  }
  return;
}
}
static void unbind_no_pm_drivers_interfaces(struct usb_device *udev ) 
{ struct usb_host_config *config ;
  int i ;
  struct usb_interface *intf ;
  struct usb_driver *drv ;
  struct device_driver  const  *__mptr ;

  {
  config = udev->actconfig;
  if ((unsigned long )config != (unsigned long )((struct usb_host_config *)0)) {
    i = 0;
    goto ldv_28240;
    ldv_28239: 
    intf = config->interface[i];
    if ((unsigned long )intf->dev.driver != (unsigned long )((struct device_driver *)0)) {
      __mptr = (struct device_driver  const  *)intf->dev.driver;
      drv = (struct usb_driver *)__mptr + 0xffffffffffffff58UL;
      if ((unsigned long )drv->suspend == (unsigned long )((int (*)(struct usb_interface * ,
                                                                    pm_message_t  ))0) || (unsigned long )drv->resume == (unsigned long )((int (*)(struct usb_interface * ))0)) {
        usb_forced_unbind_intf(intf);
      }
    }
    i ++;
    ldv_28240: ;
    if ((int )config->desc.bNumInterfaces > i) {
      goto ldv_28239;
    }
  }
  return;
}
}
static void unbind_no_reset_resume_drivers_interfaces(struct usb_device *udev ) 
{ struct usb_host_config *config ;
  int i ;
  struct usb_interface *intf ;

  {
  config = udev->actconfig;
  if ((unsigned long )config != (unsigned long )((struct usb_host_config *)0)) {
    i = 0;
    goto ldv_28249;
    ldv_28248: 
    intf = config->interface[i];
    if ((unsigned long )intf->dev.driver != (unsigned long )((struct device_driver *)0) && (unsigned int )*((unsigned char *)intf + 40UL) != 0U) {
      usb_forced_unbind_intf(intf);
    }
    i ++;
    ldv_28249: ;
    if ((int )config->desc.bNumInterfaces > i) {
      goto ldv_28248;
    }
  }
  return;
}
}
static void do_rebind_interfaces(struct usb_device *udev ) 
{ struct usb_host_config *config ;
  int i ;
  struct usb_interface *intf ;

  {
  config = udev->actconfig;
  if ((unsigned long )config != (unsigned long )((struct usb_host_config *)0)) {
    i = 0;
    goto ldv_28258;
    ldv_28257: 
    intf = config->interface[i];
    if ((unsigned int )*((unsigned char *)intf + 40UL) != 0U) {
      usb_rebind_intf(intf);
    }
    i ++;
    ldv_28258: ;
    if ((int )config->desc.bNumInterfaces > i) {
      goto ldv_28257;
    }
  }
  return;
}
}
static int usb_suspend_device(struct usb_device *udev , pm_message_t msg ) 
{ struct usb_device_driver *udriver ;
  int status ;
  struct device_driver  const  *__mptr ;

  {
  status = 0;
  if ((unsigned int )udev->state == 0U || (unsigned int )udev->state == 8U) {
    goto done;
  }
  if ((unsigned long )udev->dev.driver != (unsigned long )((struct device_driver *)0)) {
    __mptr = (struct device_driver  const  *)udev->dev.driver;
    udriver = (struct usb_device_driver *)__mptr + 0xffffffffffffffd8UL;
  } else {
    udev->do_remote_wakeup = 0U;
    udriver = & usb_generic_driver;
  }
  status = (*(udriver->suspend))(udev, msg);
  done: ;
  return (status);
}
}
static int usb_resume_device(struct usb_device *udev , pm_message_t msg ) 
{ struct usb_device_driver *udriver ;
  int status ;
  struct device_driver  const  *__mptr ;

  {
  status = 0;
  if ((unsigned int )udev->state == 0U) {
    goto done;
  }
  if ((unsigned long )udev->dev.driver == (unsigned long )((struct device_driver *)0)) {
    status = -107;
    goto done;
  }
  if (((msg.event & 1024) == 0 && (unsigned long )udev->parent != (unsigned long )((struct usb_device *)0)) && (unsigned long )(udev->bus)->hs_companion != (unsigned long )((struct usb_bus *)0)) {
    device_pm_wait_for_dev(& udev->dev, & (((udev->bus)->hs_companion)->root_hub)->dev);
  }
  if ((udev->quirks & 2U) != 0U) {
    udev->reset_resume = 1U;
  }
  __mptr = (struct device_driver  const  *)udev->dev.driver;
  udriver = (struct usb_device_driver *)__mptr + 0xffffffffffffffd8UL;
  status = (*(udriver->resume))(udev, msg);
  done: ;
  return (status);
}
}
static int usb_suspend_interface(struct usb_device *udev , struct usb_interface *intf ,
                                 pm_message_t msg ) 
{ struct usb_driver *driver ;
  int status ;
  struct device_driver  const  *__mptr ;

  {
  status = 0;
  if ((unsigned int )udev->state == 0U || (unsigned int )intf->condition == 0U) {
    goto done;
  }
  __mptr = (struct device_driver  const  *)intf->dev.driver;
  driver = (struct usb_driver *)__mptr + 0xffffffffffffff58UL;
  status = (*(driver->suspend))(intf, msg);
  if (status != 0 && (msg.event & 1024) == 0) {
    dev_err((struct device  const  *)(& intf->dev), "suspend error %d\n", status);
  }
  done: ;
  return (status);
}
}
static int usb_resume_interface(struct usb_device *udev , struct usb_interface *intf ,
                                pm_message_t msg , int reset_resume ) 
{ struct usb_driver *driver ;
  int status ;
  struct device_driver  const  *__mptr ;

  {
  status = 0;
  if ((unsigned int )udev->state == 0U) {
    goto done;
  }
  if ((unsigned int )intf->condition == 3U) {
    goto done;
  }
  if ((unsigned int )intf->condition == 0U) {
    if ((unsigned int )*((unsigned char *)intf + 40UL) != 0U && ! intf->dev.power.is_prepared) {
      usb_set_interface(udev, (int )(intf->altsetting)->desc.bInterfaceNumber, 0);
      intf->needs_altsetting0 = 0U;
    }
    goto done;
  }
  if ((unsigned int )*((unsigned char *)intf + 40UL) != 0U) {
    goto done;
  }
  __mptr = (struct device_driver  const  *)intf->dev.driver;
  driver = (struct usb_driver *)__mptr + 0xffffffffffffff58UL;
  if (reset_resume != 0) {
    if ((unsigned long )driver->reset_resume != (unsigned long )((int (*)(struct usb_interface * ))0)) {
      status = (*(driver->reset_resume))(intf);
      if (status != 0) {
        dev_err((struct device  const  *)(& intf->dev), "%s error %d\n", (char *)"reset_resume",
                status);
      }
    } else {
      intf->needs_binding = 1U;
      dev_warn((struct device  const  *)(& intf->dev), "no %s for driver %s?\n", (char *)"reset_resume",
               driver->name);
    }
  } else {
    status = (*(driver->resume))(intf);
    if (status != 0) {
      dev_err((struct device  const  *)(& intf->dev), "resume error %d\n", status);
    }
  }
  done: ;
  return (status);
}
}
static int usb_suspend_both(struct usb_device *udev , pm_message_t msg ) 
{ int status ;
  int i ;
  int n ;
  struct usb_interface *intf ;

  {
  status = 0;
  i = 0;
  n = 0;
  if ((unsigned int )udev->state == 0U || (unsigned int )udev->state == 8U) {
    goto done;
  }
  if ((unsigned long )udev->actconfig != (unsigned long )((struct usb_host_config *)0)) {
    n = (int )(udev->actconfig)->desc.bNumInterfaces;
    i = n + -1;
    goto ldv_28318;
    ldv_28317: 
    intf = (udev->actconfig)->interface[i];
    status = usb_suspend_interface(udev, intf, msg);
    if ((msg.event & 1024) == 0) {
      status = 0;
    }
    if (status != 0) {
      goto ldv_28316;
    }
    i --;
    ldv_28318: ;
    if (i >= 0) {
      goto ldv_28317;
    }
    ldv_28316: ;
  }
  if (status == 0) {
    status = usb_suspend_device(udev, msg);
    if ((unsigned long )udev->parent != (unsigned long )((struct usb_device *)0) && (msg.event & 1024) == 0) {
      status = 0;
    }
  }
  if (status != 0) {
    if ((unsigned long )udev->actconfig != (unsigned long )((struct usb_host_config *)0)) {
      msg.event ^= 18;
      goto ldv_28320;
      ldv_28319: 
      intf = (udev->actconfig)->interface[i];
      usb_resume_interface(udev, intf, msg, 0);
      ldv_28320: 
      i ++;
      if (i < n) {
        goto ldv_28319;
      }
    }
  } else {
    udev->can_submit = 0U;
    i = 0;
    goto ldv_28323;
    ldv_28322: 
    usb_hcd_flush_endpoint(udev, udev->ep_out[i]);
    usb_hcd_flush_endpoint(udev, udev->ep_in[i]);
    i ++;
    ldv_28323: ;
    if (i <= 15) {
      goto ldv_28322;
    }
  }
  done: ;
  return (status);
}
}
static int usb_resume_both(struct usb_device *udev , pm_message_t msg ) 
{ int status ;
  int i ;
  struct usb_interface *intf ;

  {
  status = 0;
  if ((unsigned int )udev->state == 0U) {
    status = -19;
    goto done;
  }
  udev->can_submit = 1U;
  if ((unsigned int )udev->state == 8U || (unsigned int )*((unsigned char *)udev + 1672UL) != 0U) {
    status = usb_resume_device(udev, msg);
  }
  if (status == 0 && (unsigned long )udev->actconfig != (unsigned long )((struct usb_host_config *)0)) {
    i = 0;
    goto ldv_28336;
    ldv_28335: 
    intf = (udev->actconfig)->interface[i];
    usb_resume_interface(udev, intf, msg, (int )udev->reset_resume);
    i ++;
    ldv_28336: ;
    if ((int )(udev->actconfig)->desc.bNumInterfaces > i) {
      goto ldv_28335;
    }
  }
  usb_mark_last_busy(udev);
  done: ;
  if (status == 0) {
    udev->reset_resume = 0U;
  }
  return (status);
}
}
static void choose_wakeup(struct usb_device *udev , pm_message_t msg ) 
{ int w ;
  bool tmp ;

  {
  if (msg.event == 1 || msg.event == 8) {
    if ((unsigned int )udev->state != 8U) {
      udev->do_remote_wakeup = 0U;
    }
    return;
  }
  tmp = device_may_wakeup(& udev->dev);
  w = (int )tmp;
  if ((unsigned int )udev->state == 8U && (int )udev->do_remote_wakeup != w) {
    pm_runtime_resume(& udev->dev);
  }
  udev->do_remote_wakeup = (unsigned char )w;
  return;
}
}
int usb_suspend(struct device *dev , pm_message_t msg ) 
{ struct usb_device *udev ;
  struct device  const  *__mptr ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  unbind_no_pm_drivers_interfaces(udev);
  choose_wakeup(udev, msg);
  tmp = usb_suspend_both(udev, msg);
  return (tmp);
}
}
int usb_resume_complete(struct device *dev ) 
{ struct usb_device *udev ;
  struct device  const  *__mptr ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  if ((unsigned int )udev->state != 0U) {
    do_rebind_interfaces(udev);
  }
  return (0);
}
}
int usb_resume(struct device *dev , pm_message_t msg ) 
{ struct usb_device *udev ;
  struct device  const  *__mptr ;
  int status ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  status = usb_resume_both(udev, msg);
  if (status == 0) {
    pm_runtime_disable(dev);
    pm_runtime_set_active(dev);
    pm_runtime_enable(dev);
    unbind_no_reset_resume_drivers_interfaces(udev);
  }
  if (status == -19 || status == -108) {
    status = 0;
  }
  return (status);
}
}
void usb_enable_autosuspend(struct usb_device *udev ) 
{ 

  {
  pm_runtime_allow(& udev->dev);
  return;
}
}
void usb_disable_autosuspend(struct usb_device *udev ) 
{ 

  {
  pm_runtime_forbid(& udev->dev);
  return;
}
}
void usb_autosuspend_device(struct usb_device *udev ) 
{ int status ;

  {
  usb_mark_last_busy(udev);
  status = pm_runtime_put_sync_autosuspend(& udev->dev);
  return;
}
}
int usb_autoresume_device(struct usb_device *udev ) 
{ int status ;

  {
  status = pm_runtime_get_sync(& udev->dev);
  if (status < 0) {
    pm_runtime_put_sync(& udev->dev);
  }
  if (status > 0) {
    status = 0;
  }
  return (status);
}
}
void usb_autopm_put_interface(struct usb_interface *intf ) 
{ struct usb_device *udev ;
  struct usb_device *tmp ;
  int status ;

  {
  tmp = interface_to_usbdev(intf);
  udev = tmp;
  usb_mark_last_busy(udev);
  atomic_dec(& intf->pm_usage_cnt);
  status = pm_runtime_put_sync(& intf->dev);
  return;
}
}
void usb_autopm_put_interface_async(struct usb_interface *intf ) 
{ struct usb_device *udev ;
  struct usb_device *tmp ;
  int status ;

  {
  tmp = interface_to_usbdev(intf);
  udev = tmp;
  usb_mark_last_busy(udev);
  atomic_dec(& intf->pm_usage_cnt);
  status = pm_runtime_put(& intf->dev);
  return;
}
}
void usb_autopm_put_interface_no_suspend(struct usb_interface *intf ) 
{ struct usb_device *udev ;
  struct usb_device *tmp ;

  {
  tmp = interface_to_usbdev(intf);
  udev = tmp;
  usb_mark_last_busy(udev);
  atomic_dec(& intf->pm_usage_cnt);
  pm_runtime_put_noidle(& intf->dev);
  return;
}
}
int usb_autopm_get_interface(struct usb_interface *intf ) 
{ int status ;

  {
  status = pm_runtime_get_sync(& intf->dev);
  if (status < 0) {
    pm_runtime_put_sync(& intf->dev);
  } else {
    atomic_inc(& intf->pm_usage_cnt);
  }
  if (status > 0) {
    status = 0;
  }
  return (status);
}
}
int usb_autopm_get_interface_async(struct usb_interface *intf ) 
{ int status ;

  {
  status = pm_runtime_get(& intf->dev);
  if (status < 0 && status != -115) {
    pm_runtime_put_noidle(& intf->dev);
  } else {
    atomic_inc(& intf->pm_usage_cnt);
  }
  if (status > 0 || status == -115) {
    status = 0;
  }
  return (status);
}
}
void usb_autopm_get_interface_no_resume(struct usb_interface *intf ) 
{ struct usb_device *udev ;
  struct usb_device *tmp ;

  {
  tmp = interface_to_usbdev(intf);
  udev = tmp;
  usb_mark_last_busy(udev);
  atomic_inc(& intf->pm_usage_cnt);
  pm_runtime_get_noresume(& intf->dev);
  return;
}
}
static int autosuspend_check(struct usb_device *udev ) 
{ int w ;
  int i ;
  struct usb_interface *intf ;
  int tmp ;
  struct usb_driver *driver ;
  struct device_driver  const  *__mptr ;
  struct _ddebug descriptor ;
  long tmp___0 ;
  bool tmp___1 ;
  int tmp___2 ;

  {
  w = 0;
  if ((unsigned long )udev->actconfig != (unsigned long )((struct usb_host_config *)0)) {
    i = 0;
    goto ldv_28477;
    ldv_28476: 
    intf = (udev->actconfig)->interface[i];
    if ((unsigned int )*((unsigned char *)intf + 856UL) != 0U) {
      goto ldv_28472;
    }
    tmp = atomic_read((atomic_t const   *)(& intf->dev.power.usage_count));
    if (tmp > 0) {
      return (-16);
    }
    w = (int )intf->needs_remote_wakeup | w;
    if ((udev->quirks & 2U) != 0U) {
      __mptr = (struct device_driver  const  *)intf->dev.driver;
      driver = (struct usb_driver *)__mptr + 0xffffffffffffff58UL;
      if ((unsigned long )driver->reset_resume == (unsigned long )((int (*)(struct usb_interface * ))0) || (unsigned int )*((unsigned char *)intf + 40UL) != 0U) {
        return (-95);
      }
    }
    ldv_28472: 
    i ++;
    ldv_28477: ;
    if ((int )(udev->actconfig)->desc.bNumInterfaces > i) {
      goto ldv_28476;
    }
  }
  if (w != 0) {
    tmp___1 = device_can_wakeup(& udev->dev);
    if (tmp___1) {
      tmp___2 = 0;
    } else {
      tmp___2 = 1;
    }
    if (tmp___2) {
      descriptor.modname = "usbcore";
      descriptor.function = "autosuspend_check";
      descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/driver.c.prepared";
      descriptor.format = "remote wakeup needed for autosuspend\n";
      descriptor.lineno = 1786U;
      descriptor.flags = 1U;
      tmp___0 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
      if (tmp___0 != 0L) {
        __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& udev->dev), "remote wakeup needed for autosuspend\n");
      }
      return (-95);
    }
  }
  udev->do_remote_wakeup = (unsigned char )w;
  return (0);
}
}
int usb_runtime_suspend(struct device *dev ) 
{ struct usb_device *udev ;
  struct device  const  *__mptr ;
  int status ;
  int tmp ;
  struct pm_message __constr_expr_0 ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  tmp = autosuspend_check(udev);
  if (tmp != 0) {
    return (-11);
  }
  __constr_expr_0.event = 1026;
  status = usb_suspend_both(udev, __constr_expr_0);
  if (status == -11 || status == -16) {
    usb_mark_last_busy(udev);
  }
  if (status != 0) {
    return (-16);
  }
  return (status);
}
}
int usb_runtime_resume(struct device *dev ) 
{ struct usb_device *udev ;
  struct device  const  *__mptr ;
  int status ;
  struct pm_message __constr_expr_0 ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  __constr_expr_0.event = 1040;
  status = usb_resume_both(udev, __constr_expr_0);
  return (status);
}
}
int usb_runtime_idle(struct device *dev ) 
{ struct usb_device *udev ;
  struct device  const  *__mptr ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  tmp = autosuspend_check(udev);
  if (tmp == 0) {
    pm_runtime_autosuspend(dev);
  }
  return (0);
}
}
int usb_set_usb2_hardware_lpm(struct usb_device *udev , int enable ) 
{ struct usb_hcd *hcd ;
  struct usb_hcd *tmp ;
  int ret ;

  {
  tmp = bus_to_hcd(udev->bus);
  hcd = tmp;
  ret = -1;
  if ((unsigned long )(hcd->driver)->set_usb2_hw_lpm != (unsigned long )((int (*)(struct usb_hcd * ,
                                                                                  struct usb_device * ,
                                                                                  int  ))0)) {
    ret = (*((hcd->driver)->set_usb2_hw_lpm))(hcd, udev, enable);
    if (ret == 0) {
      udev->usb2_hw_lpm_enabled = (unsigned char )enable;
    }
  }
  return (ret);
}
}
struct bus_type usb_bus_type  = 
     {"usb", 0, 0, 0, 0, 0, & usb_device_match, & usb_uevent, 0, 0, 0, 0, 0, 0, 0, 0,
    {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
      {(char)0}}}};
void ldv_main5_sequence_infinite_withcheck_stateful(void) 
{ struct device *var_group1 ;
  struct device_driver *var_group2 ;
  struct kobj_uevent_env *var_group3 ;
  int tmp ;
  int tmp___0 ;

  {
  LDV_IN_INTERRUPT = 1;
  ldv_initialize();
  goto ldv_28534;
  ldv_28533: 
  tmp = __VERIFIER_nondet_int();
  switch (tmp) {
  case 0: 
  ldv_handler_precall();
  usb_device_match(var_group1, var_group2);
  goto ldv_28530;
  case 1: 
  ldv_handler_precall();
  usb_uevent(var_group1, var_group3);
  goto ldv_28530;
  default: ;
  goto ldv_28530;
  }
  ldv_28530: ;
  ldv_28534: 
  tmp___0 = __VERIFIER_nondet_int();
  if (tmp___0 != 0) {
    goto ldv_28533;
  }
  ldv_check_final_state();
  return;
}
}
void ldv_mutex_lock_135(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_lock(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_136(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_lock(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_137(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
int ldv_mutex_trylock_138(struct mutex *ldv_func_arg1 ) 
{ ldv_func_ret_type___2 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
  tmp = mutex_trylock(ldv_func_arg1);
  ldv_func_res = tmp;
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
  return (tmp___0);
  return (ldv_func_res);
}
}
void ldv_mutex_unlock_139(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
extern void *__memcpy(void * , void const   * , size_t  ) ;
int ldv_mutex_trylock_148(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_146(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_149(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_145(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_147(struct mutex *ldv_func_arg1 ) ;
 static char const   *plural(int n ) 
{ char const   *tmp ;

  {
  if (n == 1) {
    tmp = "";
  } else {
    tmp = "s";
  }
  return (tmp);
}
}
static int find_next_descriptor(unsigned char *buffer , int size , int dt1 , int dt2 ,
                                int *num_skipped ) 
{ struct usb_descriptor_header *h ;
  int n ;
  unsigned char *buffer0 ;

  {
  n = 0;
  buffer0 = buffer;
  goto ldv_28759;
  ldv_28758: 
  h = (struct usb_descriptor_header *)buffer;
  if ((int )h->bDescriptorType == dt1 || (int )h->bDescriptorType == dt2) {
    goto ldv_28757;
  }
  buffer += (unsigned long )h->bLength;
  size -= (int )h->bLength;
  n ++;
  ldv_28759: ;
  if (size > 0) {
    goto ldv_28758;
  }
  ldv_28757: ;
  if ((unsigned long )num_skipped != (unsigned long )((int *)0)) {
    *num_skipped = n;
  }
  return ((int )((unsigned int )((long )buffer) - (unsigned int )((long )buffer0)));
}
}
static void usb_parse_ss_endpoint_companion(struct device *ddev , int cfgno , int inum ,
                                            int asnum , struct usb_host_endpoint *ep ,
                                            unsigned char *buffer , int size ) 
{ struct usb_ss_ep_comp_descriptor *desc ;
  int max_tx ;
  int tmp ;
  int tmp___0 ;
  size_t __len ;
  void *__ret ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  char *tmp___12 ;
  char *tmp___13 ;

  {
  desc = (struct usb_ss_ep_comp_descriptor *)buffer;
  if ((unsigned int )desc->bDescriptorType != 48U || size <= 5) {
    dev_warn((struct device  const  *)ddev, "No SuperSpeed endpoint companion for config %d  interface %d altsetting %d ep %d: using minimum values\n",
             cfgno, inum, asnum, (int )ep->desc.bEndpointAddress);
    ep->ss_ep_comp.bLength = 6U;
    ep->ss_ep_comp.bDescriptorType = 48U;
    tmp = usb_endpoint_xfer_isoc((struct usb_endpoint_descriptor  const  *)(& ep->desc));
    if (tmp != 0) {
      ep->ss_ep_comp.wBytesPerInterval = ep->desc.wMaxPacketSize;
    } else {
      tmp___0 = usb_endpoint_xfer_int((struct usb_endpoint_descriptor  const  *)(& ep->desc));
      if (tmp___0 != 0) {
        ep->ss_ep_comp.wBytesPerInterval = ep->desc.wMaxPacketSize;
      }
    }
    return;
  }
  __len = 6UL;
  if (__len > 63UL) {
    __ret = __memcpy((void *)(& ep->ss_ep_comp), (void const   *)desc, __len);
  } else {
    __ret = __builtin_memcpy((void *)(& ep->ss_ep_comp), (void const   *)desc, __len);
  }
  tmp___1 = usb_endpoint_xfer_control((struct usb_endpoint_descriptor  const  *)(& ep->desc));
  if (tmp___1 != 0 && (unsigned int )desc->bMaxBurst != 0U) {
    dev_warn((struct device  const  *)ddev, "Control endpoint with bMaxBurst = %d in config %d interface %d altsetting %d ep %d: setting to zero\n",
             (int )desc->bMaxBurst, cfgno, inum, asnum, (int )ep->desc.bEndpointAddress);
    ep->ss_ep_comp.bMaxBurst = 0U;
  } else
  if ((unsigned int )desc->bMaxBurst > 15U) {
    dev_warn((struct device  const  *)ddev, "Endpoint with bMaxBurst = %d in config %d interface %d altsetting %d ep %d: setting to 15\n",
             (int )desc->bMaxBurst, cfgno, inum, asnum, (int )ep->desc.bEndpointAddress);
    ep->ss_ep_comp.bMaxBurst = 15U;
  }
  tmp___5 = usb_endpoint_xfer_control((struct usb_endpoint_descriptor  const  *)(& ep->desc));
  if (tmp___5 != 0) {
    goto _L___0;
  } else {
    tmp___6 = usb_endpoint_xfer_int((struct usb_endpoint_descriptor  const  *)(& ep->desc));
    if (tmp___6 != 0) {
      _L___0: 
      if ((unsigned int )desc->bmAttributes != 0U) {
        tmp___2 = usb_endpoint_xfer_control((struct usb_endpoint_descriptor  const  *)(& ep->desc));
        if (tmp___2 != 0) {
          tmp___12 = (char *)"Control";
        } else {
          tmp___12 = (char *)"Bulk";
        }
        dev_warn((struct device  const  *)ddev, "%s endpoint with bmAttributes = %d in config %d interface %d altsetting %d ep %d: setting to zero\n",
                 tmp___12, (int )desc->bmAttributes, cfgno, inum, asnum, (int )ep->desc.bEndpointAddress);
        ep->ss_ep_comp.bmAttributes = 0U;
      } else {
        goto _L;
      }
    } else {
      _L: 
      tmp___4 = usb_endpoint_xfer_bulk((struct usb_endpoint_descriptor  const  *)(& ep->desc));
      if (tmp___4 != 0 && (unsigned int )desc->bmAttributes > 16U) {
        dev_warn((struct device  const  *)ddev, "Bulk endpoint with more than 65536 streams in config %d interface %d altsetting %d ep %d: setting to max\n",
                 cfgno, inum, asnum, (int )ep->desc.bEndpointAddress);
        ep->ss_ep_comp.bmAttributes = 16U;
      } else {
        tmp___3 = usb_endpoint_xfer_isoc((struct usb_endpoint_descriptor  const  *)(& ep->desc));
        if (tmp___3 != 0 && (unsigned int )desc->bmAttributes > 2U) {
          dev_warn((struct device  const  *)ddev, "Isoc endpoint has Mult of %d in config %d interface %d altsetting %d ep %d: setting to 3\n",
                   (int )desc->bmAttributes + 1, cfgno, inum, asnum, (int )ep->desc.bEndpointAddress);
          ep->ss_ep_comp.bmAttributes = 2U;
        }
      }
    }
  }
  tmp___10 = usb_endpoint_xfer_isoc((struct usb_endpoint_descriptor  const  *)(& ep->desc));
  if (tmp___10 != 0) {
    tmp___7 = usb_endpoint_maxp((struct usb_endpoint_descriptor  const  *)(& ep->desc));
    max_tx = (((int )desc->bMaxBurst + 1) * ((int )desc->bmAttributes + 1)) * tmp___7;
  } else {
    tmp___9 = usb_endpoint_xfer_int((struct usb_endpoint_descriptor  const  *)(& ep->desc));
    if (tmp___9 != 0) {
      tmp___8 = usb_endpoint_maxp((struct usb_endpoint_descriptor  const  *)(& ep->desc));
      max_tx = tmp___8 * ((int )desc->bMaxBurst + 1);
    } else {
      max_tx = 999999;
    }
  }
  if ((int )desc->wBytesPerInterval > max_tx) {
    tmp___11 = usb_endpoint_xfer_isoc((struct usb_endpoint_descriptor  const  *)(& ep->desc));
    if (tmp___11 != 0) {
      tmp___13 = (char *)"Isoc";
    } else {
      tmp___13 = (char *)"Int";
    }
    dev_warn((struct device  const  *)ddev, "%s endpoint with wBytesPerInterval of %d in config %d interface %d altsetting %d ep %d: setting to %d\n",
             tmp___13, (int )desc->wBytesPerInterval, cfgno, inum, asnum, (int )ep->desc.bEndpointAddress,
             max_tx);
    ep->ss_ep_comp.wBytesPerInterval = (unsigned short )max_tx;
  }
  return;
}
}
static int usb_parse_endpoint(struct device *ddev , int cfgno , int inum , int asnum ,
                              struct usb_host_interface *ifp , int num_ep , unsigned char *buffer ,
                              int size ) 
{ unsigned char *buffer0 ;
  struct usb_endpoint_descriptor *d ;
  struct usb_host_endpoint *endpoint ;
  int n ;
  int i ;
  int j ;
  int retval ;
  size_t __len ;
  void *__ret ;
  struct device  const  *__mptr ;
  struct device  const  *__mptr___0 ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  struct device  const  *__mptr___1 ;
  int tmp___2 ;
  unsigned int maxp ;
  int tmp___3 ;
  struct device  const  *__mptr___2 ;
  int tmp___4 ;
  struct device  const  *__mptr___3 ;
  struct _ddebug descriptor ;
  char const   *tmp___5 ;
  long tmp___6 ;

  {
  buffer0 = buffer;
  d = (struct usb_endpoint_descriptor *)buffer;
  buffer += (unsigned long )d->bLength;
  size -= (int )d->bLength;
  if ((unsigned int )d->bLength > 8U) {
    n = 9;
  } else
  if ((unsigned int )d->bLength > 6U) {
    n = 7;
  } else {
    dev_warn((struct device  const  *)ddev, "config %d interface %d altsetting %d has an invalid endpoint descriptor of length %d, skipping\n",
             cfgno, inum, asnum, (int )d->bLength);
    goto skip_to_next_endpoint_or_interface_descriptor;
  }
  i = (int )d->bEndpointAddress & -129;
  if (i > 15 || i == 0) {
    dev_warn((struct device  const  *)ddev, "config %d interface %d altsetting %d has an invalid endpoint with address 0x%X, skipping\n",
             cfgno, inum, asnum, (int )d->bEndpointAddress);
    goto skip_to_next_endpoint_or_interface_descriptor;
  }
  if ((int )ifp->desc.bNumEndpoints >= num_ep) {
    goto skip_to_next_endpoint_or_interface_descriptor;
  }
  endpoint = ifp->endpoint + (unsigned long )ifp->desc.bNumEndpoints;
  ifp->desc.bNumEndpoints = (__u8 )((int )ifp->desc.bNumEndpoints + 1);
  __len = (size_t )n;
  __ret = __builtin_memcpy((void *)(& endpoint->desc), (void const   *)d, __len);
  INIT_LIST_HEAD(& endpoint->urb_list);
  i = 0;
  j = 255;
  tmp___0 = usb_endpoint_xfer_int((struct usb_endpoint_descriptor  const  *)d);
  if (tmp___0 != 0) {
    i = 1;
    __mptr = (struct device  const  *)ddev;
    switch ((unsigned int )((struct usb_device *)__mptr + 0xffffffffffffff78UL)->speed) {
    case 5U: ;
    case 3U: 
    n = fls((int )d->bInterval * 8);
    if (n == 0) {
      n = 9;
    }
    j = 16;
    goto ldv_28799;
    default: 
    n = 32;
    goto ldv_28799;
    }
    ldv_28799: ;
  } else {
    tmp = usb_endpoint_xfer_isoc((struct usb_endpoint_descriptor  const  *)d);
    if (tmp != 0) {
      i = 1;
      j = 16;
      __mptr___0 = (struct device  const  *)ddev;
      switch ((unsigned int )((struct usb_device *)__mptr___0 + 0xffffffffffffff78UL)->speed) {
      case 3U: 
      n = 9;
      goto ldv_28804;
      default: 
      n = 6;
      goto ldv_28804;
      }
      ldv_28804: ;
    }
  }
  if ((int )d->bInterval < i || (int )d->bInterval > j) {
    dev_warn((struct device  const  *)ddev, "config %d interface %d altsetting %d endpoint 0x%X has an invalid bInterval %d, changing to %d\n",
             cfgno, inum, asnum, (int )d->bEndpointAddress, (int )d->bInterval, n);
    endpoint->desc.bInterval = (__u8 )n;
  }
  __mptr___1 = (struct device  const  *)ddev;
  if ((unsigned int )((struct usb_device *)__mptr___1 + 0xffffffffffffff78UL)->speed == 1U) {
    tmp___2 = usb_endpoint_xfer_bulk((struct usb_endpoint_descriptor  const  *)d);
    if (tmp___2 != 0) {
      dev_warn((struct device  const  *)ddev, "config %d interface %d altsetting %d endpoint 0x%X is Bulk; changing to Interrupt\n",
               cfgno, inum, asnum, (int )d->bEndpointAddress);
      endpoint->desc.bmAttributes = 3U;
      endpoint->desc.bInterval = 1U;
      tmp___1 = usb_endpoint_maxp((struct usb_endpoint_descriptor  const  *)(& endpoint->desc));
      if (tmp___1 > 8) {
        endpoint->desc.wMaxPacketSize = 8U;
      }
    }
  }
  __mptr___2 = (struct device  const  *)ddev;
  if ((unsigned int )((struct usb_device *)__mptr___2 + 0xffffffffffffff78UL)->speed == 3U) {
    tmp___4 = usb_endpoint_xfer_bulk((struct usb_endpoint_descriptor  const  *)d);
    if (tmp___4 != 0) {
      tmp___3 = usb_endpoint_maxp((struct usb_endpoint_descriptor  const  *)(& endpoint->desc));
      maxp = (unsigned int )tmp___3 & 2047U;
      if (maxp != 512U) {
        dev_warn((struct device  const  *)ddev, "config %d interface %d altsetting %d bulk endpoint 0x%X has invalid maxpacket %d\n",
                 cfgno, inum, asnum, (int )d->bEndpointAddress, maxp);
      }
    }
  }
  __mptr___3 = (struct device  const  *)ddev;
  if ((unsigned int )((struct usb_device *)__mptr___3 + 0xffffffffffffff78UL)->speed == 5U) {
    usb_parse_ss_endpoint_companion(ddev, cfgno, inum, asnum, endpoint, buffer, size);
  }
  endpoint->extra = buffer;
  i = find_next_descriptor(buffer, size, 5, 4, & n);
  endpoint->extralen = i;
  retval = (int )(((unsigned int )((long )buffer) - (unsigned int )((long )buffer0)) + (unsigned int )i);
  if (n > 0) {
    descriptor.modname = "usbcore";
    descriptor.function = "usb_parse_endpoint";
    descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/config.c.prepared";
    descriptor.format = "skipped %d descriptor%s after %s\n";
    descriptor.lineno = 350U;
    descriptor.flags = 1U;
    tmp___6 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
    if (tmp___6 != 0L) {
      tmp___5 = plural(n);
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)ddev, "skipped %d descriptor%s after %s\n",
                        n, tmp___5, (char *)"endpoint");
    }
  }
  return (retval);
  skip_to_next_endpoint_or_interface_descriptor: 
  i = find_next_descriptor(buffer, size, 5, 4, 0);
  return ((int )(((unsigned int )((long )buffer) - (unsigned int )((long )buffer0)) + (unsigned int )i));
}
}
void usb_release_interface_cache(struct kref *ref ) 
{ struct usb_interface_cache *intfc ;
  struct kref  const  *__mptr ;
  int j ;
  struct usb_host_interface *alt ;

  {
  __mptr = (struct kref  const  *)ref;
  intfc = (struct usb_interface_cache *)__mptr + 0xfffffffffffffffcUL;
  j = 0;
  goto ldv_28824;
  ldv_28823: 
  alt = (struct usb_host_interface *)(& intfc->altsetting) + (unsigned long )j;
  kfree((void const   *)alt->endpoint);
  kfree((void const   *)alt->string);
  j ++;
  ldv_28824: ;
  if ((unsigned int )j < intfc->num_altsetting) {
    goto ldv_28823;
  }
  kfree((void const   *)intfc);
  return;
}
}
static int usb_parse_interface(struct device *ddev , int cfgno , struct usb_host_config *config ,
                               unsigned char *buffer , int size , u8 *inums , u8 *nalts ) 
{ unsigned char *buffer0 ;
  struct usb_interface_descriptor *d ;
  int inum ;
  int asnum ;
  struct usb_interface_cache *intfc ;
  struct usb_host_interface *alt ;
  int i ;
  int n ;
  int len ;
  int retval ;
  int num_ep ;
  int num_ep_orig ;
  size_t __len ;
  void *__ret ;
  struct _ddebug descriptor ;
  char const   *tmp ;
  long tmp___0 ;
  void *tmp___1 ;
  char const   *tmp___2 ;

  {
  buffer0 = buffer;
  d = (struct usb_interface_descriptor *)buffer;
  buffer += (unsigned long )d->bLength;
  size -= (int )d->bLength;
  if ((unsigned int )d->bLength <= 8U) {
    goto skip_to_next_interface_descriptor;
  }
  intfc = 0;
  inum = (int )d->bInterfaceNumber;
  i = 0;
  goto ldv_28850;
  ldv_28849: ;
  if ((int )*(inums + (unsigned long )i) == inum) {
    intfc = config->intf_cache[i];
    goto ldv_28848;
  }
  i ++;
  ldv_28850: ;
  if ((int )config->desc.bNumInterfaces > i) {
    goto ldv_28849;
  }
  ldv_28848: ;
  if ((unsigned long )intfc == (unsigned long )((struct usb_interface_cache *)0) || intfc->num_altsetting >= (unsigned int )*(nalts + (unsigned long )i)) {
    goto skip_to_next_interface_descriptor;
  }
  asnum = (int )d->bAlternateSetting;
  i = 0;
  alt = (struct usb_host_interface *)(& intfc->altsetting);
  goto ldv_28852;
  ldv_28851: ;
  if ((int )alt->desc.bAlternateSetting == asnum) {
    dev_warn((struct device  const  *)ddev, "Duplicate descriptor for config %d interface %d altsetting %d, skipping\n",
             cfgno, inum, asnum);
    goto skip_to_next_interface_descriptor;
  }
  i ++;
  alt ++;
  ldv_28852: ;
  if ((unsigned int )i < intfc->num_altsetting) {
    goto ldv_28851;
  }
  (intfc->num_altsetting) ++;
  __len = 9UL;
  if (__len > 63UL) {
    __ret = __memcpy((void *)(& alt->desc), (void const   *)d, __len);
  } else {
    __ret = __builtin_memcpy((void *)(& alt->desc), (void const   *)d, __len);
  }
  alt->extra = buffer;
  i = find_next_descriptor(buffer, size, 5, 4, & n);
  alt->extralen = i;
  if (n > 0) {
    descriptor.modname = "usbcore";
    descriptor.function = "usb_parse_interface";
    descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/config.c.prepared";
    descriptor.format = "skipped %d descriptor%s after %s\n";
    descriptor.lineno = 429U;
    descriptor.flags = 1U;
    tmp___0 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
    if (tmp___0 != 0L) {
      tmp = plural(n);
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)ddev, "skipped %d descriptor%s after %s\n",
                        n, tmp, (char *)"interface");
    }
  }
  buffer += (unsigned long )i;
  size -= i;
  num_ep_orig = (int )alt->desc.bNumEndpoints;
  num_ep = num_ep_orig;
  alt->desc.bNumEndpoints = 0U;
  if (num_ep > 30) {
    dev_warn((struct device  const  *)ddev, "too many endpoints for config %d interface %d altsetting %d: %d, using maximum allowed: %d\n",
             cfgno, inum, asnum, num_ep, 30);
    num_ep = 30;
  }
  if (num_ep > 0) {
    len = (int )((unsigned int )num_ep * 64U);
    tmp___1 = kzalloc((size_t )len, 208U);
    alt->endpoint = (struct usb_host_endpoint *)tmp___1;
    if ((unsigned long )alt->endpoint == (unsigned long )((struct usb_host_endpoint *)0)) {
      return (-12);
    }
  }
  n = 0;
  goto ldv_28861;
  ldv_28860: ;
  if ((unsigned int )((struct usb_descriptor_header *)buffer)->bDescriptorType == 4U) {
    goto ldv_28859;
  }
  retval = usb_parse_endpoint(ddev, cfgno, inum, asnum, alt, num_ep, buffer, size);
  if (retval < 0) {
    return (retval);
  }
  n ++;
  buffer += (unsigned long )retval;
  size -= retval;
  ldv_28861: ;
  if (size > 0) {
    goto ldv_28860;
  }
  ldv_28859: ;
  if (n != num_ep_orig) {
    tmp___2 = plural(n);
    dev_warn((struct device  const  *)ddev, "config %d interface %d altsetting %d has %d endpoint descriptor%s, different from the interface descriptor\'s value: %d\n",
             cfgno, inum, asnum, n, tmp___2, num_ep_orig);
  }
  return ((int )((unsigned int )((long )buffer) - (unsigned int )((long )buffer0)));
  skip_to_next_interface_descriptor: 
  i = find_next_descriptor(buffer, size, 4, 4, 0);
  return ((int )(((unsigned int )((long )buffer) - (unsigned int )((long )buffer0)) + (unsigned int )i));
}
}
static int usb_parse_configuration(struct usb_device *dev , int cfgidx , struct usb_host_config *config ,
                                   unsigned char *buffer , int size ) 
{ struct device *ddev ;
  unsigned char *buffer0 ;
  int cfgno ;
  int nintf ;
  int nintf_orig ;
  int i ;
  int j ;
  int n ;
  struct usb_interface_cache *intfc ;
  unsigned char *buffer2 ;
  int size2 ;
  struct usb_descriptor_header *header ;
  int len ;
  int retval ;
  u8 inums[32U] ;
  u8 nalts[32U] ;
  unsigned int iad_num ;
  size_t __len ;
  void *__ret ;
  char const   *tmp ;
  struct usb_interface_descriptor *d ;
  int inum ;
  char const   *tmp___0 ;
  void *tmp___1 ;
  struct _ddebug descriptor ;
  char const   *tmp___2 ;
  long tmp___3 ;

  {
  ddev = & dev->dev;
  buffer0 = buffer;
  iad_num = 0U;
  __len = 9UL;
  if (__len > 63UL) {
    __ret = __memcpy((void *)(& config->desc), (void const   *)buffer, __len);
  } else {
    __ret = __builtin_memcpy((void *)(& config->desc), (void const   *)buffer, __len);
  }
  if ((unsigned int )config->desc.bDescriptorType != 2U || (unsigned int )config->desc.bLength <= 8U) {
    dev_err((struct device  const  *)ddev, "invalid descriptor for config index %d: type = 0x%X, length = %d\n",
            cfgidx, (int )config->desc.bDescriptorType, (int )config->desc.bLength);
    return (-22);
  }
  cfgno = (int )config->desc.bConfigurationValue;
  buffer += (unsigned long )config->desc.bLength;
  size -= (int )config->desc.bLength;
  nintf_orig = (int )config->desc.bNumInterfaces;
  nintf = nintf_orig;
  if (nintf > 32) {
    dev_warn((struct device  const  *)ddev, "config %d has too many interfaces: %d, using maximum allowed: %d\n",
             cfgno, nintf, 32);
    nintf = 32;
  }
  n = 0;
  buffer2 = buffer;
  size2 = size;
  goto ldv_28897;
  ldv_28896: ;
  if ((unsigned int )size2 <= 1U) {
    tmp = plural(size2);
    dev_warn((struct device  const  *)ddev, "config %d descriptor has %d excess byte%s, ignoring\n",
             cfgno, size2, tmp);
    goto ldv_28889;
  }
  header = (struct usb_descriptor_header *)buffer2;
  if ((int )header->bLength > size2 || (unsigned int )header->bLength <= 1U) {
    dev_warn((struct device  const  *)ddev, "config %d has an invalid descriptor of length %d, skipping remainder of the config\n",
             cfgno, (int )header->bLength);
    goto ldv_28889;
  }
  if ((unsigned int )header->bDescriptorType == 4U) {
    d = (struct usb_interface_descriptor *)header;
    if ((unsigned int )d->bLength <= 8U) {
      dev_warn((struct device  const  *)ddev, "config %d has an invalid interface descriptor of length %d, skipping\n",
               cfgno, (int )d->bLength);
      goto ldv_28892;
    }
    inum = (int )d->bInterfaceNumber;
    if ((dev->quirks & 32U) != 0U && n >= nintf_orig) {
      dev_warn((struct device  const  *)ddev, "config %d has more interface descriptors, than it declares in bNumInterfaces, ignoring interface number: %d\n",
               cfgno, inum);
      goto ldv_28892;
    }
    if (inum >= nintf_orig) {
      dev_warn((struct device  const  *)ddev, "config %d has an invalid interface number: %d but max is %d\n",
               cfgno, inum, nintf_orig + -1);
    }
    i = 0;
    goto ldv_28895;
    ldv_28894: ;
    if ((int )inums[i] == inum) {
      goto ldv_28893;
    }
    i ++;
    ldv_28895: ;
    if (i < n) {
      goto ldv_28894;
    }
    ldv_28893: ;
    if (i < n) {
      if ((unsigned int )nalts[i] != 255U) {
        nalts[i] = (u8 )((int )nalts[i] + 1);
      }
    } else
    if (n <= 31) {
      inums[n] = (u8 )inum;
      nalts[n] = 1U;
      n ++;
    }
  } else
  if ((unsigned int )header->bDescriptorType == 11U) {
    if (iad_num == 16U) {
      dev_warn((struct device  const  *)ddev, "found more Interface Association Descriptors than allocated for in configuration %d\n",
               cfgno);
    } else {
      config->intf_assoc[iad_num] = (struct usb_interface_assoc_descriptor *)header;
      iad_num ++;
    }
  } else
  if ((unsigned int )header->bDescriptorType == 1U || (unsigned int )header->bDescriptorType == 2U) {
    dev_warn((struct device  const  *)ddev, "config %d contains an unexpected descriptor of type 0x%X, skipping\n",
             cfgno, (int )header->bDescriptorType);
  }
  ldv_28892: 
  buffer2 += (unsigned long )header->bLength;
  size2 -= (int )header->bLength;
  ldv_28897: ;
  if (size2 > 0) {
    goto ldv_28896;
  }
  ldv_28889: 
  size = (int )((unsigned int )((long )buffer2) - (unsigned int )((long )buffer));
  config->desc.wTotalLength = (int )((unsigned short )((long )buffer2)) - (int )((unsigned short )((long )buffer0));
  if (n != nintf) {
    tmp___0 = plural(n);
    dev_warn((struct device  const  *)ddev, "config %d has %d interface%s, different from the descriptor\'s value: %d\n",
             cfgno, n, tmp___0, nintf_orig);
  } else
  if (n == 0) {
    dev_warn((struct device  const  *)ddev, "config %d has no interfaces?\n", cfgno);
  }
  nintf = n;
  config->desc.bNumInterfaces = (__u8 )nintf;
  i = 0;
  goto ldv_28902;
  ldv_28901: 
  j = 0;
  goto ldv_28900;
  ldv_28899: ;
  if ((int )inums[j] == i) {
    goto ldv_28898;
  }
  j ++;
  ldv_28900: ;
  if (j < nintf) {
    goto ldv_28899;
  }
  ldv_28898: ;
  if (j >= nintf) {
    dev_warn((struct device  const  *)ddev, "config %d has no interface number %d\n",
             cfgno, i);
  }
  i ++;
  ldv_28902: ;
  if (i < nintf) {
    goto ldv_28901;
  }
  i = 0;
  goto ldv_28905;
  ldv_28904: 
  j = (int )nalts[i];
  if (j > 128) {
    dev_warn((struct device  const  *)ddev, "too many alternate settings for config %d interface %d: %d, using maximum allowed: %d\n",
             cfgno, (int )inums[i], j, 128);
    j = 128;
    nalts[i] = 128U;
  }
  len = (int )((unsigned int )((unsigned long )j) * 40U + 8U);
  tmp___1 = kzalloc((size_t )len, 208U);
  intfc = (struct usb_interface_cache *)tmp___1;
  config->intf_cache[i] = intfc;
  if ((unsigned long )intfc == (unsigned long )((struct usb_interface_cache *)0)) {
    return (-12);
  }
  kref_init(& intfc->ref);
  i ++;
  ldv_28905: ;
  if (i < nintf) {
    goto ldv_28904;
  }
  config->extra = buffer;
  i = find_next_descriptor(buffer, size, 4, 4, & n);
  config->extralen = i;
  if (n > 0) {
    descriptor.modname = "usbcore";
    descriptor.function = "usb_parse_configuration";
    descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/config.c.prepared";
    descriptor.format = "skipped %d descriptor%s after %s\n";
    descriptor.lineno = 653U;
    descriptor.flags = 1U;
    tmp___3 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
    if (tmp___3 != 0L) {
      tmp___2 = plural(n);
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)ddev, "skipped %d descriptor%s after %s\n",
                        n, tmp___2, (char *)"configuration");
    }
  }
  buffer += (unsigned long )i;
  size -= i;
  goto ldv_28910;
  ldv_28909: 
  retval = usb_parse_interface(ddev, cfgno, config, buffer, size, (u8 *)(& inums),
                               (u8 *)(& nalts));
  if (retval < 0) {
    return (retval);
  }
  buffer += (unsigned long )retval;
  size -= retval;
  ldv_28910: ;
  if (size > 0) {
    goto ldv_28909;
  }
  i = 0;
  goto ldv_28919;
  ldv_28918: 
  intfc = config->intf_cache[i];
  j = 0;
  goto ldv_28916;
  ldv_28915: 
  n = 0;
  goto ldv_28914;
  ldv_28913: ;
  if ((int )intfc->altsetting[n].desc.bAlternateSetting == j) {
    goto ldv_28912;
  }
  n ++;
  ldv_28914: ;
  if ((unsigned int )n < intfc->num_altsetting) {
    goto ldv_28913;
  }
  ldv_28912: ;
  if ((unsigned int )n >= intfc->num_altsetting) {
    dev_warn((struct device  const  *)ddev, "config %d interface %d has no altsetting %d\n",
             cfgno, (int )inums[i], j);
  }
  j ++;
  ldv_28916: ;
  if ((unsigned int )j < intfc->num_altsetting) {
    goto ldv_28915;
  }
  i ++;
  ldv_28919: ;
  if (i < nintf) {
    goto ldv_28918;
  }
  return (0);
}
}
void usb_destroy_configuration(struct usb_device *dev ) 
{ int c ;
  int i ;
  struct usb_host_config *cf ;

  {
  if ((unsigned long )dev->config == (unsigned long )((struct usb_host_config *)0)) {
    return;
  }
  if ((unsigned long )dev->rawdescriptors != (unsigned long )((char **)0)) {
    i = 0;
    goto ldv_28927;
    ldv_28926: 
    kfree((void const   *)*(dev->rawdescriptors + (unsigned long )i));
    i ++;
    ldv_28927: ;
    if ((int )dev->descriptor.bNumConfigurations > i) {
      goto ldv_28926;
    }
    kfree((void const   *)dev->rawdescriptors);
    dev->rawdescriptors = 0;
  }
  c = 0;
  goto ldv_28934;
  ldv_28933: 
  cf = dev->config + (unsigned long )c;
  kfree((void const   *)cf->string);
  i = 0;
  goto ldv_28931;
  ldv_28930: ;
  if ((unsigned long )cf->intf_cache[i] != (unsigned long )((struct usb_interface_cache *)0)) {
    kref_put(& (cf->intf_cache[i])->ref, & usb_release_interface_cache);
  }
  i ++;
  ldv_28931: ;
  if ((int )cf->desc.bNumInterfaces > i) {
    goto ldv_28930;
  }
  c ++;
  ldv_28934: ;
  if ((int )dev->descriptor.bNumConfigurations > c) {
    goto ldv_28933;
  }
  kfree((void const   *)dev->config);
  dev->config = 0;
  return;
}
}
int usb_get_configuration(struct usb_device *dev ) 
{ struct device *ddev ;
  int ncfg ;
  int result ;
  unsigned int cfgno ;
  unsigned int length ;
  unsigned char *bigbuffer ;
  struct usb_config_descriptor *desc ;
  void *tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  int _max1 ;
  int _max2 ;
  void *tmp___2 ;
  int tmp___3 ;

  {
  ddev = & dev->dev;
  ncfg = (int )dev->descriptor.bNumConfigurations;
  result = 0;
  cfgno = 0U;
  if ((unsigned int )*((unsigned char *)dev + 1588UL) == 0U) {
    goto out_not_authorized;
  }
  result = -12;
  if (ncfg > 8) {
    dev_warn((struct device  const  *)ddev, "too many configurations: %d, using maximum allowed: %d\n",
             ncfg, 8);
    ncfg = 8;
    dev->descriptor.bNumConfigurations = 8U;
  }
  if (ncfg <= 0) {
    dev_err((struct device  const  *)ddev, "no configurations\n");
    return (-22);
  }
  length = (unsigned int )((unsigned long )ncfg) * 680U;
  tmp = kzalloc((size_t )length, 208U);
  dev->config = (struct usb_host_config *)tmp;
  if ((unsigned long )dev->config == (unsigned long )((struct usb_host_config *)0)) {
    goto err2;
  }
  length = (unsigned int )((unsigned long )ncfg) * 8U;
  tmp___0 = kzalloc((size_t )length, 208U);
  dev->rawdescriptors = (char **)tmp___0;
  if ((unsigned long )dev->rawdescriptors == (unsigned long )((char **)0)) {
    goto err2;
  }
  tmp___1 = kmalloc(9UL, 208U);
  desc = (struct usb_config_descriptor *)tmp___1;
  if ((unsigned long )desc == (unsigned long )((struct usb_config_descriptor *)0)) {
    goto err2;
  }
  result = 0;
  goto ldv_28954;
  ldv_28953: 
  result = usb_get_descriptor(dev, 2, (int )((unsigned char )cfgno), (void *)desc,
                              9);
  if (result < 0) {
    dev_err((struct device  const  *)ddev, "unable to read config index %d descriptor/%s: %d\n",
            cfgno, (char *)"start", result);
    if (result != -32) {
      goto err;
    }
    dev_err((struct device  const  *)ddev, "chopping to %d config(s)\n", cfgno);
    dev->descriptor.bNumConfigurations = (__u8 )cfgno;
    goto ldv_28949;
  } else
  if (result <= 3) {
    dev_err((struct device  const  *)ddev, "config index %d descriptor too short (expected %i, got %i)\n",
            cfgno, 9, result);
    result = -22;
    goto err;
  }
  _max1 = (int )desc->wTotalLength;
  _max2 = 9;
  if (_max1 > _max2) {
    tmp___3 = _max1;
  } else {
    tmp___3 = _max2;
  }
  length = (unsigned int )tmp___3;
  tmp___2 = kmalloc((size_t )length, 208U);
  bigbuffer = (unsigned char *)tmp___2;
  if ((unsigned long )bigbuffer == (unsigned long )((unsigned char *)0)) {
    result = -12;
    goto err;
  }
  result = usb_get_descriptor(dev, 2, (int )((unsigned char )cfgno), (void *)bigbuffer,
                              (int )length);
  if (result < 0) {
    dev_err((struct device  const  *)ddev, "unable to read config index %d descriptor/%s\n",
            cfgno, (char *)"all");
    kfree((void const   *)bigbuffer);
    goto err;
  }
  if ((unsigned int )result < length) {
    dev_warn((struct device  const  *)ddev, "config index %d descriptor too short (expected %i, got %i)\n",
             cfgno, length, result);
    length = (unsigned int )result;
  }
  *(dev->rawdescriptors + (unsigned long )cfgno) = (char *)bigbuffer;
  result = usb_parse_configuration(dev, (int )cfgno, dev->config + (unsigned long )cfgno,
                                   bigbuffer, (int )length);
  if (result < 0) {
    cfgno ++;
    goto err;
  }
  cfgno ++;
  ldv_28954: ;
  if ((unsigned int )ncfg > cfgno) {
    goto ldv_28953;
  }
  ldv_28949: 
  result = 0;
  err: 
  kfree((void const   *)desc);
  out_not_authorized: 
  dev->descriptor.bNumConfigurations = (__u8 )cfgno;
  err2: ;
  if (result == -12) {
    dev_err((struct device  const  *)ddev, "out of memory\n");
  }
  return (result);
}
}
void usb_release_bos_descriptor(struct usb_device *dev ) 
{ 

  {
  if ((unsigned long )dev->bos != (unsigned long )((struct usb_host_bos *)0)) {
    kfree((void const   *)(dev->bos)->desc);
    kfree((void const   *)dev->bos);
    dev->bos = 0;
  }
  return;
}
}
int usb_get_bos_descriptor(struct usb_device *dev ) 
{ struct device *ddev ;
  struct usb_bos_descriptor *bos ;
  struct usb_dev_cap_header *cap ;
  unsigned char *buffer ;
  int length ;
  int total_len ;
  int num ;
  int i ;
  int ret ;
  void *tmp ;
  void *tmp___0 ;
  void *tmp___1 ;

  {
  ddev = & dev->dev;
  tmp = kzalloc(5UL, 208U);
  bos = (struct usb_bos_descriptor *)tmp;
  if ((unsigned long )bos == (unsigned long )((struct usb_bos_descriptor *)0)) {
    return (-12);
  }
  ret = usb_get_descriptor(dev, 15, 0, (void *)bos, 5);
  if (ret <= 4) {
    dev_err((struct device  const  *)ddev, "unable to get BOS descriptor\n");
    if (ret >= 0) {
      ret = -42;
    }
    kfree((void const   *)bos);
    return (ret);
  }
  length = (int )bos->bLength;
  total_len = (int )bos->wTotalLength;
  num = (int )bos->bNumDeviceCaps;
  kfree((void const   *)bos);
  if (total_len < length) {
    return (-22);
  }
  tmp___0 = kzalloc(32UL, 208U);
  dev->bos = (struct usb_host_bos *)tmp___0;
  if ((unsigned long )dev->bos == (unsigned long )((struct usb_host_bos *)0)) {
    return (-12);
  }
  tmp___1 = kzalloc((size_t )total_len, 208U);
  buffer = (unsigned char *)tmp___1;
  if ((unsigned long )buffer == (unsigned long )((unsigned char *)0)) {
    ret = -12;
    goto err;
  }
  (dev->bos)->desc = (struct usb_bos_descriptor *)buffer;
  ret = usb_get_descriptor(dev, 15, 0, (void *)buffer, total_len);
  if (ret < total_len) {
    dev_err((struct device  const  *)ddev, "unable to get BOS descriptor set\n");
    if (ret >= 0) {
      ret = -42;
    }
    goto err;
  }
  total_len -= length;
  i = 0;
  goto ldv_28980;
  ldv_28979: 
  buffer += (unsigned long )length;
  cap = (struct usb_dev_cap_header *)buffer;
  length = (int )cap->bLength;
  if (total_len < length) {
    goto ldv_28971;
  }
  total_len -= length;
  if ((unsigned int )cap->bDescriptorType != 16U) {
    dev_warn((struct device  const  *)ddev, "descriptor type invalid, skip\n");
    goto ldv_28972;
  }
  switch ((int )cap->bDevCapabilityType) {
  case 1: ;
  goto ldv_28974;
  case 2: 
  (dev->bos)->ext_cap = (struct usb_ext_cap_descriptor *)buffer;
  goto ldv_28974;
  case 3: 
  (dev->bos)->ss_cap = (struct usb_ss_cap_descriptor *)buffer;
  goto ldv_28974;
  case 4: 
  (dev->bos)->ss_id = (struct usb_ss_container_id_descriptor *)buffer;
  goto ldv_28974;
  default: ;
  goto ldv_28974;
  }
  ldv_28974: ;
  ldv_28972: 
  i ++;
  ldv_28980: ;
  if (i < num) {
    goto ldv_28979;
  }
  ldv_28971: ;
  return (0);
  err: 
  usb_release_bos_descriptor(dev);
  return (ret);
}
}
void ldv_mutex_lock_145(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_lock(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_146(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_lock(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_147(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
int ldv_mutex_trylock_148(struct mutex *ldv_func_arg1 ) 
{ ldv_func_ret_type___2 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
  tmp = mutex_trylock(ldv_func_arg1);
  ldv_func_res = tmp;
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
  return (tmp___0);
  return (ldv_func_res);
}
}
void ldv_mutex_unlock_149(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
extern char *strrchr(char const   * , int  ) ;
 static long PTR_ERR(void const   *ptr ) 
{ 

  {
  return ((long )ptr);
}
}
int ldv_mutex_trylock_158(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_156(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_159(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_155(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_157(struct mutex *ldv_func_arg1 ) ;
extern void down_write(struct rw_semaphore * ) ;
extern void up_write(struct rw_semaphore * ) ;
extern bool try_module_get(struct module * ) ;
extern void module_put(struct module * ) ;
extern struct class *__class_create(struct module * , char const   * , struct lock_class_key * ) ;
extern void class_destroy(struct class * ) ;
extern struct device *device_create(struct class * , struct device * , dev_t  , void * ,
                                    char const   *  , ...) ;
extern void device_destroy(struct class * , dev_t  ) ;
 static unsigned int iminor(struct inode  const  *inode ) 
{ 

  {
  return ((unsigned int )inode->i_rdev & 1048575U);
}
}
extern int __register_chrdev(unsigned int  , unsigned int  , unsigned int  , char const   * ,
                             struct file_operations  const  * ) ;
extern void __unregister_chrdev(unsigned int  , unsigned int  , unsigned int  , char const   * ) ;
 static int register_chrdev(unsigned int major , char const   *name , struct file_operations  const  *fops ) 
{ int tmp ;

  {
  tmp = __register_chrdev(major, 0U, 256U, name, fops);
  return (tmp);
}
}
 static void unregister_chrdev(unsigned int major , char const   *name ) 
{ 

  {
  __unregister_chrdev(major, 0U, 256U, name);
  return;
}
}
extern loff_t noop_llseek(struct file * , loff_t  , int  ) ;
int usb_register_dev(struct usb_interface *intf , struct usb_class_driver *class_driver ) ;
void usb_deregister_dev(struct usb_interface *intf , struct usb_class_driver *class_driver ) ;
static struct file_operations  const  *usb_minors[256U]  ;
static struct rw_semaphore minor_rwsem  =    {0L, {{{0U}}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "minor_rwsem.wait_lock",
                                                                  0, 0UL}}, {& minor_rwsem.wait_list,
                                                                             & minor_rwsem.wait_list},
    {0, {0, 0}, "minor_rwsem", 0, 0UL}};
static int usb_open(struct inode *inode , struct file *file ) 
{ int minor ;
  unsigned int tmp ;
  struct file_operations  const  *c ;
  int err ;
  struct file_operations  const  *old_fops ;
  struct file_operations  const  *new_fops ;
  bool tmp___1 ;
  bool tmp___3 ;

  {
  tmp = iminor((struct inode  const  *)inode);
  minor = (int )tmp;
  err = -19;
  new_fops = 0;
  down_read(& minor_rwsem);
  c = usb_minors[minor];
  if ((unsigned long )c == (unsigned long )((struct file_operations  const  *)0)) {
    goto done;
  } else {
    if ((unsigned long )c != (unsigned long )((struct file_operations  const  *)0)) {
      tmp___1 = try_module_get(c->owner);
      if ((int )tmp___1) {
        new_fops = c;
      } else {
        new_fops = 0;
      }
    } else {
      new_fops = 0;
    }
    if ((unsigned long )new_fops == (unsigned long )((struct file_operations  const  *)0)) {
      goto done;
    }
  }
  old_fops = file->f_op;
  file->f_op = new_fops;
  if ((unsigned long )(file->f_op)->open != (unsigned long )((int (*)(struct inode * ,
                                                                      struct file * ))0)) {
    err = (*((file->f_op)->open))(inode, file);
  }
  if (err != 0) {
    if ((unsigned long )file->f_op != (unsigned long )((struct file_operations  const  *)0)) {
      module_put((file->f_op)->owner);
    }
    if ((unsigned long )old_fops != (unsigned long )((struct file_operations  const  *)0)) {
      tmp___3 = try_module_get(old_fops->owner);
      if ((int )tmp___3) {
        file->f_op = old_fops;
      } else {
        file->f_op = 0;
      }
    } else {
      file->f_op = 0;
    }
  }
  if ((unsigned long )old_fops != (unsigned long )((struct file_operations  const  *)0)) {
    module_put(old_fops->owner);
  }
  done: 
  up_read(& minor_rwsem);
  return (err);
}
}
static struct file_operations  const  usb_fops  = 
     {& __this_module, & noop_llseek, 0, 0, 0, 0, 0, 0, 0, 0, 0, & usb_open, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
static struct usb_class *usb_class  ;
static char *usb_devnode___0(struct device *dev , umode_t *mode ) 
{ struct usb_class_driver *drv ;
  void *tmp ;
  char *tmp___0 ;

  {
  tmp = dev_get_drvdata((struct device  const  *)dev);
  drv = (struct usb_class_driver *)tmp;
  if ((unsigned long )drv == (unsigned long )((struct usb_class_driver *)0) || (unsigned long )drv->devnode == (unsigned long )((char *(*)(struct device * ,
                                                                                                                                           umode_t * ))0)) {
    return (0);
  }
  tmp___0 = (*(drv->devnode))(dev, mode);
  return (tmp___0);
}
}
static int init_usb_class(void) 
{ int result ;
  void *tmp ;
  struct lock_class_key __key ;
  struct class *tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
  result = 0;
  if ((unsigned long )usb_class != (unsigned long )((struct usb_class *)0)) {
    kref_get(& usb_class->kref);
    goto exit;
  }
  tmp = kmalloc(16UL, 208U);
  usb_class = (struct usb_class *)tmp;
  if ((unsigned long )usb_class == (unsigned long )((struct usb_class *)0)) {
    result = -12;
    goto exit;
  }
  kref_init(& usb_class->kref);
  tmp___0 = __class_create(& __this_module, "usbmisc", & __key);
  usb_class->class = tmp___0;
  tmp___2 = IS_ERR((void const   *)usb_class->class);
  if (tmp___2 != 0L) {
    tmp___1 = IS_ERR((void const   *)usb_class->class);
    result = (int )tmp___1;
    printk("\vclass_create failed for usb devices\n");
    kfree((void const   *)usb_class);
    usb_class = 0;
    goto exit;
  }
  (usb_class->class)->devnode = & usb_devnode___0;
  exit: ;
  return (result);
}
}
static void release_usb_class(struct kref *kref ) 
{ 

  {
  class_destroy(usb_class->class);
  kfree((void const   *)usb_class);
  usb_class = 0;
  return;
}
}
static void destroy_usb_class(void) 
{ 

  {
  if ((unsigned long )usb_class != (unsigned long )((struct usb_class *)0)) {
    kref_put(& usb_class->kref, & release_usb_class);
  }
  return;
}
}
int usb_major_init(void) 
{ int error ;

  {
  error = register_chrdev(180U, "usb", & usb_fops);
  if (error != 0) {
    printk("\vUnable to get major %d for usb devices\n", 180);
  }
  return (error);
}
}
void usb_major_cleanup(void) 
{ 

  {
  unregister_chrdev(180U, "usb");
  return;
}
}
int usb_register_dev(struct usb_interface *intf , struct usb_class_driver *class_driver ) 
{ int retval ;
  int minor_base ;
  int minor ;
  char name[20U] ;
  char *temp ;
  struct _ddebug descriptor ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
  minor_base = class_driver->minor_base;
  minor_base = 0;
  if ((unsigned long )class_driver->fops == (unsigned long )((struct file_operations  const  *)0)) {
    return (-22);
  }
  if (intf->minor >= 0) {
    return (-98);
  }
  retval = init_usb_class();
  if (retval != 0) {
    return (retval);
  }
  descriptor.modname = "usbcore";
  descriptor.function = "usb_register_dev";
  descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/file.c.prepared";
  descriptor.format = "looking for a minor, starting at %d\n";
  descriptor.lineno = 258U;
  descriptor.flags = 1U;
  tmp = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
  if (tmp != 0L) {
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& intf->dev), "looking for a minor, starting at %d\n",
                      minor_base);
  }
  down_write(& minor_rwsem);
  minor = minor_base;
  goto ldv_28396;
  ldv_28395: ;
  if ((unsigned long )usb_minors[minor] != (unsigned long )((struct file_operations  const  *)0)) {
    goto ldv_28393;
  }
  usb_minors[minor] = class_driver->fops;
  intf->minor = minor;
  goto ldv_28394;
  ldv_28393: 
  minor ++;
  ldv_28396: ;
  if (minor <= 255) {
    goto ldv_28395;
  }
  ldv_28394: 
  up_write(& minor_rwsem);
  if (intf->minor < 0) {
    return (-54);
  }
  snprintf((char *)(& name), 20UL, (char const   *)class_driver->name, minor - minor_base);
  temp = strrchr((char const   *)(& name), 47);
  if ((unsigned long )temp != (unsigned long )((char *)0) && (int )((signed char )*(temp + 1UL)) != 0) {
    temp ++;
  } else {
    temp = (char *)(& name);
  }
  intf->usb_dev = device_create(usb_class->class, & intf->dev, (dev_t )(minor | 188743680),
                                (void *)class_driver, "%s", temp);
  tmp___1 = IS_ERR((void const   *)intf->usb_dev);
  if (tmp___1 != 0L) {
    down_write(& minor_rwsem);
    usb_minors[minor] = 0;
    intf->minor = -1;
    up_write(& minor_rwsem);
    tmp___0 = PTR_ERR((void const   *)intf->usb_dev);
    retval = (int )tmp___0;
  }
  return (retval);
}
}
void usb_deregister_dev(struct usb_interface *intf , struct usb_class_driver *class_driver ) 
{ struct _ddebug descriptor ;
  long tmp ;

  {
  if (intf->minor == -1) {
    return;
  }
  descriptor.modname = "usbcore";
  descriptor.function = "usb_deregister_dev";
  descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/file.c.prepared";
  descriptor.format = "removing %d minor\n";
  descriptor.lineno = 314U;
  descriptor.flags = 1U;
  tmp = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
  if (tmp != 0L) {
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& intf->dev), "removing %d minor\n",
                      intf->minor);
  }
  down_write(& minor_rwsem);
  usb_minors[intf->minor] = 0;
  up_write(& minor_rwsem);
  device_destroy(usb_class->class, (dev_t )(intf->minor | 188743680));
  intf->usb_dev = 0;
  intf->minor = -1;
  destroy_usb_class();
  return;
}
}
void ldv_main7_sequence_infinite_withcheck_stateful(void) 
{ struct inode *var_group1 ;
  struct file *var_group2 ;
  int res_usb_open_0 ;
  int ldv_s_usb_fops_file_operations ;
  int tmp ;
  int tmp___0 ;

  {
  ldv_s_usb_fops_file_operations = 0;
  LDV_IN_INTERRUPT = 1;
  ldv_initialize();
  goto ldv_28442;
  ldv_28441: 
  tmp = __VERIFIER_nondet_int();
  switch (tmp) {
  case 0: ;
  if (ldv_s_usb_fops_file_operations == 0) {
    ldv_handler_precall();
    res_usb_open_0 = usb_open(var_group1, var_group2);
    ldv_check_return_value(res_usb_open_0);
    if (res_usb_open_0 != 0) {
      goto ldv_module_exit;
    }
    ldv_s_usb_fops_file_operations = 0;
  }
  goto ldv_28439;
  default: ;
  goto ldv_28439;
  }
  ldv_28439: ;
  ldv_28442: 
  tmp___0 = __VERIFIER_nondet_int();
  if (tmp___0 != 0 || ldv_s_usb_fops_file_operations != 0) {
    goto ldv_28441;
  }
  ldv_module_exit: 
  ldv_check_final_state();
  return;
}
}
void ldv_mutex_lock_155(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_lock(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_156(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_lock(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_157(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
int ldv_mutex_trylock_158(struct mutex *ldv_func_arg1 ) 
{ ldv_func_ret_type___2 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
  tmp = mutex_trylock(ldv_func_arg1);
  ldv_func_res = tmp;
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
  return (tmp___0);
  return (ldv_func_res);
}
}
void ldv_mutex_unlock_159(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
int ldv_mutex_trylock_168(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_166(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_169(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_165(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_167(struct mutex *ldv_func_arg1 ) ;
 static int is_device_dma_capable(struct device *dev ) 
{ 

  {
  return ((unsigned long )dev->dma_mask != (unsigned long )((u64 *)0) && *(dev->dma_mask) != 0ULL);
}
}
extern void debug_dma_alloc_coherent(struct device * , size_t  , dma_addr_t  , void * ) ;
extern void debug_dma_free_coherent(struct device * , size_t  , void * , dma_addr_t  ) ;
extern struct device x86_dma_fallback_dev ;
 static unsigned long dma_alloc_coherent_mask(struct device *dev , gfp_t gfp ) 
{ unsigned long dma_mask ;

  {
  dma_mask = 0UL;
  dma_mask = (unsigned long )dev->coherent_dma_mask;
  if (dma_mask == 0UL) {
    if ((int )gfp & 1) {
      dma_mask = 16777215UL;
    } else {
      dma_mask = 4294967295UL;
    }
  }
  return (dma_mask);
}
}
 static gfp_t dma_alloc_coherent_gfp_flags(struct device *dev , gfp_t gfp ) 
{ unsigned long dma_mask ;
  unsigned long tmp ;

  {
  tmp = dma_alloc_coherent_mask(dev, gfp);
  dma_mask = tmp;
  if ((unsigned long long )dma_mask <= 16777215ULL) {
    gfp |= 1U;
  }
  if ((unsigned long long )dma_mask <= 4294967295ULL && (gfp & 1U) == 0U) {
    gfp |= 4U;
  }
  return (gfp);
}
}
 static void *dma_alloc_attrs(struct device *dev , size_t size , dma_addr_t *dma_handle ,
                                      gfp_t gfp , struct dma_attrs *attrs ) 
{ struct dma_map_ops *ops ;
  struct dma_map_ops *tmp ;
  void *memory ;
  int tmp___0 ;
  gfp_t tmp___1 ;

  {
  tmp = get_dma_ops(dev);
  ops = tmp;
  gfp &= 4294967288U;
  if ((unsigned long )dev == (unsigned long )((struct device *)0)) {
    dev = & x86_dma_fallback_dev;
  }
  tmp___0 = is_device_dma_capable(dev);
  if (tmp___0 == 0) {
    return (0);
  }
  if ((unsigned long )ops->alloc == (unsigned long )((void *(*)(struct device * ,
                                                                size_t  , dma_addr_t * ,
                                                                gfp_t  , struct dma_attrs * ))0)) {
    return (0);
  }
  tmp___1 = dma_alloc_coherent_gfp_flags(dev, gfp);
  memory = (*(ops->alloc))(dev, size, dma_handle, tmp___1, attrs);
  debug_dma_alloc_coherent(dev, size, *dma_handle, memory);
  return (memory);
}
}
 static void dma_free_attrs(struct device *dev , size_t size , void *vaddr ,
                                    dma_addr_t bus , struct dma_attrs *attrs ) 
{ struct dma_map_ops *ops ;
  struct dma_map_ops *tmp ;
  int __ret_warn_on ;
  unsigned long _flags ;
  int tmp___0 ;
  long tmp___1 ;

  {
  tmp = get_dma_ops(dev);
  ops = tmp;
  _flags = arch_local_save_flags();
  tmp___0 = arch_irqs_disabled_flags(_flags);
  __ret_warn_on = tmp___0 != 0;
  tmp___1 = ldv__builtin_expect(__ret_warn_on != 0, 0L);
  if (tmp___1 != 0L) {
    warn_slowpath_null("/work/ldvuser/exper_fp/inst/current/envs/linux-3.10-rc1.tar/linux-3.10-rc1/arch/x86/include/asm/dma-mapping.h",
                       166);
  }
  ldv__builtin_expect(__ret_warn_on != 0, 0L);
  debug_dma_free_coherent(dev, size, vaddr, bus);
  if ((unsigned long )ops->free != (unsigned long )((void (*)(struct device * , size_t  ,
                                                              void * , dma_addr_t  ,
                                                              struct dma_attrs * ))0)) {
    (*(ops->free))(dev, size, vaddr, bus, attrs);
  }
  return;
}
}
extern struct dma_pool *dma_pool_create(char const   * , struct device * , size_t  ,
                                        size_t  , size_t  ) ;
extern void dma_pool_destroy(struct dma_pool * ) ;
extern void *dma_pool_alloc(struct dma_pool * , gfp_t  , dma_addr_t * ) ;
extern void dma_pool_free(struct dma_pool * , void * , dma_addr_t  ) ;
static size_t const   pool_max[4U]  = {      32UL,      128UL,      512UL,      2048UL};
int hcd_buffer_create(struct usb_hcd *hcd ) 
{ char name[16U] ;
  int i ;
  int size ;

  {
  if ((unsigned long )(hcd->self.controller)->dma_mask == (unsigned long )((u64 *)0) && ((int )(hcd->driver)->flags & 2) == 0) {
    return (0);
  }
  i = 0;
  goto ldv_28928;
  ldv_28927: 
  size = (int )pool_max[i];
  if (size == 0) {
    goto ldv_28926;
  }
  snprintf((char *)(& name), 16UL, "buffer-%d", size);
  hcd->pool[i] = dma_pool_create((char const   *)(& name), hcd->self.controller, (size_t )size,
                                 (size_t )size, 0UL);
  if ((unsigned long )hcd->pool[i] == (unsigned long )((struct dma_pool *)0)) {
    hcd_buffer_destroy(hcd);
    return (-12);
  }
  ldv_28926: 
  i ++;
  ldv_28928: ;
  if (i <= 3) {
    goto ldv_28927;
  }
  return (0);
}
}
void hcd_buffer_destroy(struct usb_hcd *hcd ) 
{ int i ;
  struct dma_pool *pool ;

  {
  i = 0;
  goto ldv_28936;
  ldv_28935: 
  pool = hcd->pool[i];
  if ((unsigned long )pool != (unsigned long )((struct dma_pool *)0)) {
    dma_pool_destroy(pool);
    hcd->pool[i] = 0;
  }
  i ++;
  ldv_28936: ;
  if (i <= 3) {
    goto ldv_28935;
  }
  return;
}
}
void *hcd_buffer_alloc(struct usb_bus *bus , size_t size , gfp_t mem_flags , dma_addr_t *dma ) 
{ struct usb_hcd *hcd ;
  struct usb_hcd *tmp ;
  int i ;
  void *tmp___0 ;
  void *tmp___1 ;
  void *tmp___2 ;

  {
  tmp = bus_to_hcd(bus);
  hcd = tmp;
  if ((unsigned long )(bus->controller)->dma_mask == (unsigned long )((u64 *)0) && ((int )(hcd->driver)->flags & 2) == 0) {
    *dma = 0xffffffffffffffffULL;
    tmp___0 = kmalloc(size, mem_flags);
    return (tmp___0);
  }
  i = 0;
  goto ldv_28947;
  ldv_28946: ;
  if ((unsigned long )pool_max[i] >= size) {
    tmp___1 = dma_pool_alloc(hcd->pool[i], mem_flags, dma);
    return (tmp___1);
  }
  i ++;
  ldv_28947: ;
  if (i <= 3) {
    goto ldv_28946;
  }
  tmp___2 = dma_alloc_attrs(hcd->self.controller, size, dma, mem_flags, 0);
  return (tmp___2);
}
}
void hcd_buffer_free(struct usb_bus *bus , size_t size , void *addr , dma_addr_t dma ) 
{ struct usb_hcd *hcd ;
  struct usb_hcd *tmp ;
  int i ;

  {
  tmp = bus_to_hcd(bus);
  hcd = tmp;
  if ((unsigned long )addr == (unsigned long )((void *)0)) {
    return;
  }
  if ((unsigned long )(bus->controller)->dma_mask == (unsigned long )((u64 *)0) && ((int )(hcd->driver)->flags & 2) == 0) {
    kfree((void const   *)addr);
    return;
  }
  i = 0;
  goto ldv_28958;
  ldv_28957: ;
  if ((unsigned long )pool_max[i] >= size) {
    dma_pool_free(hcd->pool[i], addr, dma);
    return;
  }
  i ++;
  ldv_28958: ;
  if (i <= 3) {
    goto ldv_28957;
  }
  dma_free_attrs(hcd->self.controller, size, addr, dma, 0);
  return;
}
}
void ldv_mutex_lock_165(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_lock(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_166(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_lock(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_167(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
int ldv_mutex_trylock_168(struct mutex *ldv_func_arg1 ) 
{ ldv_func_ret_type___2 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
  tmp = mutex_trylock(ldv_func_arg1);
  ldv_func_res = tmp;
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
  return (tmp___0);
  return (ldv_func_res);
}
}
void ldv_mutex_unlock_169(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
extern int sprintf(char * , char const   *  , ...) ;
extern int strncmp(char const   * , char const   * , __kernel_size_t  ) ;
extern void *memchr(void const   * , int  , __kernel_size_t  ) ;
extern int strtobool(char const   * , bool * ) ;
int ldv_mutex_trylock_178(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_176(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_179(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_175(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_177(struct mutex *ldv_func_arg1 ) ;
extern unsigned int jiffies_to_msecs(unsigned long  ) ;
extern char const   power_group_name[] ;
extern int sysfs_add_file_to_group(struct kobject * , struct attribute  const  * ,
                                   char const   * ) ;
extern void sysfs_remove_file_from_group(struct kobject * , struct attribute  const  * ,
                                         char const   * ) ;
extern int sysfs_merge_group(struct kobject * , struct attribute_group  const  * ) ;
extern void sysfs_unmerge_group(struct kobject * , struct attribute_group  const  * ) ;
extern int device_create_file(struct device * , struct device_attribute  const  * ) ;
extern void device_remove_file(struct device * , struct device_attribute  const  * ) ;
extern int device_create_bin_file(struct device * , struct bin_attribute  const  * ) ;
extern void device_remove_bin_file(struct device * , struct bin_attribute  const  * ) ;
 static void device_lock___3(struct device *dev ) 
{ 

  {
  ldv_mutex_lock_177(& dev->mutex);
  return;
}
}
 static void device_unlock___3(struct device *dev ) 
{ 

  {
  ldv_mutex_unlock_179(& dev->mutex);
  return;
}
}
static ssize_t show_bNumInterfaces(struct device *dev , struct device_attribute *attr ,
                                   char *buf ) 
{ struct usb_device *udev ;
  struct usb_host_config *actconfig ;
  struct device  const  *__mptr ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  actconfig = udev->actconfig;
  if ((unsigned long )actconfig != (unsigned long )((struct usb_host_config *)0)) {
    tmp = sprintf(buf, "%2d\n", (int )actconfig->desc.bNumInterfaces);
    return ((ssize_t )tmp);
  } else {
    return (0L);
  }
}
}
static struct device_attribute dev_attr_bNumInterfaces  =    {{"bNumInterfaces", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                            {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & show_bNumInterfaces, 0};
static ssize_t show_bmAttributes(struct device *dev , struct device_attribute *attr ,
                                 char *buf ) 
{ struct usb_device *udev ;
  struct usb_host_config *actconfig ;
  struct device  const  *__mptr ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  actconfig = udev->actconfig;
  if ((unsigned long )actconfig != (unsigned long )((struct usb_host_config *)0)) {
    tmp = sprintf(buf, "%2x\n", (int )actconfig->desc.bmAttributes);
    return ((ssize_t )tmp);
  } else {
    return (0L);
  }
}
}
static struct device_attribute dev_attr_bmAttributes  =    {{"bmAttributes", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                          {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & show_bmAttributes, 0};
static ssize_t show_bMaxPower(struct device *dev , struct device_attribute *attr ,
                              char *buf ) 
{ struct usb_device *udev ;
  struct usb_host_config *actconfig ;
  struct device  const  *__mptr ;
  unsigned int tmp ;
  int tmp___0 ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  actconfig = udev->actconfig;
  if ((unsigned long )actconfig == (unsigned long )((struct usb_host_config *)0)) {
    return (0L);
  }
  tmp = usb_get_max_power(udev, actconfig);
  tmp___0 = sprintf(buf, "%dmA\n", tmp);
  return ((ssize_t )tmp___0);
}
}
static struct device_attribute dev_attr_bMaxPower  =    {{"bMaxPower", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                       {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & show_bMaxPower, 0};
static ssize_t show_configuration_string(struct device *dev , struct device_attribute *attr ,
                                         char *buf ) 
{ struct usb_device *udev ;
  struct usb_host_config *actconfig ;
  struct device  const  *__mptr ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  actconfig = udev->actconfig;
  if ((unsigned long )actconfig == (unsigned long )((struct usb_host_config *)0) || (unsigned long )actconfig->string == (unsigned long )((char *)0)) {
    return (0L);
  }
  tmp = sprintf(buf, "%s\n", actconfig->string);
  return ((ssize_t )tmp);
}
}
static struct device_attribute dev_attr_configuration  =    {{"configuration", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                           {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & show_configuration_string, 0};
static ssize_t show_bConfigurationValue(struct device *dev , struct device_attribute *attr ,
                                        char *buf ) 
{ struct usb_device *udev ;
  struct usb_host_config *actconfig ;
  struct device  const  *__mptr ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  actconfig = udev->actconfig;
  if ((unsigned long )actconfig != (unsigned long )((struct usb_host_config *)0)) {
    tmp = sprintf(buf, "%u\n", (int )actconfig->desc.bConfigurationValue);
    return ((ssize_t )tmp);
  } else {
    return (0L);
  }
}
}
static ssize_t set_bConfigurationValue(struct device *dev , struct device_attribute *attr ,
                                       char const   *buf , size_t count ) 
{ struct usb_device *udev ;
  struct device  const  *__mptr ;
  int config ;
  int value ;
  int tmp ;
  size_t tmp___0 ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  tmp = sscanf(buf, "%d", & config);
  if ((tmp != 1 || config < -1) || config > 255) {
    return (-22L);
  }
  device_lock___3(& udev->dev);
  value = usb_set_configuration(udev, config);
  device_unlock___3(& udev->dev);
  if (value < 0) {
    tmp___0 = (size_t )value;
  } else {
    tmp___0 = count;
  }
  return ((ssize_t )tmp___0);
}
}
static struct device_attribute dev_attr_bConfigurationValue  =    {{"bConfigurationValue", 420U, 1, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                          {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & show_bConfigurationValue, & set_bConfigurationValue};
static ssize_t show_product(struct device *dev , struct device_attribute *attr , char *buf ) 
{ struct usb_device *udev ;
  int retval ;
  struct device  const  *__mptr ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  device_lock___3(& udev->dev);
  retval = sprintf(buf, "%s\n", udev->product);
  device_unlock___3(& udev->dev);
  return ((ssize_t )retval);
}
}
static struct device_attribute dev_attr_product  =    {{"product", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                     {(char)0}, {(char)0}, {(char)0}}}}, & show_product,
    0};
static ssize_t show_manufacturer(struct device *dev , struct device_attribute *attr ,
                                 char *buf ) 
{ struct usb_device *udev ;
  int retval ;
  struct device  const  *__mptr ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  device_lock___3(& udev->dev);
  retval = sprintf(buf, "%s\n", udev->manufacturer);
  device_unlock___3(& udev->dev);
  return ((ssize_t )retval);
}
}
static struct device_attribute dev_attr_manufacturer  =    {{"manufacturer", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                          {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & show_manufacturer, 0};
static ssize_t show_serial(struct device *dev , struct device_attribute *attr , char *buf ) 
{ struct usb_device *udev ;
  int retval ;
  struct device  const  *__mptr ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  device_lock___3(& udev->dev);
  retval = sprintf(buf, "%s\n", udev->serial);
  device_unlock___3(& udev->dev);
  return ((ssize_t )retval);
}
}
static struct device_attribute dev_attr_serial  =    {{"serial", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                    {(char)0}, {(char)0}, {(char)0}}}}, & show_serial,
    0};
static ssize_t show_speed(struct device *dev , struct device_attribute *attr , char *buf ) 
{ struct usb_device *udev ;
  char *speed ;
  struct device  const  *__mptr ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  switch ((unsigned int )udev->speed) {
  case 1U: 
  speed = (char *)"1.5";
  goto ldv_27605;
  case 0U: ;
  case 2U: 
  speed = (char *)"12";
  goto ldv_27605;
  case 3U: 
  speed = (char *)"480";
  goto ldv_27605;
  case 4U: 
  speed = (char *)"480";
  goto ldv_27605;
  case 5U: 
  speed = (char *)"5000";
  goto ldv_27605;
  default: 
  speed = (char *)"unknown";
  }
  ldv_27605: 
  tmp = sprintf(buf, "%s\n", speed);
  return ((ssize_t )tmp);
}
}
static struct device_attribute dev_attr_speed  =    {{"speed", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                   {(char)0}, {(char)0}, {(char)0}}}}, & show_speed,
    0};
static ssize_t show_busnum(struct device *dev , struct device_attribute *attr , char *buf ) 
{ struct usb_device *udev ;
  struct device  const  *__mptr ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  tmp = sprintf(buf, "%d\n", (udev->bus)->busnum);
  return ((ssize_t )tmp);
}
}
static struct device_attribute dev_attr_busnum  =    {{"busnum", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                    {(char)0}, {(char)0}, {(char)0}}}}, & show_busnum,
    0};
static ssize_t show_devnum(struct device *dev , struct device_attribute *attr , char *buf ) 
{ struct usb_device *udev ;
  struct device  const  *__mptr ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  tmp = sprintf(buf, "%d\n", udev->devnum);
  return ((ssize_t )tmp);
}
}
static struct device_attribute dev_attr_devnum  =    {{"devnum", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                    {(char)0}, {(char)0}, {(char)0}}}}, & show_devnum,
    0};
static ssize_t show_devpath(struct device *dev , struct device_attribute *attr , char *buf ) 
{ struct usb_device *udev ;
  struct device  const  *__mptr ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  tmp = sprintf(buf, "%s\n", (char *)(& udev->devpath));
  return ((ssize_t )tmp);
}
}
static struct device_attribute dev_attr_devpath  =    {{"devpath", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                     {(char)0}, {(char)0}, {(char)0}}}}, & show_devpath,
    0};
static ssize_t show_version(struct device *dev , struct device_attribute *attr , char *buf ) 
{ struct usb_device *udev ;
  u16 bcdUSB ;
  struct device  const  *__mptr ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  bcdUSB = udev->descriptor.bcdUSB;
  tmp = sprintf(buf, "%2x.%02x\n", (int )bcdUSB >> 8, (int )bcdUSB & 255);
  return ((ssize_t )tmp);
}
}
static struct device_attribute dev_attr_version  =    {{"version", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                     {(char)0}, {(char)0}, {(char)0}}}}, & show_version,
    0};
static ssize_t show_maxchild(struct device *dev , struct device_attribute *attr ,
                             char *buf ) 
{ struct usb_device *udev ;
  struct device  const  *__mptr ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  tmp = sprintf(buf, "%d\n", udev->maxchild);
  return ((ssize_t )tmp);
}
}
static struct device_attribute dev_attr_maxchild  =    {{"maxchild", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                      {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & show_maxchild, 0};
static ssize_t show_quirks(struct device *dev , struct device_attribute *attr , char *buf ) 
{ struct usb_device *udev ;
  struct device  const  *__mptr ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  tmp = sprintf(buf, "0x%x\n", udev->quirks);
  return ((ssize_t )tmp);
}
}
static struct device_attribute dev_attr_quirks  =    {{"quirks", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                    {(char)0}, {(char)0}, {(char)0}}}}, & show_quirks,
    0};
static ssize_t show_avoid_reset_quirk(struct device *dev , struct device_attribute *attr ,
                                      char *buf ) 
{ struct usb_device *udev ;
  struct device  const  *__mptr ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  tmp = sprintf(buf, "%d\n", (udev->quirks & 16U) != 0U);
  return ((ssize_t )tmp);
}
}
static ssize_t set_avoid_reset_quirk(struct device *dev , struct device_attribute *attr ,
                                     char const   *buf , size_t count ) 
{ struct usb_device *udev ;
  struct device  const  *__mptr ;
  int val ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  tmp = sscanf(buf, "%d", & val);
  if ((tmp != 1 || val < 0) || val > 1) {
    return (-22L);
  }
  device_lock___3(& udev->dev);
  if (val != 0) {
    udev->quirks |= 16U;
  } else {
    udev->quirks &= 4294967279U;
  }
  device_unlock___3(& udev->dev);
  return ((ssize_t )count);
}
}
static struct device_attribute dev_attr_avoid_reset_quirk  =    {{"avoid_reset_quirk", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                               {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & show_avoid_reset_quirk, & set_avoid_reset_quirk};
static ssize_t show_urbnum(struct device *dev , struct device_attribute *attr , char *buf ) 
{ struct usb_device *udev ;
  struct device  const  *__mptr ;
  int tmp ;
  int tmp___0 ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  tmp = atomic_read((atomic_t const   *)(& udev->urbnum));
  tmp___0 = sprintf(buf, "%d\n", tmp);
  return ((ssize_t )tmp___0);
}
}
static struct device_attribute dev_attr_urbnum  =    {{"urbnum", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                    {(char)0}, {(char)0}, {(char)0}}}}, & show_urbnum,
    0};
static ssize_t show_removable(struct device *dev , struct device_attribute *attr ,
                              char *buf ) 
{ struct usb_device *udev ;
  char *state ;
  struct device  const  *__mptr ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  switch ((unsigned int )udev->removable) {
  case 1U: 
  state = (char *)"removable";
  goto ldv_27706;
  case 2U: 
  state = (char *)"fixed";
  goto ldv_27706;
  default: 
  state = (char *)"unknown";
  }
  ldv_27706: 
  tmp = sprintf(buf, "%s\n", state);
  return ((ssize_t )tmp);
}
}
static struct device_attribute dev_attr_removable  =    {{"removable", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                       {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & show_removable, 0};
static ssize_t show_ltm_capable(struct device *dev , struct device_attribute *attr ,
                                char *buf ) 
{ int tmp ;
  struct device  const  *__mptr ;
  bool tmp___0 ;
  int tmp___1 ;

  {
  __mptr = (struct device  const  *)dev;
  tmp___0 = usb_device_supports_ltm((struct usb_device *)__mptr + 0xffffffffffffff78UL);
  if ((int )tmp___0) {
    tmp = sprintf(buf, "%s\n", (char *)"yes");
    return ((ssize_t )tmp);
  }
  tmp___1 = sprintf(buf, "%s\n", (char *)"no");
  return ((ssize_t )tmp___1);
}
}
static struct device_attribute dev_attr_ltm_capable  =    {{"ltm_capable", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                         {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & show_ltm_capable, 0};
static ssize_t show_persist(struct device *dev , struct device_attribute *attr , char *buf ) 
{ struct usb_device *udev ;
  struct device  const  *__mptr ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  tmp = sprintf(buf, "%d\n", (int )udev->persist_enabled);
  return ((ssize_t )tmp);
}
}
static ssize_t set_persist(struct device *dev , struct device_attribute *attr , char const   *buf ,
                           size_t count ) 
{ struct usb_device *udev ;
  struct device  const  *__mptr ;
  int value ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  if ((unsigned int )udev->descriptor.bDeviceClass == 9U) {
    return (-1L);
  }
  tmp = sscanf(buf, "%d", & value);
  if (tmp != 1) {
    return (-22L);
  }
  device_lock___3(& udev->dev);
  udev->persist_enabled = value != 0;
  device_unlock___3(& udev->dev);
  return ((ssize_t )count);
}
}
static struct device_attribute dev_attr_persist  =    {{"persist", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                     {(char)0}, {(char)0}, {(char)0}}}}, & show_persist,
    & set_persist};
static int add_persist_attributes(struct device *dev ) 
{ int rc ;
  struct usb_device *udev ;
  struct device  const  *__mptr ;
  int tmp ;

  {
  rc = 0;
  tmp = is_usb_device((struct device  const  *)dev);
  if (tmp != 0) {
    __mptr = (struct device  const  *)dev;
    udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
    if ((unsigned int )udev->descriptor.bDeviceClass != 9U) {
      rc = sysfs_add_file_to_group(& dev->kobj, (struct attribute  const  *)(& dev_attr_persist.attr),
                                   (char const   *)(& power_group_name));
    }
  }
  return (rc);
}
}
static void remove_persist_attributes(struct device *dev ) 
{ 

  {
  sysfs_remove_file_from_group(& dev->kobj, (struct attribute  const  *)(& dev_attr_persist.attr),
                               (char const   *)(& power_group_name));
  return;
}
}
static ssize_t show_connected_duration(struct device *dev , struct device_attribute *attr ,
                                       char *buf ) 
{ struct usb_device *udev ;
  struct device  const  *__mptr ;
  unsigned int tmp ;
  int tmp___0 ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  tmp = jiffies_to_msecs((unsigned long )jiffies - udev->connect_time);
  tmp___0 = sprintf(buf, "%u\n", tmp);
  return ((ssize_t )tmp___0);
}
}
static struct device_attribute dev_attr_connected_duration  =    {{"connected_duration", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                                {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & show_connected_duration, 0};
static ssize_t show_active_duration(struct device *dev , struct device_attribute *attr ,
                                    char *buf ) 
{ struct usb_device *udev ;
  struct device  const  *__mptr ;
  int duration ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  int tmp___1 ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  if ((unsigned int )udev->state != 8U) {
    tmp = jiffies_to_msecs(udev->active_duration + (unsigned long )jiffies);
    duration = (int )tmp;
  } else {
    tmp___0 = jiffies_to_msecs(udev->active_duration);
    duration = (int )tmp___0;
  }
  tmp___1 = sprintf(buf, "%u\n", duration);
  return ((ssize_t )tmp___1);
}
}
static struct device_attribute dev_attr_active_duration  =    {{"active_duration", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                             {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & show_active_duration, 0};
static ssize_t show_autosuspend(struct device *dev , struct device_attribute *attr ,
                                char *buf ) 
{ int tmp ;

  {
  tmp = sprintf(buf, "%d\n", dev->power.autosuspend_delay / 1000);
  return ((ssize_t )tmp);
}
}
static ssize_t set_autosuspend(struct device *dev , struct device_attribute *attr ,
                               char const   *buf , size_t count ) 
{ int value ;
  int tmp ;

  {
  tmp = sscanf(buf, "%d", & value);
  if ((tmp != 1 || value > 2147482) || value < -2147482) {
    return (-22L);
  }
  pm_runtime_set_autosuspend_delay(dev, value * 1000);
  return ((ssize_t )count);
}
}
static struct device_attribute dev_attr_autosuspend  =    {{"autosuspend", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                         {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & show_autosuspend, & set_autosuspend};
static char const   on_string[3U]  = {      'o',      'n',      '\000'};
static char const   auto_string[5U]  = {      'a',      'u',      't',      'o', 
        '\000'};
static void warn_level(void) 
{ int level_warned ;

  {
  if (level_warned == 0) {
    level_warned = 1;
    printk("\fWARNING! power/level is deprecated; use power/control instead\n");
  }
  return;
}
}
static ssize_t show_level(struct device *dev , struct device_attribute *attr , char *buf ) 
{ struct usb_device *udev ;
  struct device  const  *__mptr ;
  char const   *p ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  p = (char const   *)(& auto_string);
  warn_level();
  if ((unsigned int )udev->state != 8U && (unsigned int )*((unsigned char *)udev + 944UL) == 0U) {
    p = (char const   *)(& on_string);
  }
  tmp = sprintf(buf, "%s\n", p);
  return ((ssize_t )tmp);
}
}
static ssize_t set_level(struct device *dev , struct device_attribute *attr , char const   *buf ,
                         size_t count ) 
{ struct usb_device *udev ;
  struct device  const  *__mptr ;
  int len ;
  char *cp ;
  int rc ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  len = (int )count;
  rc = (int )count;
  warn_level();
  tmp = memchr((void const   *)buf, 10, count);
  cp = (char *)tmp;
  if ((unsigned long )cp != (unsigned long )((char *)0)) {
    len = (int )((unsigned int )((long )cp) - (unsigned int )((long )buf));
  }
  device_lock___3(& udev->dev);
  if (len == 2) {
    tmp___1 = strncmp(buf, (char const   *)(& on_string), (__kernel_size_t )len);
    if (tmp___1 == 0) {
      usb_disable_autosuspend(udev);
    } else {
      goto _L;
    }
  } else
  _L: 
  if (len == 4) {
    tmp___0 = strncmp(buf, (char const   *)(& auto_string), (__kernel_size_t )len);
    if (tmp___0 == 0) {
      usb_enable_autosuspend(udev);
    } else {
      rc = -22;
    }
  } else {
    rc = -22;
  }
  device_unlock___3(& udev->dev);
  return ((ssize_t )rc);
}
}
static struct device_attribute dev_attr_level  =    {{"level", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                   {(char)0}, {(char)0}, {(char)0}}}}, & show_level,
    & set_level};
static ssize_t show_usb2_hardware_lpm(struct device *dev , struct device_attribute *attr ,
                                      char *buf ) 
{ struct usb_device *udev ;
  struct device  const  *__mptr ;
  char const   *p ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  if ((unsigned int )*((unsigned char *)udev + 1589UL) != 0U) {
    p = "enabled";
  } else {
    p = "disabled";
  }
  tmp = sprintf(buf, "%s\n", p);
  return ((ssize_t )tmp);
}
}
static ssize_t set_usb2_hardware_lpm(struct device *dev , struct device_attribute *attr ,
                                     char const   *buf , size_t count ) 
{ struct usb_device *udev ;
  struct device  const  *__mptr ;
  bool value ;
  int ret ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  device_lock___3(& udev->dev);
  ret = strtobool(buf, & value);
  if (ret == 0) {
    ret = usb_set_usb2_hardware_lpm(udev, (int )value);
  }
  device_unlock___3(& udev->dev);
  if (ret == 0) {
    return ((ssize_t )count);
  }
  return ((ssize_t )ret);
}
}
static struct device_attribute dev_attr_usb2_hardware_lpm  =    {{"usb2_hardware_lpm", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                               {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & show_usb2_hardware_lpm, & set_usb2_hardware_lpm};
static struct attribute *usb2_hardware_lpm_attr[2U]  = {      & dev_attr_usb2_hardware_lpm.attr,      0};
static struct attribute_group usb2_hardware_lpm_attr_group  =    {(char const   *)(& power_group_name), 0, (struct attribute **)(& usb2_hardware_lpm_attr)};
static struct attribute *power_attrs[5U]  = {      & dev_attr_autosuspend.attr,      & dev_attr_level.attr,      & dev_attr_connected_duration.attr,      & dev_attr_active_duration.attr, 
        0};
static struct attribute_group power_attr_group  =    {(char const   *)(& power_group_name),
    0, (struct attribute **)(& power_attrs)};
static int add_power_attributes(struct device *dev ) 
{ int rc ;
  struct usb_device *udev ;
  struct device  const  *__mptr ;
  int tmp ;

  {
  rc = 0;
  tmp = is_usb_device((struct device  const  *)dev);
  if (tmp != 0) {
    __mptr = (struct device  const  *)dev;
    udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
    rc = sysfs_merge_group(& dev->kobj, (struct attribute_group  const  *)(& power_attr_group));
    if ((unsigned int )*((unsigned char *)udev + 1588UL) != 0U) {
      rc = sysfs_merge_group(& dev->kobj, (struct attribute_group  const  *)(& usb2_hardware_lpm_attr_group));
    }
  }
  return (rc);
}
}
static void remove_power_attributes(struct device *dev ) 
{ 

  {
  sysfs_unmerge_group(& dev->kobj, (struct attribute_group  const  *)(& usb2_hardware_lpm_attr_group));
  sysfs_unmerge_group(& dev->kobj, (struct attribute_group  const  *)(& power_attr_group));
  return;
}
}
static ssize_t show_idVendor(struct device *dev , struct device_attribute *attr ,
                             char *buf ) 
{ struct usb_device *udev ;
  struct device  const  *__mptr ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  tmp = sprintf(buf, "%04x\n", (int )udev->descriptor.idVendor);
  return ((ssize_t )tmp);
}
}
static struct device_attribute dev_attr_idVendor  =    {{"idVendor", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                      {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & show_idVendor, 0};
static ssize_t show_idProduct(struct device *dev , struct device_attribute *attr ,
                              char *buf ) 
{ struct usb_device *udev ;
  struct device  const  *__mptr ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  tmp = sprintf(buf, "%04x\n", (int )udev->descriptor.idProduct);
  return ((ssize_t )tmp);
}
}
static struct device_attribute dev_attr_idProduct  =    {{"idProduct", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                       {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & show_idProduct, 0};
static ssize_t show_bcdDevice(struct device *dev , struct device_attribute *attr ,
                              char *buf ) 
{ struct usb_device *udev ;
  struct device  const  *__mptr ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  tmp = sprintf(buf, "%04x\n", (int )udev->descriptor.bcdDevice);
  return ((ssize_t )tmp);
}
}
static struct device_attribute dev_attr_bcdDevice  =    {{"bcdDevice", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                       {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & show_bcdDevice, 0};
static ssize_t show_bDeviceClass(struct device *dev , struct device_attribute *attr ,
                                 char *buf ) 
{ struct usb_device *udev ;
  struct device  const  *__mptr ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  tmp = sprintf(buf, "%02x\n", (int )udev->descriptor.bDeviceClass);
  return ((ssize_t )tmp);
}
}
static struct device_attribute dev_attr_bDeviceClass  =    {{"bDeviceClass", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                          {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & show_bDeviceClass, 0};
static ssize_t show_bDeviceSubClass(struct device *dev , struct device_attribute *attr ,
                                    char *buf ) 
{ struct usb_device *udev ;
  struct device  const  *__mptr ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  tmp = sprintf(buf, "%02x\n", (int )udev->descriptor.bDeviceSubClass);
  return ((ssize_t )tmp);
}
}
static struct device_attribute dev_attr_bDeviceSubClass  =    {{"bDeviceSubClass", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                             {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & show_bDeviceSubClass, 0};
static ssize_t show_bDeviceProtocol(struct device *dev , struct device_attribute *attr ,
                                    char *buf ) 
{ struct usb_device *udev ;
  struct device  const  *__mptr ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  tmp = sprintf(buf, "%02x\n", (int )udev->descriptor.bDeviceProtocol);
  return ((ssize_t )tmp);
}
}
static struct device_attribute dev_attr_bDeviceProtocol  =    {{"bDeviceProtocol", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                             {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & show_bDeviceProtocol, 0};
static ssize_t show_bNumConfigurations(struct device *dev , struct device_attribute *attr ,
                                       char *buf ) 
{ struct usb_device *udev ;
  struct device  const  *__mptr ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  tmp = sprintf(buf, "%d\n", (int )udev->descriptor.bNumConfigurations);
  return ((ssize_t )tmp);
}
}
static struct device_attribute dev_attr_bNumConfigurations  =    {{"bNumConfigurations", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                                {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & show_bNumConfigurations, 0};
static ssize_t show_bMaxPacketSize0(struct device *dev , struct device_attribute *attr ,
                                    char *buf ) 
{ struct usb_device *udev ;
  struct device  const  *__mptr ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  tmp = sprintf(buf, "%d\n", (int )udev->descriptor.bMaxPacketSize0);
  return ((ssize_t )tmp);
}
}
static struct device_attribute dev_attr_bMaxPacketSize0  =    {{"bMaxPacketSize0", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                             {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & show_bMaxPacketSize0, 0};
static ssize_t usb_dev_authorized_show(struct device *dev , struct device_attribute *attr ,
                                       char *buf ) 
{ struct usb_device *usb_dev ;
  struct device  const  *__mptr ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  usb_dev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  tmp = snprintf(buf, 4096UL, "%u\n", (int )usb_dev->authorized);
  return ((ssize_t )tmp);
}
}
static ssize_t usb_dev_authorized_store(struct device *dev , struct device_attribute *attr ,
                                        char const   *buf , size_t size ) 
{ ssize_t result ;
  struct usb_device *usb_dev ;
  struct device  const  *__mptr ;
  unsigned int val ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  ssize_t tmp___2 ;

  {
  __mptr = (struct device  const  *)dev;
  usb_dev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  tmp = sscanf(buf, "%u\n", & val);
  result = (ssize_t )tmp;
  if (result != 1L) {
    result = -22L;
  } else
  if (val == 0U) {
    tmp___0 = usb_deauthorize_device(usb_dev);
    result = (ssize_t )tmp___0;
  } else {
    tmp___1 = usb_authorize_device(usb_dev);
    result = (ssize_t )tmp___1;
  }
  if (result >= 0L) {
    tmp___2 = (ssize_t )size;
  } else {
    tmp___2 = result;
  }
  return (tmp___2);
}
}
static struct device_attribute dev_attr_authorized  =    {{"authorized", 420U, 1, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                 {(char)0}, {(char)0}, {(char)0}}}}, & usb_dev_authorized_show,
    & usb_dev_authorized_store};
static ssize_t usb_remove_store(struct device *dev , struct device_attribute *attr ,
                                char const   *buf , size_t count ) 
{ struct usb_device *udev ;
  struct device  const  *__mptr ;
  int rc ;

  {
  __mptr = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
  rc = 0;
  device_lock___3(& udev->dev);
  if ((unsigned int )udev->state != 0U) {
    usb_set_configuration(udev, -1);
    rc = usb_remove_device(udev);
  }
  if (rc == 0) {
    rc = (int )count;
  }
  device_unlock___3(& udev->dev);
  return ((ssize_t )rc);
}
}
static struct device_attribute dev_attr_remove  =    {{"remove", 128U, 1, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                             {(char)0}, {(char)0}, {(char)0}}}}, 0, & usb_remove_store};
static struct attribute *dev_attrs[27U]  = 
  {      & dev_attr_configuration.attr,      & dev_attr_bNumInterfaces.attr,      & dev_attr_bConfigurationValue.attr,      & dev_attr_bmAttributes.attr, 
        & dev_attr_bMaxPower.attr,      & dev_attr_urbnum.attr,      & dev_attr_idVendor.attr,      & dev_attr_idProduct.attr, 
        & dev_attr_bcdDevice.attr,      & dev_attr_bDeviceClass.attr,      & dev_attr_bDeviceSubClass.attr,      & dev_attr_bDeviceProtocol.attr, 
        & dev_attr_bNumConfigurations.attr,      & dev_attr_bMaxPacketSize0.attr,      & dev_attr_speed.attr,      & dev_attr_busnum.attr, 
        & dev_attr_devnum.attr,      & dev_attr_devpath.attr,      & dev_attr_version.attr,      & dev_attr_maxchild.attr, 
        & dev_attr_quirks.attr,      & dev_attr_avoid_reset_quirk.attr,      & dev_attr_authorized.attr,      & dev_attr_remove.attr, 
        & dev_attr_removable.attr,      & dev_attr_ltm_capable.attr,      0};
static struct attribute_group dev_attr_grp  =    {0, 0, (struct attribute **)(& dev_attrs)};
static struct attribute *dev_string_attrs[4U]  = {      & dev_attr_manufacturer.attr,      & dev_attr_product.attr,      & dev_attr_serial.attr,      0};
static umode_t dev_string_attrs_are_visible(struct kobject *kobj , struct attribute *a ,
                                            int n ) 
{ struct device *dev ;
  struct kobject  const  *__mptr ;
  struct usb_device *udev ;
  struct device  const  *__mptr___0 ;

  {
  __mptr = (struct kobject  const  *)kobj;
  dev = (struct device *)__mptr + 0xfffffffffffffff0UL;
  __mptr___0 = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr___0 + 0xffffffffffffff78UL;
  if ((unsigned long )a == (unsigned long )(& dev_attr_manufacturer.attr)) {
    if ((unsigned long )udev->manufacturer == (unsigned long )((char *)0)) {
      return (0U);
    }
  } else
  if ((unsigned long )a == (unsigned long )(& dev_attr_product.attr)) {
    if ((unsigned long )udev->product == (unsigned long )((char *)0)) {
      return (0U);
    }
  } else
  if ((unsigned long )a == (unsigned long )(& dev_attr_serial.attr)) {
    if ((unsigned long )udev->serial == (unsigned long )((char *)0)) {
      return (0U);
    }
  }
  return (a->mode);
}
}
static struct attribute_group dev_string_attr_grp  =    {0, & dev_string_attrs_are_visible, (struct attribute **)(& dev_string_attrs)};
struct attribute_group  const  *usb_device_groups[3U]  = {      (struct attribute_group  const  *)(& dev_attr_grp),      (struct attribute_group  const  *)(& dev_string_attr_grp),      0};
static ssize_t read_descriptors(struct file *filp ,
                                struct kobject *kobj , struct bin_attribute *attr ,
                                char *buf , loff_t off , size_t count ) 
{ struct device *dev ;
  struct kobject  const  *__mptr ;
  struct usb_device *udev ;
  struct device  const  *__mptr___0 ;
  size_t nleft ;
  size_t srclen ;
  size_t n ;
  int cfgno ;
  void *src ;
  size_t _min1 ;
  unsigned long _min2 ;
  size_t __len ;
  void *__ret ;

  {
  __mptr = (struct kobject  const  *)kobj;
  dev = (struct device *)__mptr + 0xfffffffffffffff0UL;
  __mptr___0 = (struct device  const  *)dev;
  udev = (struct usb_device *)__mptr___0 + 0xffffffffffffff78UL;
  nleft = count;
  cfgno = -1;
  goto ldv_27987;
  ldv_27986: ;
  if (cfgno < 0) {
    src = (void *)(& udev->descriptor);
    srclen = 18UL;
  } else {
    src = (void *)*(udev->rawdescriptors + (unsigned long )cfgno);
    srclen = (size_t )(udev->config + (unsigned long )cfgno)->desc.wTotalLength;
  }
  if ((unsigned long long )off < (unsigned long long )srclen) {
    _min1 = nleft;
    _min2 = srclen - (unsigned long )off;
    if (_min1 < _min2) {
      n = _min1;
    } else {
      n = _min2;
    }
    __len = n;
    __ret = __builtin_memcpy((void *)buf, (void const   *)src + (unsigned long )off,
                             __len);
    nleft -= n;
    buf += n;
    off = 0LL;
  } else {
    off = (loff_t )((unsigned long long )off - (unsigned long long )srclen);
  }
  cfgno ++;
  ldv_27987: ;
  if ((int )udev->descriptor.bNumConfigurations > cfgno && nleft != 0UL) {
    goto ldv_27986;
  }
  return ((ssize_t )(count - nleft));
}
}
static struct bin_attribute dev_bin_attr_descriptors  =    {{"descriptors", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                         {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    65553UL, 0, & read_descriptors, 0, 0};
int usb_create_sysfs_dev_files(struct usb_device *udev ) 
{ struct device *dev ;
  int retval ;

  {
  dev = & udev->dev;
  retval = device_create_bin_file(dev, (struct bin_attribute  const  *)(& dev_bin_attr_descriptors));
  if (retval != 0) {
    goto error;
  }
  retval = add_persist_attributes(dev);
  if (retval != 0) {
    goto error;
  }
  retval = add_power_attributes(dev);
  if (retval != 0) {
    goto error;
  }
  return (retval);
  error: 
  usb_remove_sysfs_dev_files(udev);
  return (retval);
}
}
void usb_remove_sysfs_dev_files(struct usb_device *udev ) 
{ struct device *dev ;

  {
  dev = & udev->dev;
  remove_power_attributes(dev);
  remove_persist_attributes(dev);
  device_remove_bin_file(dev, (struct bin_attribute  const  *)(& dev_bin_attr_descriptors));
  return;
}
}
static ssize_t show_iad_bFirstInterface(struct device *dev , struct device_attribute *attr ,
                                        char *buf ) 
{ struct usb_interface *intf ;
  struct device  const  *__mptr ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  intf = (struct usb_interface *)__mptr + 0xffffffffffffffd0UL;
  tmp = sprintf(buf, "%02x\n", (int )(intf->intf_assoc)->bFirstInterface);
  return ((ssize_t )tmp);
}
}
static struct device_attribute dev_attr_iad_bFirstInterface  =    {{"iad_bFirstInterface", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0},
                                                 {(char)0}, {(char)0}, {(char)0},
                                                 {(char)0}, {(char)0}}}}, & show_iad_bFirstInterface,
    0};
static ssize_t show_iad_bInterfaceCount(struct device *dev , struct device_attribute *attr ,
                                        char *buf ) 
{ struct usb_interface *intf ;
  struct device  const  *__mptr ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  intf = (struct usb_interface *)__mptr + 0xffffffffffffffd0UL;
  tmp = sprintf(buf, "%02d\n", (int )(intf->intf_assoc)->bInterfaceCount);
  return ((ssize_t )tmp);
}
}
static struct device_attribute dev_attr_iad_bInterfaceCount  =    {{"iad_bInterfaceCount", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0},
                                                 {(char)0}, {(char)0}, {(char)0},
                                                 {(char)0}, {(char)0}}}}, & show_iad_bInterfaceCount,
    0};
static ssize_t show_iad_bFunctionClass(struct device *dev , struct device_attribute *attr ,
                                       char *buf ) 
{ struct usb_interface *intf ;
  struct device  const  *__mptr ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  intf = (struct usb_interface *)__mptr + 0xffffffffffffffd0UL;
  tmp = sprintf(buf, "%02x\n", (int )(intf->intf_assoc)->bFunctionClass);
  return ((ssize_t )tmp);
}
}
static struct device_attribute dev_attr_iad_bFunctionClass  =    {{"iad_bFunctionClass", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                                {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & show_iad_bFunctionClass, 0};
static ssize_t show_iad_bFunctionSubClass(struct device *dev , struct device_attribute *attr ,
                                          char *buf ) 
{ struct usb_interface *intf ;
  struct device  const  *__mptr ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  intf = (struct usb_interface *)__mptr + 0xffffffffffffffd0UL;
  tmp = sprintf(buf, "%02x\n", (int )(intf->intf_assoc)->bFunctionSubClass);
  return ((ssize_t )tmp);
}
}
static struct device_attribute dev_attr_iad_bFunctionSubClass  =    {{"iad_bFunctionSubClass", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0},
                                                   {(char)0}, {(char)0}, {(char)0},
                                                   {(char)0}, {(char)0}}}}, & show_iad_bFunctionSubClass,
    0};
static ssize_t show_iad_bFunctionProtocol(struct device *dev , struct device_attribute *attr ,
                                          char *buf ) 
{ struct usb_interface *intf ;
  struct device  const  *__mptr ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  intf = (struct usb_interface *)__mptr + 0xffffffffffffffd0UL;
  tmp = sprintf(buf, "%02x\n", (int )(intf->intf_assoc)->bFunctionProtocol);
  return ((ssize_t )tmp);
}
}
static struct device_attribute dev_attr_iad_bFunctionProtocol  =    {{"iad_bFunctionProtocol", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0},
                                                   {(char)0}, {(char)0}, {(char)0},
                                                   {(char)0}, {(char)0}}}}, & show_iad_bFunctionProtocol,
    0};
static ssize_t show_bInterfaceNumber(struct device *dev , struct device_attribute *attr ,
                                     char *buf ) 
{ struct usb_interface *intf ;
  struct device  const  *__mptr ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  intf = (struct usb_interface *)__mptr + 0xffffffffffffffd0UL;
  tmp = sprintf(buf, "%02x\n", (int )(intf->cur_altsetting)->desc.bInterfaceNumber);
  return ((ssize_t )tmp);
}
}
static struct device_attribute dev_attr_bInterfaceNumber  =    {{"bInterfaceNumber", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                              {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & show_bInterfaceNumber, 0};
static ssize_t show_bAlternateSetting(struct device *dev , struct device_attribute *attr ,
                                      char *buf ) 
{ struct usb_interface *intf ;
  struct device  const  *__mptr ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  intf = (struct usb_interface *)__mptr + 0xffffffffffffffd0UL;
  tmp = sprintf(buf, "%2d\n", (int )(intf->cur_altsetting)->desc.bAlternateSetting);
  return ((ssize_t )tmp);
}
}
static struct device_attribute dev_attr_bAlternateSetting  =    {{"bAlternateSetting", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                               {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & show_bAlternateSetting, 0};
static ssize_t show_bNumEndpoints(struct device *dev , struct device_attribute *attr ,
                                  char *buf ) 
{ struct usb_interface *intf ;
  struct device  const  *__mptr ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  intf = (struct usb_interface *)__mptr + 0xffffffffffffffd0UL;
  tmp = sprintf(buf, "%02x\n", (int )(intf->cur_altsetting)->desc.bNumEndpoints);
  return ((ssize_t )tmp);
}
}
static struct device_attribute dev_attr_bNumEndpoints  =    {{"bNumEndpoints", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                           {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & show_bNumEndpoints, 0};
static ssize_t show_bInterfaceClass(struct device *dev , struct device_attribute *attr ,
                                    char *buf ) 
{ struct usb_interface *intf ;
  struct device  const  *__mptr ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  intf = (struct usb_interface *)__mptr + 0xffffffffffffffd0UL;
  tmp = sprintf(buf, "%02x\n", (int )(intf->cur_altsetting)->desc.bInterfaceClass);
  return ((ssize_t )tmp);
}
}
static struct device_attribute dev_attr_bInterfaceClass  =    {{"bInterfaceClass", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                             {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & show_bInterfaceClass, 0};
static ssize_t show_bInterfaceSubClass(struct device *dev , struct device_attribute *attr ,
                                       char *buf ) 
{ struct usb_interface *intf ;
  struct device  const  *__mptr ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  intf = (struct usb_interface *)__mptr + 0xffffffffffffffd0UL;
  tmp = sprintf(buf, "%02x\n", (int )(intf->cur_altsetting)->desc.bInterfaceSubClass);
  return ((ssize_t )tmp);
}
}
static struct device_attribute dev_attr_bInterfaceSubClass  =    {{"bInterfaceSubClass", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                                {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & show_bInterfaceSubClass, 0};
static ssize_t show_bInterfaceProtocol(struct device *dev , struct device_attribute *attr ,
                                       char *buf ) 
{ struct usb_interface *intf ;
  struct device  const  *__mptr ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  intf = (struct usb_interface *)__mptr + 0xffffffffffffffd0UL;
  tmp = sprintf(buf, "%02x\n", (int )(intf->cur_altsetting)->desc.bInterfaceProtocol);
  return ((ssize_t )tmp);
}
}
static struct device_attribute dev_attr_bInterfaceProtocol  =    {{"bInterfaceProtocol", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                                {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & show_bInterfaceProtocol, 0};
static ssize_t show_interface_string(struct device *dev , struct device_attribute *attr ,
                                     char *buf ) 
{ struct usb_interface *intf ;
  char *string ;
  struct device  const  *__mptr ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  intf = (struct usb_interface *)__mptr + 0xffffffffffffffd0UL;
  string = (intf->cur_altsetting)->string;
  __asm__  volatile   ("": : : "memory");
  if ((unsigned long )string == (unsigned long )((char *)0)) {
    return (0L);
  }
  tmp = sprintf(buf, "%s\n", string);
  return ((ssize_t )tmp);
}
}
static struct device_attribute dev_attr_interface  =    {{"interface", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                       {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & show_interface_string, 0};
static ssize_t show_modalias(struct device *dev , struct device_attribute *attr ,
                             char *buf ) 
{ struct usb_interface *intf ;
  struct usb_device *udev ;
  struct usb_host_interface *alt ;
  struct device  const  *__mptr ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  intf = (struct usb_interface *)__mptr + 0xffffffffffffffd0UL;
  udev = interface_to_usbdev(intf);
  alt = intf->cur_altsetting;
  tmp = sprintf(buf, "usb:v%04Xp%04Xd%04Xdc%02Xdsc%02Xdp%02Xic%02Xisc%02Xip%02Xin%02X\n",
                (int )udev->descriptor.idVendor, (int )udev->descriptor.idProduct,
                (int )udev->descriptor.bcdDevice, (int )udev->descriptor.bDeviceClass,
                (int )udev->descriptor.bDeviceSubClass, (int )udev->descriptor.bDeviceProtocol,
                (int )alt->desc.bInterfaceClass, (int )alt->desc.bInterfaceSubClass,
                (int )alt->desc.bInterfaceProtocol, (int )alt->desc.bInterfaceNumber);
  return ((ssize_t )tmp);
}
}
static struct device_attribute dev_attr_modalias  =    {{"modalias", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                      {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & show_modalias, 0};
static ssize_t show_supports_autosuspend(struct device *dev , struct device_attribute *attr ,
                                         char *buf ) 
{ struct usb_interface *intf ;
  struct usb_device *udev ;
  int ret ;
  struct device  const  *__mptr ;
  struct device_driver  const  *__mptr___0 ;

  {
  __mptr = (struct device  const  *)dev;
  intf = (struct usb_interface *)__mptr + 0xffffffffffffffd0UL;
  udev = interface_to_usbdev(intf);
  device_lock___3(& udev->dev);
  if ((unsigned long )intf->dev.driver == (unsigned long )((struct device_driver *)0)) {
    ret = sprintf(buf, "%u\n", 1);
  } else {
    __mptr___0 = (struct device_driver  const  *)intf->dev.driver;
    if ((unsigned int )*((unsigned char *)((struct usb_driver *)__mptr___0 + 0xffffffffffffff58UL) + 296UL) != 0U) {
      ret = sprintf(buf, "%u\n", 1);
    } else {
      ret = sprintf(buf, "%u\n", 0);
    }
  }
  device_unlock___3(& udev->dev);
  return ((ssize_t )ret);
}
}
static struct device_attribute dev_attr_supports_autosuspend  =    {{"supports_autosuspend", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0},
                                                  {(char)0}, {(char)0}, {(char)0},
                                                  {(char)0}, {(char)0}}}}, & show_supports_autosuspend,
    0};
static struct attribute *intf_attrs[9U]  = 
  {      & dev_attr_bInterfaceNumber.attr,      & dev_attr_bAlternateSetting.attr,      & dev_attr_bNumEndpoints.attr,      & dev_attr_bInterfaceClass.attr, 
        & dev_attr_bInterfaceSubClass.attr,      & dev_attr_bInterfaceProtocol.attr,      & dev_attr_modalias.attr,      & dev_attr_supports_autosuspend.attr, 
        0};
static struct attribute_group intf_attr_grp  =    {0, 0, (struct attribute **)(& intf_attrs)};
static struct attribute *intf_assoc_attrs[6U]  = {      & dev_attr_iad_bFirstInterface.attr,      & dev_attr_iad_bInterfaceCount.attr,      & dev_attr_iad_bFunctionClass.attr,      & dev_attr_iad_bFunctionSubClass.attr, 
        & dev_attr_iad_bFunctionProtocol.attr,      0};
static umode_t intf_assoc_attrs_are_visible(struct kobject *kobj , struct attribute *a ,
                                            int n ) 
{ struct device *dev ;
  struct kobject  const  *__mptr ;
  struct usb_interface *intf ;
  struct device  const  *__mptr___0 ;

  {
  __mptr = (struct kobject  const  *)kobj;
  dev = (struct device *)__mptr + 0xfffffffffffffff0UL;
  __mptr___0 = (struct device  const  *)dev;
  intf = (struct usb_interface *)__mptr___0 + 0xffffffffffffffd0UL;
  if ((unsigned long )intf->intf_assoc == (unsigned long )((struct usb_interface_assoc_descriptor *)0)) {
    return (0U);
  }
  return (a->mode);
}
}
static struct attribute_group intf_assoc_attr_grp  =    {0, & intf_assoc_attrs_are_visible, (struct attribute **)(& intf_assoc_attrs)};
struct attribute_group  const  *usb_interface_groups[3U]  = {      (struct attribute_group  const  *)(& intf_attr_grp),      (struct attribute_group  const  *)(& intf_assoc_attr_grp),      0};
void usb_create_sysfs_intf_files(struct usb_interface *intf ) 
{ struct usb_device *udev ;
  struct usb_device *tmp ;
  struct usb_host_interface *alt ;
  int tmp___0 ;
  int tmp___1 ;

  {
  tmp = interface_to_usbdev(intf);
  udev = tmp;
  alt = intf->cur_altsetting;
  if ((unsigned int )*((unsigned char *)intf + 40UL) != 0U || (unsigned int )*((unsigned char *)intf + 40UL) != 0U) {
    return;
  }
  if ((unsigned long )alt->string == (unsigned long )((char *)0) && (udev->quirks & 8U) == 0U) {
    alt->string = usb_cache_string(udev, (int )alt->desc.iInterface);
  }
  if ((unsigned long )alt->string != (unsigned long )((char *)0)) {
    tmp___0 = device_create_file(& intf->dev, (struct device_attribute  const  *)(& dev_attr_interface));
    if (tmp___0 != 0) {
      tmp___1 = 1;
    } else {
      tmp___1 = 0;
    }
  } else {
    tmp___1 = 0;
  }
  intf->sysfs_files_created = 1U;
  return;
}
}
void usb_remove_sysfs_intf_files(struct usb_interface *intf ) 
{ 

  {
  if ((unsigned int )*((unsigned char *)intf + 40UL) == 0U) {
    return;
  }
  device_remove_file(& intf->dev, (struct device_attribute  const  *)(& dev_attr_interface));
  intf->sysfs_files_created = 0U;
  return;
}
}
void ldv_main9_sequence_infinite_withcheck_stateful(void) 
{ struct kobject *var_group1 ;
  struct attribute *var_group2 ;
  int var_dev_string_attrs_are_visible_33_p2 ;
  struct file *var_group3 ;
  struct bin_attribute *var_read_descriptors_34_p2 ;
  char *var_read_descriptors_34_p3 ;
  loff_t var_read_descriptors_34_p4 ;
  size_t var_read_descriptors_34_p5 ;
  int var_intf_assoc_attrs_are_visible_40_p2 ;
  int tmp ;
  int tmp___0 ;

  {
  LDV_IN_INTERRUPT = 1;
  ldv_initialize();
  goto ldv_28188;
  ldv_28187: 
  tmp = __VERIFIER_nondet_int();
  switch (tmp) {
  case 0: 
  ldv_handler_precall();
  dev_string_attrs_are_visible(var_group1, var_group2, var_dev_string_attrs_are_visible_33_p2);
  goto ldv_28183;
  case 1: 
  ldv_handler_precall();
  read_descriptors(var_group3, var_group1, var_read_descriptors_34_p2, var_read_descriptors_34_p3,
                   var_read_descriptors_34_p4, var_read_descriptors_34_p5);
  goto ldv_28183;
  case 2: 
  ldv_handler_precall();
  intf_assoc_attrs_are_visible(var_group1, var_group2, var_intf_assoc_attrs_are_visible_40_p2);
  goto ldv_28183;
  default: ;
  goto ldv_28183;
  }
  ldv_28183: ;
  ldv_28188: 
  tmp___0 = __VERIFIER_nondet_int();
  if (tmp___0 != 0) {
    goto ldv_28187;
  }
  ldv_check_final_state();
  return;
}
}
void ldv_mutex_lock_175(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_lock(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_176(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_lock(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_177(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
int ldv_mutex_trylock_178(struct mutex *ldv_func_arg1 ) 
{ ldv_func_ret_type___2 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
  tmp = mutex_trylock(ldv_func_arg1);
  ldv_func_res = tmp;
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
  return (tmp___0);
  return (ldv_func_res);
}
}
void ldv_mutex_unlock_179(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
int ldv_mutex_trylock_188(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_186(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_189(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_185(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_187(struct mutex *ldv_func_arg1 ) ;
extern int device_register(struct device * ) ;
extern void device_unregister(struct device * ) ;
struct device_type usb_ep_device_type ;
static ssize_t show_ep_bLength(struct device *dev , struct device_attribute *attr ,
                               char *buf ) 
{ struct ep_device *ep ;
  struct device  const  *__mptr ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  ep = (struct ep_device *)__mptr + 0xfffffffffffffff0UL;
  tmp = sprintf(buf, "%02x\n", (int )(ep->desc)->bLength);
  return ((ssize_t )tmp);
}
}
static struct device_attribute dev_attr_bLength  =    {{"bLength", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                     {(char)0}, {(char)0}, {(char)0}}}}, & show_ep_bLength,
    0};
static ssize_t show_ep_bEndpointAddress(struct device *dev , struct device_attribute *attr ,
                                        char *buf ) 
{ struct ep_device *ep ;
  struct device  const  *__mptr ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  ep = (struct ep_device *)__mptr + 0xfffffffffffffff0UL;
  tmp = sprintf(buf, "%02x\n", (int )(ep->desc)->bEndpointAddress);
  return ((ssize_t )tmp);
}
}
static struct device_attribute dev_attr_bEndpointAddress  =    {{"bEndpointAddress", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                              {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & show_ep_bEndpointAddress, 0};
static ssize_t show_ep_bmAttributes(struct device *dev , struct device_attribute *attr ,
                                    char *buf ) 
{ struct ep_device *ep ;
  struct device  const  *__mptr ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  ep = (struct ep_device *)__mptr + 0xfffffffffffffff0UL;
  tmp = sprintf(buf, "%02x\n", (int )(ep->desc)->bmAttributes);
  return ((ssize_t )tmp);
}
}
static struct device_attribute dev_attr_bmAttributes___0  =    {{"bmAttributes", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                          {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & show_ep_bmAttributes, 0};
static ssize_t show_ep_bInterval(struct device *dev , struct device_attribute *attr ,
                                 char *buf ) 
{ struct ep_device *ep ;
  struct device  const  *__mptr ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  ep = (struct ep_device *)__mptr + 0xfffffffffffffff0UL;
  tmp = sprintf(buf, "%02x\n", (int )(ep->desc)->bInterval);
  return ((ssize_t )tmp);
}
}
static struct device_attribute dev_attr_bInterval  =    {{"bInterval", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                       {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & show_ep_bInterval, 0};
static ssize_t show_ep_wMaxPacketSize(struct device *dev , struct device_attribute *attr ,
                                      char *buf ) 
{ struct ep_device *ep ;
  struct device  const  *__mptr ;
  int tmp ;
  int tmp___0 ;

  {
  __mptr = (struct device  const  *)dev;
  ep = (struct ep_device *)__mptr + 0xfffffffffffffff0UL;
  tmp = usb_endpoint_maxp((struct usb_endpoint_descriptor  const  *)ep->desc);
  tmp___0 = sprintf(buf, "%04x\n", tmp & 2047);
  return ((ssize_t )tmp___0);
}
}
static struct device_attribute dev_attr_wMaxPacketSize  =    {{"wMaxPacketSize", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                            {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & show_ep_wMaxPacketSize, 0};
static ssize_t show_ep_type(struct device *dev , struct device_attribute *attr , char *buf ) 
{ struct ep_device *ep ;
  struct device  const  *__mptr ;
  char *type ;
  int tmp ;
  int tmp___0 ;

  {
  __mptr = (struct device  const  *)dev;
  ep = (struct ep_device *)__mptr + 0xfffffffffffffff0UL;
  type = (char *)"unknown";
  tmp = usb_endpoint_type((struct usb_endpoint_descriptor  const  *)ep->desc);
  switch (tmp) {
  case 0: 
  type = (char *)"Control";
  goto ldv_27700;
  case 1: 
  type = (char *)"Isoc";
  goto ldv_27700;
  case 2: 
  type = (char *)"Bulk";
  goto ldv_27700;
  case 3: 
  type = (char *)"Interrupt";
  goto ldv_27700;
  }
  ldv_27700: 
  tmp___0 = sprintf(buf, "%s\n", type);
  return ((ssize_t )tmp___0);
}
}
static struct device_attribute dev_attr_type  =    {{"type", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                  {(char)0}, {(char)0}, {(char)0}}}}, & show_ep_type,
    0};
static ssize_t show_ep_interval(struct device *dev , struct device_attribute *attr ,
                                char *buf ) 
{ struct ep_device *ep ;
  struct device  const  *__mptr ;
  char unit ;
  unsigned int interval ;
  unsigned int in ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;

  {
  __mptr = (struct device  const  *)dev;
  ep = (struct ep_device *)__mptr + 0xfffffffffffffff0UL;
  interval = 0U;
  in = (unsigned int )(ep->desc)->bEndpointAddress & 128U;
  tmp = usb_endpoint_type((struct usb_endpoint_descriptor  const  *)ep->desc);
  switch (tmp) {
  case 0: ;
  if ((unsigned int )(ep->udev)->speed == 3U) {
    interval = (unsigned int )(ep->desc)->bInterval;
  }
  goto ldv_27717;
  case 1: 
  interval = (unsigned int )(1 << ((int )(ep->desc)->bInterval + -1));
  goto ldv_27717;
  case 2: ;
  if ((unsigned int )(ep->udev)->speed == 3U && in == 0U) {
    interval = (unsigned int )(ep->desc)->bInterval;
  }
  goto ldv_27717;
  case 3: ;
  if ((unsigned int )(ep->udev)->speed == 3U) {
    interval = (unsigned int )(1 << ((int )(ep->desc)->bInterval + -1));
  } else {
    interval = (unsigned int )(ep->desc)->bInterval;
  }
  goto ldv_27717;
  }
  ldv_27717: 
  if ((unsigned int )(ep->udev)->speed == 3U) {
    tmp___1 = 125U;
  } else {
    tmp___1 = 1000U;
  }
  interval = tmp___1 * interval;
  if (interval % 1000U != 0U) {
    unit = 117;
  } else {
    unit = 109;
    interval /= 1000U;
  }
  tmp___0 = sprintf(buf, "%d%cs\n", interval, (int )unit);
  return ((ssize_t )tmp___0);
}
}
static struct device_attribute dev_attr_interval  =    {{"interval", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                      {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & show_ep_interval, 0};
static ssize_t show_ep_direction(struct device *dev , struct device_attribute *attr ,
                                 char *buf ) 
{ struct ep_device *ep ;
  struct device  const  *__mptr ;
  char *direction ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  __mptr = (struct device  const  *)dev;
  ep = (struct ep_device *)__mptr + 0xfffffffffffffff0UL;
  tmp___0 = usb_endpoint_xfer_control((struct usb_endpoint_descriptor  const  *)ep->desc);
  if (tmp___0 != 0) {
    direction = (char *)"both";
  } else {
    tmp = usb_endpoint_dir_in((struct usb_endpoint_descriptor  const  *)ep->desc);
    if (tmp != 0) {
      direction = (char *)"in";
    } else {
      direction = (char *)"out";
    }
  }
  tmp___1 = sprintf(buf, "%s\n", direction);
  return ((ssize_t )tmp___1);
}
}
static struct device_attribute dev_attr_direction  =    {{"direction", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                       {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & show_ep_direction, 0};
static struct attribute *ep_dev_attrs[9U]  = 
  {      & dev_attr_bLength.attr,      & dev_attr_bEndpointAddress.attr,      & dev_attr_bmAttributes___0.attr,      & dev_attr_bInterval.attr, 
        & dev_attr_wMaxPacketSize.attr,      & dev_attr_interval.attr,      & dev_attr_type.attr,      & dev_attr_direction.attr, 
        0};
static struct attribute_group ep_dev_attr_grp  =    {0, 0, (struct attribute **)(& ep_dev_attrs)};
static struct attribute_group  const  *ep_dev_groups[2U]  = {      (struct attribute_group  const  *)(& ep_dev_attr_grp),      0};
static void ep_device_release(struct device *dev ) 
{ struct ep_device *ep_dev ;
  struct device  const  *__mptr ;

  {
  __mptr = (struct device  const  *)dev;
  ep_dev = (struct ep_device *)__mptr + 0xfffffffffffffff0UL;
  kfree((void const   *)ep_dev);
  return;
}
}
struct device_type usb_ep_device_type  =    {"usb_endpoint", 0, 0, 0, & ep_device_release, 0};
int usb_create_ep_devs(struct device *parent , struct usb_host_endpoint *endpoint ,
                       struct usb_device *udev ) 
{ struct ep_device *ep_dev ;
  int retval ;
  void *tmp ;

  {
  tmp = kzalloc(1152UL, 208U);
  ep_dev = (struct ep_device *)tmp;
  if ((unsigned long )ep_dev == (unsigned long )((struct ep_device *)0)) {
    retval = -12;
    goto exit;
  }
  ep_dev->desc = & endpoint->desc;
  ep_dev->udev = udev;
  ep_dev->dev.groups = (struct attribute_group  const  **)(& ep_dev_groups);
  ep_dev->dev.type = (struct device_type  const  *)(& usb_ep_device_type);
  ep_dev->dev.parent = parent;
  dev_set_name(& ep_dev->dev, "ep_%02x", (int )endpoint->desc.bEndpointAddress);
  retval = device_register(& ep_dev->dev);
  if (retval != 0) {
    goto error_register;
  }
  device_enable_async_suspend(& ep_dev->dev);
  endpoint->ep_dev = ep_dev;
  return (retval);
  error_register: 
  put_device(& ep_dev->dev);
  exit: ;
  return (retval);
}
}
void usb_remove_ep_devs(struct usb_host_endpoint *endpoint ) 
{ struct ep_device *ep_dev ;

  {
  ep_dev = endpoint->ep_dev;
  if ((unsigned long )ep_dev != (unsigned long )((struct ep_device *)0)) {
    device_unregister(& ep_dev->dev);
    endpoint->ep_dev = 0;
  }
  return;
}
}
void ldv_main10_sequence_infinite_withcheck_stateful(void) 
{ struct device *var_group1 ;
  int ldv_s_usb_ep_device_type_device_type ;
  int tmp ;
  int tmp___0 ;

  {
  ldv_s_usb_ep_device_type_device_type = 0;
  LDV_IN_INTERRUPT = 1;
  ldv_initialize();
  goto ldv_27777;
  ldv_27776: 
  tmp = __VERIFIER_nondet_int();
  switch (tmp) {
  case 0: ;
  if (ldv_s_usb_ep_device_type_device_type == 0) {
    ldv_handler_precall();
    ep_device_release(var_group1);
    ldv_s_usb_ep_device_type_device_type = 0;
  }
  goto ldv_27774;
  default: ;
  goto ldv_27774;
  }
  ldv_27774: ;
  ldv_27777: 
  tmp___0 = __VERIFIER_nondet_int();
  if (tmp___0 != 0 || ldv_s_usb_ep_device_type_device_type != 0) {
    goto ldv_27776;
  }
  ldv_check_final_state();
  return;
}
}
void ldv_mutex_lock_185(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_lock(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_186(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_lock(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_187(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
int ldv_mutex_trylock_188(struct mutex *ldv_func_arg1 ) 
{ ldv_func_ret_type___2 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
  tmp = mutex_trylock(ldv_func_arg1);
  ldv_func_res = tmp;
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
  return (tmp___0);
  return (ldv_func_res);
}
}
void ldv_mutex_unlock_189(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
 static __u16 __le16_to_cpup(__le16 const   *p ) 
{ 

  {
  return ((__u16 )*p);
}
}
extern void print_hex_dump(char const   * , char const   * , int  , int  , int  ,
                           void const   * , size_t  , bool  ) ;
extern void might_fault(void) ;
 static void list_move_tail(struct list_head *list , struct list_head *head ) 
{ 

  {
  __list_del_entry(list);
  list_add_tail(list, head);
  return;
}
}
extern size_t strlcpy(char * , char const   * , size_t  ) ;
extern void __xchg_wrong_size(void) ;
 static void atomic_add(int i , atomic_t *v ) 
{ 

  {
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; addl %1,%0": "+m" (v->counter): "ir" (i));
  return;
}
}
 static void atomic_sub(int i , atomic_t *v ) 
{ 

  {
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; subl %1,%0": "+m" (v->counter): "ir" (i));
  return;
}
}
 static int atomic_dec_and_test(atomic_t *v ) 
{ unsigned char c ;

  {
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; decl %0; sete %1": "+m" (v->counter),
                       "=qm" (c): : "memory");
  return ((unsigned int )c != 0U);
}
}
int ldv_mutex_trylock_198(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_196(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_199(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_201(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_203(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_195(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_197(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_200(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_202(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_i_mutex_of_inode(struct mutex *lock ) ;
void ldv_mutex_unlock_i_mutex_of_inode(struct mutex *lock ) ;
void ldv_mutex_lock_usbfs_mutex(struct mutex *lock ) ;
void ldv_mutex_unlock_usbfs_mutex(struct mutex *lock ) ;
extern unsigned long kernel_stack ;
 static struct thread_info *current_thread_info(void) 
{ struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
  switch (8UL) {
  case 1UL: 
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6300;
  case 2UL: 
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6300;
  case 4UL: 
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6300;
  case 8UL: 
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6300;
  default: 
  __bad_percpu_size();
  }
  ldv_6300: 
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
  return (ti);
}
}
extern int default_wake_function(wait_queue_t * , unsigned int  , int  , void * ) ;
extern void add_wait_queue(wait_queue_head_t * , wait_queue_t * ) ;
extern void remove_wait_queue(wait_queue_head_t * , wait_queue_t * ) ;
extern int debug_lockdep_rcu_enabled(void) ;
extern struct timespec current_kernel_time(void) ;
 static struct pid *get_pid(struct pid *pid ) 
{ 

  {
  if ((unsigned long )pid != (unsigned long )((struct pid *)0)) {
    atomic_inc(& pid->count);
  }
  return (pid);
}
}
extern void put_pid(struct pid * ) ;
 static unsigned int imajor(struct inode  const  *inode ) 
{ 

  {
  return ((unsigned int )(inode->i_rdev >> 20));
}
}
extern int register_chrdev_region(dev_t  , unsigned int  , char const   * ) ;
extern void unregister_chrdev_region(dev_t  , unsigned int  ) ;
 static struct inode *file_inode(struct file *f ) 
{ 

  {
  return (f->f_inode);
}
}
extern unsigned long __get_free_pages(gfp_t  , unsigned int  ) ;
extern void free_pages(unsigned long  , unsigned int  ) ;
extern int __get_user_bad(void) ;
extern unsigned long _copy_to_user(void * , void const   * , unsigned int  ) ;
extern unsigned long _copy_from_user(void * , void const   * , unsigned int  ) ;
extern unsigned long copy_in_user(void * , void const   * , unsigned int  ) ;
 static unsigned long copy_from_user(void *to , void const   *from , unsigned long n ) 
{ int sz ;
  unsigned long tmp ;
  int __ret_warn_on ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
  tmp = __builtin_object_size((void const   *)to, 0);
  sz = (int )tmp;
  might_fault();
  tmp___1 = ldv__builtin_expect(sz == -1, 1L);
  if (tmp___1 != 0L) {
    n = _copy_from_user(to, from, (unsigned int )n);
  } else {
    tmp___2 = ldv__builtin_expect((unsigned long )sz >= n, 1L);
    if (tmp___2 != 0L) {
      n = _copy_from_user(to, from, (unsigned int )n);
    } else {
      __ret_warn_on = 1;
      tmp___0 = ldv__builtin_expect(__ret_warn_on != 0, 0L);
      if (tmp___0 != 0L) {
        warn_slowpath_fmt("/work/ldvuser/exper_fp/inst/current/envs/linux-3.10-rc1.tar/linux-3.10-rc1/arch/x86/include/asm/uaccess_64.h",
                          66, "Buffer overflow detected!\n");
      }
      ldv__builtin_expect(__ret_warn_on != 0, 0L);
    }
  }
  return (n);
}
}
 static int copy_to_user(void *dst , void const   *src , unsigned int size ) 
{ unsigned long tmp ;

  {
  might_fault();
  tmp = _copy_to_user(dst, src, size);
  return ((int )tmp);
}
}
 static void poll_wait(struct file *filp , wait_queue_head_t *wait_address ,
                               poll_table *p ) 
{ 

  {
  if (((unsigned long )p != (unsigned long )((poll_table *)0) && (unsigned long )p->_qproc != (unsigned long )((void (*)(struct file * ,
                                                                                                                         wait_queue_head_t * ,
                                                                                                                         struct poll_table_struct * ))0)) && (unsigned long )wait_address != (unsigned long )((wait_queue_head_t *)0)) {
    (*(p->_qproc))(filp, wait_address, p);
  }
  return;
}
}
 static void device_lock___4(struct device *dev ) 
{ 

  {
  ldv_mutex_lock_197(& dev->mutex);
  return;
}
}
 static void device_unlock___4(struct device *dev ) 
{ 

  {
  ldv_mutex_unlock_199(& dev->mutex);
  return;
}
}
extern int dev_printk(char const   * , struct device  const  * , char const   *  , ...) ;
extern void __put_cred(struct cred * ) ;
extern void __invalid_creds(struct cred  const  * , char const   * , unsigned int  ) ;
extern bool creds_are_invalid(struct cred  const  * ) ;
 static void __validate_creds(struct cred  const  *cred , char const   *file ,
                                      unsigned int line ) 
{ bool tmp ;
  long tmp___0 ;

  {
  tmp = creds_are_invalid(cred);
  tmp___0 = ldv__builtin_expect((long )tmp, 0L);
  if (tmp___0 != 0L) {
    __invalid_creds(cred, file, line);
  }
  return;
}
}
 static struct cred *get_new_cred(struct cred *cred ) 
{ 

  {
  atomic_inc(& cred->usage);
  return (cred);
}
}
 static struct cred  const  *get_cred(struct cred  const  *cred ) 
{ struct cred *nonconst_cred ;
  struct cred *tmp ;

  {
  nonconst_cred = (struct cred *)cred;
  __validate_creds(cred, "include/linux/cred.h", 228U);
  tmp = get_new_cred(nonconst_cred);
  return ((struct cred  const  *)tmp);
}
}
 static void put_cred(struct cred  const  *_cred ) 
{ struct cred *cred ;
  int tmp ;

  {
  cred = (struct cred *)_cred;
  __validate_creds((struct cred  const  *)cred, "include/linux/cred.h", 247U);
  tmp = atomic_dec_and_test(& cred->usage);
  if (tmp != 0) {
    __put_cred(cred);
  }
  return;
}
}
 static struct pid *task_pid(struct task_struct *task ) 
{ 

  {
  return (task->pids[0].pid);
}
}
 static pid_t task_pid_nr(struct task_struct *tsk ) 
{ 

  {
  return (tsk->pid);
}
}
extern int kill_pid_info_as_cred(int  , struct siginfo * , struct pid * , struct cred  const  * ,
                                 u32  ) ;
 static int usb_interface_claimed(struct usb_interface *iface ) 
{ 

  {
  return ((unsigned long )iface->dev.driver != (unsigned long )((struct device_driver *)0));
}
}
void usb_register_notify(struct notifier_block *nb ) ;
void usb_unregister_notify(struct notifier_block *nb ) ;
 static void *compat_ptr(compat_uptr_t uptr ) 
{ 

  {
  return ((void *)((unsigned long )uptr));
}
}
 static compat_uptr_t ptr_to_compat(void *uptr ) 
{ 

  {
  return ((compat_uptr_t )((long )uptr));
}
}
extern void *compat_alloc_user_space(unsigned long  ) ;
extern void cdev_init(struct cdev * , struct file_operations  const  * ) ;
extern int cdev_add(struct cdev * , dev_t  , unsigned int  ) ;
extern void cdev_del(struct cdev * ) ;
extern void security_task_getsecid(struct task_struct * , u32 * ) ;
 static void sg_assign_page(struct scatterlist *sg , struct page *page ) 
{ unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
  page_link = sg->page_link & 3UL;
  tmp = ldv__builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
  if (tmp != 0L) {
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_31006: ;
    goto ldv_31006;
  }
  tmp___0 = ldv__builtin_expect(sg->sg_magic != 2271560481UL, 0L);
  if (tmp___0 != 0L) {
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (67), "i" (12UL));
    ldv_31007: ;
    goto ldv_31007;
  }
  tmp___1 = ldv__builtin_expect((long )((int )sg->page_link) & 1L, 0L);
  if (tmp___1 != 0L) {
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (68), "i" (12UL));
    ldv_31008: ;
    goto ldv_31008;
  }
  sg->page_link = page_link | (unsigned long )page;
  return;
}
}
 static void sg_set_page(struct scatterlist *sg , struct page *page , unsigned int len ,
                                 unsigned int offset ) 
{ 

  {
  sg_assign_page(sg, page);
  sg->offset = offset;
  sg->length = len;
  return;
}
}
 static struct page *sg_page___1(struct scatterlist *sg ) 
{ long tmp ;
  long tmp___0 ;

  {
  tmp = ldv__builtin_expect(sg->sg_magic != 2271560481UL, 0L);
  if (tmp != 0L) {
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (98), "i" (12UL));
    ldv_31018: ;
    goto ldv_31018;
  }
  tmp___0 = ldv__builtin_expect((long )((int )sg->page_link) & 1L, 0L);
  if (tmp___0 != 0L) {
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (99), "i" (12UL));
    ldv_31019: ;
    goto ldv_31019;
  }
  return ((struct page *)(sg->page_link & 0xfffffffffffffffcUL));
}
}
 static void sg_set_buf(struct scatterlist *sg , void const   *buf , unsigned int buflen ) 
{ unsigned long tmp ;

  {
  tmp = __phys_addr((unsigned long )buf);
  sg_set_page(sg, 0xffffea0000000000UL + (tmp >> 12), buflen, (unsigned int )((long )buf) & 4095U);
  return;
}
}
 static void *sg_virt___1(struct scatterlist *sg ) 
{ struct page *tmp ;
  void *tmp___0 ;

  {
  tmp = sg_page___1(sg);
  tmp___0 = lowmem_page_address((struct page  const  *)tmp);
  return (tmp___0 + (unsigned long )sg->offset);
}
}
extern void sg_init_table(struct scatterlist * , unsigned int  ) ;
struct mutex usbfs_mutex ;
struct file_operations  const  usbdev_file_operations ;
struct mutex usbfs_mutex  =    {{1}, {{{{{0U}}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "usbfs_mutex.wait_lock",
                                                                     0, 0UL}}}}, {& usbfs_mutex.wait_list,
                                                                                  & usbfs_mutex.wait_list},
    0, 0, (void *)(& usbfs_mutex), {0, {0, 0}, "usbfs_mutex", 0, 0UL}};
static bool usbfs_snoop  ;
static unsigned int usbfs_memory_mb  =    16U;
static atomic_t usbfs_memory_usage  ;
static int usbfs_increase_memory_usage(unsigned int amount ) 
{ unsigned int lim ;
  int tmp ;

  {
  lim = *((unsigned int volatile   *)(& usbfs_memory_mb));
  if (lim == 0U || lim > 2047U) {
    lim = 2146483647U;
  } else {
    lim <<= 20;
  }
  atomic_add((int )amount, & usbfs_memory_usage);
  tmp = atomic_read((atomic_t const   *)(& usbfs_memory_usage));
  if ((unsigned int )tmp <= lim) {
    return (0);
  }
  atomic_sub((int )amount, & usbfs_memory_usage);
  return (-12);
}
}
static void usbfs_decrease_memory_usage(unsigned int amount ) 
{ 

  {
  atomic_sub((int )amount, & usbfs_memory_usage);
  return;
}
}
static int connected(struct dev_state *ps ) 
{ int tmp ;

  {
  tmp = list_empty((struct list_head  const  *)(& ps->list));
  return (tmp == 0 && (unsigned int )(ps->dev)->state != 0U);
}
}
static loff_t usbdev_lseek(struct file *file , loff_t offset , int orig ) 
{ loff_t ret ;
  struct inode *tmp ;
  struct inode *tmp___0 ;

  {
  tmp = file_inode(file);
  ldv_mutex_lock_200(& tmp->i_mutex);
  switch (orig) {
  case 0: 
  file->f_pos = offset;
  ret = file->f_pos;
  goto ldv_34534;
  case 1: 
  file->f_pos += offset;
  ret = file->f_pos;
  goto ldv_34534;
  case 2: ;
  default: 
  ret = -22LL;
  }
  ldv_34534: 
  tmp___0 = file_inode(file);
  ldv_mutex_unlock_201(& tmp___0->i_mutex);
  return (ret);
}
}
static ssize_t usbdev_read(struct file *file , char *buf , size_t nbytes , loff_t *ppos ) 
{ struct dev_state *ps ;
  struct usb_device *dev ;
  ssize_t ret ;
  unsigned int len ;
  loff_t pos ;
  int i ;
  int tmp ;
  struct usb_device_descriptor temp_desc ;
  size_t __len ;
  void *__ret ;
  int tmp___0 ;
  struct usb_config_descriptor *config ;
  unsigned int length ;
  unsigned int alloclen ;
  unsigned int _min1 ;
  unsigned int _min2 ;
  int tmp___1 ;
  unsigned int tmp___2 ;

  {
  ps = (struct dev_state *)file->private_data;
  dev = ps->dev;
  ret = 0L;
  pos = *ppos;
  device_lock___4(& dev->dev);
  tmp = connected(ps);
  if (tmp == 0) {
    ret = -19L;
    goto err;
  } else
  if (pos < 0LL) {
    ret = -22L;
    goto err;
  }
  if ((unsigned long long )pos <= 17ULL) {
    __len = 18UL;
    if (__len > 63UL) {
      __ret = __memcpy((void *)(& temp_desc), (void const   *)(& dev->descriptor),
                       __len);
    } else {
      __ret = __builtin_memcpy((void *)(& temp_desc), (void const   *)(& dev->descriptor),
                               __len);
    }
    len = 18U - (unsigned int )pos;
    if ((size_t )len > nbytes) {
      len = (unsigned int )nbytes;
    }
    tmp___0 = copy_to_user((void *)buf, (void const   *)(& temp_desc) + (unsigned long )pos,
                           len);
    if (tmp___0 != 0) {
      ret = -14L;
      goto err;
    }
    *ppos += (loff_t )len;
    buf += (unsigned long )len;
    nbytes -= (size_t )len;
    ret = (ssize_t )len + ret;
  }
  pos = 18LL;
  i = 0;
  goto ldv_34562;
  ldv_34561: 
  config = (struct usb_config_descriptor *)*(dev->rawdescriptors + (unsigned long )i);
  length = (unsigned int )config->wTotalLength;
  if (*ppos < (loff_t )length + pos) {
    alloclen = (unsigned int )(dev->config + (unsigned long )i)->desc.wTotalLength;
    len = ((unsigned int )pos - (unsigned int )*ppos) + length;
    if ((size_t )len > nbytes) {
      len = (unsigned int )nbytes;
    }
    if ((loff_t )alloclen > *ppos - pos) {
      alloclen = ((unsigned int )pos - (unsigned int )*ppos) + alloclen;
      _min1 = len;
      _min2 = alloclen;
      if (_min1 < _min2) {
        tmp___2 = _min1;
      } else {
        tmp___2 = _min2;
      }
      tmp___1 = copy_to_user((void *)buf, (void const   *)*(dev->rawdescriptors + (unsigned long )i) + (unsigned long )(*ppos - pos),
                             tmp___2);
      if (tmp___1 != 0) {
        ret = -14L;
        goto err;
      }
    }
    *ppos += (loff_t )len;
    buf += (unsigned long )len;
    nbytes -= (size_t )len;
    ret = (ssize_t )len + ret;
  }
  pos = (loff_t )length + pos;
  i ++;
  ldv_34562: ;
  if (nbytes != 0UL && (int )dev->descriptor.bNumConfigurations > i) {
    goto ldv_34561;
  }
  err: 
  device_unlock___4(& dev->dev);
  return (ret);
}
}
static struct async *alloc_async(unsigned int numisoframes ) 
{ struct async *as ;
  void *tmp ;

  {
  tmp = kzalloc(88UL, 208U);
  as = (struct async *)tmp;
  if ((unsigned long )as == (unsigned long )((struct async *)0)) {
    return (0);
  }
  as->urb = usb_alloc_urb((int )numisoframes, 208U);
  if ((unsigned long )as->urb == (unsigned long )((struct urb *)0)) {
    kfree((void const   *)as);
    return (0);
  }
  return (as);
}
}
static void free_async(struct async *as ) 
{ int i ;
  void *tmp ;
  struct page *tmp___0 ;

  {
  put_pid(as->pid);
  if ((unsigned long )as->cred != (unsigned long )((struct cred  const  *)0)) {
    put_cred(as->cred);
  }
  i = 0;
  goto ldv_34573;
  ldv_34572: 
  tmp___0 = sg_page___1((as->urb)->sg + (unsigned long )i);
  if ((unsigned long )tmp___0 != (unsigned long )((struct page *)0)) {
    tmp = sg_virt___1((as->urb)->sg + (unsigned long )i);
    kfree((void const   *)tmp);
  }
  i ++;
  ldv_34573: ;
  if ((as->urb)->num_sgs > i) {
    goto ldv_34572;
  }
  kfree((void const   *)(as->urb)->sg);
  kfree((void const   *)(as->urb)->transfer_buffer);
  kfree((void const   *)(as->urb)->setup_packet);
  usb_free_urb(as->urb);
  usbfs_decrease_memory_usage(as->mem_usage);
  kfree((void const   *)as);
  return;
}
}
static void async_newpending(struct async *as ) 
{ struct dev_state *ps ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
  ps = as->ps;
  tmp = spinlock_check(& ps->lock);
  flags = _raw_spin_lock_irqsave(tmp);
  list_add_tail(& as->asynclist, & ps->async_pending);
  spin_unlock_irqrestore(& ps->lock, flags);
  return;
}
}
static void async_removepending(struct async *as ) 
{ struct dev_state *ps ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
  ps = as->ps;
  tmp = spinlock_check(& ps->lock);
  flags = _raw_spin_lock_irqsave(tmp);
  list_del_init(& as->asynclist);
  spin_unlock_irqrestore(& ps->lock, flags);
  return;
}
}
static struct async *async_getcompleted(struct dev_state *ps ) 
{ unsigned long flags ;
  struct async *as ;
  raw_spinlock_t *tmp ;
  struct list_head  const  *__mptr ;
  int tmp___0 ;

  {
  as = 0;
  tmp = spinlock_check(& ps->lock);
  flags = _raw_spin_lock_irqsave(tmp);
  tmp___0 = list_empty((struct list_head  const  *)(& ps->async_completed));
  if (tmp___0 == 0) {
    __mptr = (struct list_head  const  *)ps->async_completed.next;
    as = (struct async *)__mptr;
    list_del_init(& as->asynclist);
  }
  spin_unlock_irqrestore(& ps->lock, flags);
  return (as);
}
}
static struct async *async_getpending(struct dev_state *ps , void *userurb ) 
{ struct async *as ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
  __mptr = (struct list_head  const  *)ps->async_pending.next;
  as = (struct async *)__mptr;
  goto ldv_34611;
  ldv_34610: ;
  if ((unsigned long )as->userurb == (unsigned long )userurb) {
    list_del_init(& as->asynclist);
    return (as);
  }
  __mptr___0 = (struct list_head  const  *)as->asynclist.next;
  as = (struct async *)__mptr___0;
  ldv_34611: ;
  if ((unsigned long )(& as->asynclist) != (unsigned long )(& ps->async_pending)) {
    goto ldv_34610;
  }
  return (0);
}
}
static void snoop_urb(struct usb_device *udev , void *userurb , int pipe , unsigned int length ,
                      int timeout_or_status , enum snoop_when when , unsigned char *data ,
                      unsigned int data_len ) 
{ char const   *types[4U] ;
  char const   *dirs[2U] ;
  int ep ;
  char const   *t ;
  char const   *d ;

  {
  types[0] = "isoc";
  types[1] = "int";
  types[2] = "ctrl";
  types[3] = "bulk";
  dirs[0] = "out";
  dirs[1] = "in";
  if (! usbfs_snoop) {
    return;
  }
  ep = (pipe >> 15) & 15;
  t = types[(int )((unsigned int )pipe >> 30)];
  d = dirs[(pipe & 128) != 0];
  if ((unsigned long )userurb != (unsigned long )((void *)0)) {
    if ((unsigned int )when == 0U) {
      _dev_info((struct device  const  *)(& udev->dev), "userurb %p, ep%d %s-%s, length %u\n",
                userurb, ep, t, d, length);
    } else {
      _dev_info((struct device  const  *)(& udev->dev), "userurb %p, ep%d %s-%s, actual_length %u status %d\n",
                userurb, ep, t, d, length, timeout_or_status);
    }
  } else
  if ((unsigned int )when == 0U) {
    _dev_info((struct device  const  *)(& udev->dev), "ep%d %s-%s, length %u, timeout %d\n",
              ep, t, d, length, timeout_or_status);
  } else {
    _dev_info((struct device  const  *)(& udev->dev), "ep%d %s-%s, actual_length %u, status %d\n",
              ep, t, d, length, timeout_or_status);
  }
  if ((unsigned long )data != (unsigned long )((unsigned char *)0) && data_len != 0U) {
    print_hex_dump("\017", "data: ", 0, 32, 1, (void const   *)data, (size_t )data_len,
                   1);
  }
  return;
}
}
static void snoop_urb_data(struct urb *urb , unsigned int len ) 
{ int i ;
  int size ;
  void *tmp ;
  unsigned int tmp___0 ;

  {
  if (! usbfs_snoop) {
    return;
  }
  if (urb->num_sgs == 0) {
    print_hex_dump("\017", "data: ", 0, 32, 1, (void const   *)urb->transfer_buffer,
                   (size_t )len, 1);
    return;
  }
  i = 0;
  goto ldv_34635;
  ldv_34634: 
  if (16384U < len) {
    tmp___0 = 16384U;
  } else {
    tmp___0 = len;
  }
  size = (int )tmp___0;
  tmp = sg_virt___1(urb->sg + (unsigned long )i);
  print_hex_dump("\017", "data: ", 0, 32, 1, (void const   *)tmp, (size_t )size, 1);
  len -= (unsigned int )size;
  i ++;
  ldv_34635: ;
  if (urb->num_sgs > i && len != 0U) {
    goto ldv_34634;
  }
  return;
}
}
static int copy_urb_data_to_user(u8 *userbuffer , struct urb *urb ) 
{ unsigned int i ;
  unsigned int len ;
  unsigned int size ;
  int tmp ;
  void *tmp___0 ;
  int tmp___1 ;

  {
  if (urb->number_of_packets > 0) {
    len = urb->transfer_buffer_length;
  } else {
    len = urb->actual_length;
  }
  if (urb->num_sgs == 0) {
    tmp = copy_to_user((void *)userbuffer, (void const   *)urb->transfer_buffer, len);
    if (tmp != 0) {
      return (-14);
    }
    return (0);
  }
  i = 0U;
  goto ldv_34645;
  ldv_34644: 
  if (16384U < len) {
    size = 16384U;
  } else {
    size = len;
  }
  tmp___0 = sg_virt___1(urb->sg + (unsigned long )i);
  tmp___1 = copy_to_user((void *)userbuffer, (void const   *)tmp___0, size);
  if (tmp___1 != 0) {
    return (-14);
  }
  userbuffer += (unsigned long )size;
  len -= size;
  i ++;
  ldv_34645: ;
  if ((unsigned int )urb->num_sgs > i && len != 0U) {
    goto ldv_34644;
  }
  return (0);
}
}
static void cancel_bulk_urbs(struct dev_state *ps , unsigned int bulk_addr ) 
{ struct urb *urb ;
  struct async *as ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;

  {
  __mptr = (struct list_head  const  *)ps->async_pending.next;
  as = (struct async *)__mptr;
  goto ldv_34659;
  ldv_34658: ;
  if ((unsigned int )as->bulk_addr == bulk_addr) {
    if ((unsigned int )as->bulk_status != 1U) {
      goto rescan;
    }
    as->bulk_status = 2U;
    as->bulk_addr = 0U;
  }
  __mptr___0 = (struct list_head  const  *)as->asynclist.next;
  as = (struct async *)__mptr___0;
  ldv_34659: ;
  if ((unsigned long )(& as->asynclist) != (unsigned long )(& ps->async_pending)) {
    goto ldv_34658;
  }
  ps->disabled_bulk_eps |= (u32 )(1 << (int )bulk_addr);
  rescan: 
  __mptr___1 = (struct list_head  const  *)ps->async_pending.next;
  as = (struct async *)__mptr___1;
  goto ldv_34666;
  ldv_34665: ;
  if ((unsigned int )as->bulk_status == 2U) {
    as->bulk_status = 0U;
    urb = as->urb;
    usb_get_urb(urb);
    spin_unlock(& ps->lock);
    usb_unlink_urb(urb);
    usb_free_urb(urb);
    spin_lock(& ps->lock);
    goto rescan;
  }
  __mptr___2 = (struct list_head  const  *)as->asynclist.next;
  as = (struct async *)__mptr___2;
  ldv_34666: ;
  if ((unsigned long )(& as->asynclist) != (unsigned long )(& ps->async_pending)) {
    goto ldv_34665;
  }
  return;
}
}
static void async_completed(struct urb *urb ) 
{ struct async *as ;
  struct dev_state *ps ;
  struct siginfo sinfo ;
  struct pid *pid ;
  u32 secid ;
  struct cred  const  *cred ;
  int signr ;

  {
  as = (struct async *)urb->context;
  ps = as->ps;
  pid = 0;
  secid = 0U;
  cred = 0;
  spin_lock(& ps->lock);
  list_move_tail(& as->asynclist, & ps->async_completed);
  as->status = urb->status;
  signr = (int )as->signr;
  if (signr != 0) {
    sinfo.si_signo = (int )as->signr;
    sinfo.si_errno = as->status;
    sinfo.si_code = -4;
    sinfo._sifields._sigfault._addr = as->userurb;
    pid = get_pid(as->pid);
    cred = get_cred(as->cred);
    secid = as->secid;
  }
  if ((int )usbfs_snoop) {
    _dev_info((struct device  const  *)(& (urb->dev)->dev), "urb complete\n");
  }
  snoop_urb(urb->dev, as->userurb, (int )urb->pipe, urb->actual_length, as->status,
            1, 0, 0U);
  if (((as->status < 0 && (unsigned int )as->bulk_addr != 0U) && as->status != -104) && as->status != -2) {
    cancel_bulk_urbs(ps, (unsigned int )as->bulk_addr);
  }
  spin_unlock(& ps->lock);
  if (signr != 0) {
    kill_pid_info_as_cred(sinfo.si_signo, & sinfo, pid, cred, secid);
    put_pid(pid);
    put_cred(cred);
  }
  __wake_up(& ps->wait, 3U, 1, 0);
  return;
}
}
static void destroy_async(struct dev_state *ps , struct list_head *list ) 
{ struct urb *urb ;
  struct async *as ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  struct list_head  const  *__mptr ;
  raw_spinlock_t *tmp___0 ;
  int tmp___1 ;

  {
  tmp = spinlock_check(& ps->lock);
  flags = _raw_spin_lock_irqsave(tmp);
  goto ldv_34694;
  ldv_34693: 
  __mptr = (struct list_head  const  *)list->next;
  as = (struct async *)__mptr;
  list_del_init(& as->asynclist);
  urb = as->urb;
  usb_get_urb(urb);
  spin_unlock_irqrestore(& ps->lock, flags);
  usb_kill_urb(urb);
  usb_free_urb(urb);
  tmp___0 = spinlock_check(& ps->lock);
  flags = _raw_spin_lock_irqsave(tmp___0);
  ldv_34694: 
  tmp___1 = list_empty((struct list_head  const  *)list);
  if (tmp___1 == 0) {
    goto ldv_34693;
  }
  spin_unlock_irqrestore(& ps->lock, flags);
  return;
}
}
static void destroy_async_on_interface(struct dev_state *ps , unsigned int ifnum ) 
{ struct list_head *p ;
  struct list_head *q ;
  struct list_head hitlist ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  struct list_head  const  *__mptr ;

  {
  INIT_LIST_HEAD(& hitlist);
  tmp = spinlock_check(& ps->lock);
  flags = _raw_spin_lock_irqsave(tmp);
  p = ps->async_pending.next;
  q = p->next;
  goto ldv_34710;
  ldv_34709: 
  __mptr = (struct list_head  const  *)p;
  if (((struct async *)__mptr)->ifnum == ifnum) {
    list_move_tail(p, & hitlist);
  }
  p = q;
  q = p->next;
  ldv_34710: ;
  if ((unsigned long )(& ps->async_pending) != (unsigned long )p) {
    goto ldv_34709;
  }
  spin_unlock_irqrestore(& ps->lock, flags);
  destroy_async(ps, & hitlist);
  return;
}
}
static void destroy_all_async(struct dev_state *ps ) 
{ 

  {
  destroy_async(ps, & ps->async_pending);
  return;
}
}
static int driver_probe(struct usb_interface *intf , struct usb_device_id  const  *id ) 
{ 

  {
  return (-19);
}
}
static void driver_disconnect(struct usb_interface *intf ) 
{ struct dev_state *ps ;
  void *tmp ;
  unsigned int ifnum ;
  long tmp___0 ;

  {
  tmp = usb_get_intfdata(intf);
  ps = (struct dev_state *)tmp;
  ifnum = (unsigned int )(intf->altsetting)->desc.bInterfaceNumber;
  if ((unsigned long )ps == (unsigned long )((struct dev_state *)0)) {
    return;
  }
  tmp___0 = ldv__builtin_expect(ifnum <= 63U, 1L);
  if (tmp___0 != 0L) {
    clear_bit((int )ifnum, (unsigned long volatile   *)(& ps->ifclaimed));
  } else {
    dev_warn((struct device  const  *)(& intf->dev), "interface number %u out of range\n",
             ifnum);
  }
  usb_set_intfdata(intf, 0);
  destroy_async_on_interface(ps, ifnum);
  return;
}
}
static int driver_suspend(struct usb_interface *intf , pm_message_t msg ) 
{ 

  {
  return (0);
}
}
static int driver_resume(struct usb_interface *intf ) 
{ 

  {
  return (0);
}
}
struct usb_driver usbfs_driver  = 
     {"usbfs", & driver_probe, & driver_disconnect, 0, & driver_suspend, & driver_resume,
    0, 0, 0, 0, {{{{{{0U}}, 0U, 0U, 0, {0, {0, 0}, 0, 0, 0UL}}}}, {0, 0}}, {{0, 0,
                                                                             0, 0,
                                                                             (_Bool)0,
                                                                             0, 0,
                                                                             0, 0,
                                                                             0, 0,
                                                                             0, 0,
                                                                             0, 0},
                                                                            0}, (unsigned char)0,
    (unsigned char)0, (unsigned char)0, (unsigned char)0};
static int claimintf(struct dev_state *ps , unsigned int ifnum ) 
{ struct usb_device *dev ;
  struct usb_interface *intf ;
  int err ;
  int tmp ;

  {
  dev = ps->dev;
  if (ifnum > 63U) {
    return (-22);
  }
  tmp = variable_test_bit((int )ifnum, (unsigned long const volatile   *)(& ps->ifclaimed));
  if (tmp != 0) {
    return (0);
  }
  intf = usb_ifnum_to_if((struct usb_device  const  *)dev, ifnum);
  if ((unsigned long )intf == (unsigned long )((struct usb_interface *)0)) {
    err = -2;
  } else {
    err = usb_driver_claim_interface(& usbfs_driver, intf, (void *)ps);
  }
  if (err == 0) {
    set_bit(ifnum, (unsigned long volatile   *)(& ps->ifclaimed));
  }
  return (err);
}
}
static int releaseintf(struct dev_state *ps , unsigned int ifnum ) 
{ struct usb_device *dev ;
  struct usb_interface *intf ;
  int err ;
  int tmp ;

  {
  err = -22;
  if (ifnum > 63U) {
    return (err);
  }
  dev = ps->dev;
  intf = usb_ifnum_to_if((struct usb_device  const  *)dev, ifnum);
  if ((unsigned long )intf == (unsigned long )((struct usb_interface *)0)) {
    err = -2;
  } else {
    tmp = test_and_clear_bit((int )ifnum, (unsigned long volatile   *)(& ps->ifclaimed));
    if (tmp != 0) {
      usb_driver_release_interface(& usbfs_driver, intf);
      err = 0;
    }
  }
  return (err);
}
}
static int checkintf(struct dev_state *ps , unsigned int ifnum ) 
{ int tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  pid_t tmp___2 ;
  int tmp___3 ;

  {
  if ((unsigned int )(ps->dev)->state != 7U) {
    return (-113);
  }
  if (ifnum > 63U) {
    return (-22);
  }
  tmp = variable_test_bit((int )ifnum, (unsigned long const volatile   *)(& ps->ifclaimed));
  if (tmp != 0) {
    return (0);
  }
  tmp___0 = get_current();
  tmp___1 = get_current();
  tmp___2 = task_pid_nr(tmp___1);
  dev_warn((struct device  const  *)(& (ps->dev)->dev), "usbfs: process %d (%s) did not claim interface %u before use\n",
           tmp___2, (char *)(& tmp___0->comm), ifnum);
  tmp___3 = claimintf(ps, ifnum);
  return (tmp___3);
}
}
static int findintfep(struct usb_device *dev , unsigned int ep ) 
{ unsigned int i ;
  unsigned int j ;
  unsigned int e ;
  struct usb_interface *intf ;
  struct usb_host_interface *alts ;
  struct usb_endpoint_descriptor *endpt ;

  {
  if ((ep & 4294967152U) != 0U) {
    return (-22);
  }
  if ((unsigned long )dev->actconfig == (unsigned long )((struct usb_host_config *)0)) {
    return (-3);
  }
  i = 0U;
  goto ldv_34767;
  ldv_34766: 
  intf = (dev->actconfig)->interface[i];
  j = 0U;
  goto ldv_34764;
  ldv_34763: 
  alts = intf->altsetting + (unsigned long )j;
  e = 0U;
  goto ldv_34761;
  ldv_34760: 
  endpt = & (alts->endpoint + (unsigned long )e)->desc;
  if ((unsigned int )endpt->bEndpointAddress == ep) {
    return ((int )alts->desc.bInterfaceNumber);
  }
  e ++;
  ldv_34761: ;
  if ((unsigned int )alts->desc.bNumEndpoints > e) {
    goto ldv_34760;
  }
  j ++;
  ldv_34764: ;
  if (intf->num_altsetting > j) {
    goto ldv_34763;
  }
  i ++;
  ldv_34767: ;
  if ((unsigned int )(dev->actconfig)->desc.bNumInterfaces > i) {
    goto ldv_34766;
  }
  return (-2);
}
}
static int check_ctrlrecip(struct dev_state *ps , unsigned int requesttype , unsigned int request ,
                           unsigned int index ) 
{ int ret ;
  struct usb_host_interface *alt_setting ;

  {
  ret = 0;
  if (((unsigned int )(ps->dev)->state != 4U && (unsigned int )(ps->dev)->state != 6U) && (unsigned int )(ps->dev)->state != 7U) {
    return (-113);
  }
  if ((requesttype & 96U) == 64U) {
    return (0);
  }
  if (requesttype == 161U && request == 0U) {
    alt_setting = usb_find_alt_setting((ps->dev)->actconfig, index >> 8, index & 255U);
    if ((unsigned long )alt_setting != (unsigned long )((struct usb_host_interface *)0) && (unsigned int )alt_setting->desc.bInterfaceClass == 7U) {
      index >>= 8;
    }
  }
  index &= 255U;
  switch (requesttype & 31U) {
  case 2U: ;
  if ((index & 4294967167U) == 0U) {
    return (0);
  }
  ret = findintfep(ps->dev, index);
  if (ret >= 0) {
    ret = checkintf(ps, (unsigned int )ret);
  }
  goto ldv_34778;
  case 1U: 
  ret = checkintf(ps, index);
  goto ldv_34778;
  }
  ldv_34778: ;
  return (ret);
}
}
static int match_devt(struct device *dev , void *data ) 
{ 

  {
  return (dev->devt == (dev_t )((long )data));
}
}
static struct usb_device *usbdev_lookup_by_devt(dev_t devt ) 
{ struct device *dev ;
  struct device  const  *__mptr ;

  {
  dev = bus_find_device(& usb_bus_type, 0, (void *)((unsigned long )devt), & match_devt);
  if ((unsigned long )dev == (unsigned long )((struct device *)0)) {
    return (0);
  }
  __mptr = (struct device  const  *)dev;
  return ((struct usb_device *)__mptr + 0xffffffffffffff78UL);
}
}
static int usbdev_open(struct inode *inode , struct file *file ) 
{ struct usb_device *dev ;
  struct dev_state *ps ;
  int ret ;
  void *tmp ;
  unsigned int tmp___0 ;
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct task_struct *tmp___1 ;
  struct pid *tmp___2 ;
  int tmp___3 ;
  struct task_struct *tmp___4 ;
  struct task_struct *tmp___5 ;
  struct task_struct *tmp___6 ;
  struct task_struct *tmp___7 ;
  pid_t tmp___8 ;

  {
  dev = 0;
  ret = -12;
  tmp = kmalloc(272UL, 208U);
  ps = (struct dev_state *)tmp;
  if ((unsigned long )ps == (unsigned long )((struct dev_state *)0)) {
    goto out_free_ps;
  }
  ret = -19;
  ldv_mutex_lock_202(& usbfs_mutex);
  tmp___0 = imajor((struct inode  const  *)inode);
  if (tmp___0 == 189U) {
    dev = usbdev_lookup_by_devt(inode->i_rdev);
  }
  ldv_mutex_unlock_203(& usbfs_mutex);
  if ((unsigned long )dev == (unsigned long )((struct usb_device *)0)) {
    goto out_free_ps;
  }
  device_lock___4(& dev->dev);
  if ((unsigned int )dev->state == 0U) {
    goto out_unlock_device;
  }
  ret = usb_autoresume_device(dev);
  if (ret != 0) {
    goto out_unlock_device;
  }
  ps->dev = dev;
  ps->file = file;
  spinlock_check(& ps->lock);
  __raw_spin_lock_init(& ps->lock.ldv_6014.rlock, "&(&ps->lock)->rlock", & __key);
  INIT_LIST_HEAD(& ps->list);
  INIT_LIST_HEAD(& ps->async_pending);
  INIT_LIST_HEAD(& ps->async_completed);
  __init_waitqueue_head(& ps->wait, "&ps->wait", & __key___0);
  ps->discsignr = 0U;
  tmp___1 = get_current();
  tmp___2 = task_pid(tmp___1);
  ps->disc_pid = get_pid(tmp___2);
  tmp___3 = debug_lockdep_rcu_enabled();
  tmp___4 = get_current();
  ps->cred = get_cred(tmp___4->cred);
  ps->disccontext = 0;
  ps->ifclaimed = 0UL;
  tmp___5 = get_current();
  security_task_getsecid(tmp___5, & ps->secid);
  __asm__  volatile   ("": : : "memory");
  list_add_tail(& ps->list, & dev->filelist);
  file->private_data = (void *)ps;
  device_unlock___4(& dev->dev);
  if ((int )usbfs_snoop) {
    tmp___6 = get_current();
    tmp___7 = get_current();
    tmp___8 = task_pid_nr(tmp___7);
    _dev_info((struct device  const  *)(& dev->dev), "opened by process %d: %s\n",
              tmp___8, (char *)(& tmp___6->comm));
  }
  return (ret);
  out_unlock_device: 
  device_unlock___4(& dev->dev);
  usb_put_dev(dev);
  out_free_ps: 
  kfree((void const   *)ps);
  return (ret);
}
}
static int usbdev_release(struct inode *inode , struct file *file ) 
{ struct dev_state *ps ;
  struct usb_device *dev ;
  unsigned int ifnum ;
  struct async *as ;
  int tmp ;

  {
  ps = (struct dev_state *)file->private_data;
  dev = ps->dev;
  device_lock___4(& dev->dev);
  usb_hub_release_all_ports(dev, ps);
  list_del_init(& ps->list);
  ifnum = 0U;
  goto ldv_34812;
  ldv_34811: 
  tmp = variable_test_bit((int )ifnum, (unsigned long const volatile   *)(& ps->ifclaimed));
  if (tmp != 0) {
    releaseintf(ps, ifnum);
  }
  ifnum ++;
  ldv_34812: ;
  if (ps->ifclaimed != 0UL && ifnum <= 63U) {
    goto ldv_34811;
  }
  destroy_all_async(ps);
  usb_autosuspend_device(dev);
  device_unlock___4(& dev->dev);
  usb_put_dev(dev);
  put_pid(ps->disc_pid);
  put_cred(ps->cred);
  as = async_getcompleted(ps);
  goto ldv_34815;
  ldv_34814: 
  free_async(as);
  as = async_getcompleted(ps);
  ldv_34815: ;
  if ((unsigned long )as != (unsigned long )((struct async *)0)) {
    goto ldv_34814;
  }
  kfree((void const   *)ps);
  return (0);
}
}
static int proc_control(struct dev_state *ps , void *arg ) 
{ struct usb_device *dev ;
  struct usbdevfs_ctrltransfer ctrl ;
  unsigned int tmo ;
  unsigned char *tbuf ;
  unsigned int wLength ;
  int i ;
  int pipe ;
  int ret ;
  unsigned long tmp ;
  unsigned long tmp___0 ;
  __u16 tmp___1 ;
  __u16 tmp___2 ;
  __u16 tmp___3 ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp___4 ;
  long tmp___5 ;
  unsigned int tmp___6 ;
  int _max1 ;
  int _max2 ;
  int _min1 ;
  int _min2 ;
  int _max1___0 ;
  int _max2___0 ;
  int tmp___7 ;
  unsigned long tmp___8 ;
  unsigned int tmp___9 ;
  unsigned int tmp___10 ;
  int _min1___0 ;
  int _min2___0 ;
  int _max1___1 ;
  int _max2___1 ;
  struct task_struct *tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;

  {
  dev = ps->dev;
  tmp = copy_from_user((void *)(& ctrl), (void const   *)arg, 24UL);
  if (tmp != 0UL) {
    return (-14);
  }
  ret = check_ctrlrecip(ps, (unsigned int )ctrl.bRequestType, (unsigned int )ctrl.bRequest,
                        (unsigned int )ctrl.wIndex);
  if (ret != 0) {
    return (ret);
  }
  wLength = (unsigned int )ctrl.wLength;
  if (wLength > 4096U) {
    return (-22);
  }
  ret = usbfs_increase_memory_usage(4296U);
  if (ret != 0) {
    return (ret);
  }
  tmp___0 = __get_free_pages(208U, 0U);
  tbuf = (unsigned char *)tmp___0;
  if ((unsigned long )tbuf == (unsigned long )((unsigned char *)0)) {
    ret = -12;
    goto done;
  }
  tmo = ctrl.timeout;
  if ((int )usbfs_snoop) {
    tmp___1 = __le16_to_cpup((__le16 const   *)(& ctrl.wLength));
    tmp___2 = __le16_to_cpup((__le16 const   *)(& ctrl.wIndex));
    tmp___3 = __le16_to_cpup((__le16 const   *)(& ctrl.wValue));
    _dev_info((struct device  const  *)(& dev->dev), "control urb: bRequestType=%02x bRequest=%02x wValue=%04x wIndex=%04x wLength=%04x\n",
              (int )ctrl.bRequestType, (int )ctrl.bRequest, (int )tmp___3, (int )tmp___2,
              (int )tmp___1);
  }
  if ((int )((signed char )ctrl.bRequestType) < 0) {
    if ((unsigned int )ctrl.wLength != 0U) {
      tmp___4 = current_thread_info();
      __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (ctrl.data),
                "g" ((long )ctrl.wLength), "rm" (tmp___4->addr_limit.seg));
      tmp___5 = ldv__builtin_expect(flag == 0UL, 1L);
      if (tmp___5 == 0L) {
        ret = -22;
        goto done;
      }
    }
    tmp___6 = __create_pipe(dev, 0U);
    pipe = (int )(tmp___6 | 2147483776U);
    snoop_urb(dev, 0, pipe, (unsigned int )ctrl.wLength, (int )tmo, 0, 0, 0U);
    device_unlock___4(& dev->dev);
    i = usb_control_msg(dev, (unsigned int )pipe, (int )ctrl.bRequest, (int )ctrl.bRequestType,
                        (int )ctrl.wValue, (int )ctrl.wIndex, (void *)tbuf, (int )ctrl.wLength,
                        (int )tmo);
    device_lock___4(& dev->dev);
    _max1 = i;
    _max2 = 0;
    _min1 = i;
    _min2 = 0;
    _max1___0 = i;
    _max2___0 = 0;
    if (_max1 > _max2) {
      tmp___12 = _max1;
    } else {
      tmp___12 = _max2;
    }
    if (_min1 < _min2) {
      tmp___13 = _min1;
    } else {
      tmp___13 = _min2;
    }
    if (_max1___0 > _max2___0) {
      tmp___14 = _max1___0;
    } else {
      tmp___14 = _max2___0;
    }
    snoop_urb(dev, 0, pipe, (unsigned int )tmp___14, tmp___13, 1, tbuf, (unsigned int )tmp___12);
    if (i > 0 && (unsigned int )ctrl.wLength != 0U) {
      tmp___7 = copy_to_user(ctrl.data, (void const   *)tbuf, (unsigned int )i);
      if (tmp___7 != 0) {
        ret = -14;
        goto done;
      }
    }
  } else {
    if ((unsigned int )ctrl.wLength != 0U) {
      tmp___8 = copy_from_user((void *)tbuf, (void const   *)ctrl.data, (unsigned long )ctrl.wLength);
      if (tmp___8 != 0UL) {
        ret = -14;
        goto done;
      }
    }
    tmp___9 = __create_pipe(dev, 0U);
    pipe = (int )(tmp___9 | 2147483648U);
    snoop_urb(dev, 0, pipe, (unsigned int )ctrl.wLength, (int )tmo, 0, tbuf, (unsigned int )ctrl.wLength);
    device_unlock___4(& dev->dev);
    tmp___10 = __create_pipe(dev, 0U);
    i = usb_control_msg(dev, tmp___10 | 2147483648U, (int )ctrl.bRequest, (int )ctrl.bRequestType,
                        (int )ctrl.wValue, (int )ctrl.wIndex, (void *)tbuf, (int )ctrl.wLength,
                        (int )tmo);
    device_lock___4(& dev->dev);
    _min1___0 = i;
    _min2___0 = 0;
    _max1___1 = i;
    _max2___1 = 0;
    if (_min1___0 < _min2___0) {
      tmp___15 = _min1___0;
    } else {
      tmp___15 = _min2___0;
    }
    if (_max1___1 > _max2___1) {
      tmp___16 = _max1___1;
    } else {
      tmp___16 = _max2___1;
    }
    snoop_urb(dev, 0, pipe, (unsigned int )tmp___16, tmp___15, 1, 0, 0U);
  }
  if (i < 0 && i != -32) {
    tmp___11 = get_current();
    dev_printk("\017", (struct device  const  *)(& dev->dev), "usbfs: USBDEVFS_CONTROL failed cmd %s rqt %u rq %u len %u ret %d\n",
               (char *)(& tmp___11->comm), (int )ctrl.bRequestType, (int )ctrl.bRequest,
               (int )ctrl.wLength, i);
  }
  ret = i;
  done: 
  free_pages((unsigned long )tbuf, 0U);
  usbfs_decrease_memory_usage(4296U);
  return (ret);
}
}
static int proc_bulk(struct dev_state *ps , void *arg ) 
{ struct usb_device *dev ;
  struct usbdevfs_bulktransfer bulk ;
  unsigned int tmo ;
  unsigned int len1 ;
  unsigned int pipe ;
  int len2 ;
  unsigned char *tbuf ;
  int i ;
  int ret ;
  unsigned long tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;
  __u16 tmp___2 ;
  void *tmp___3 ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp___4 ;
  long tmp___5 ;
  int tmp___6 ;
  unsigned long tmp___7 ;

  {
  dev = ps->dev;
  tmp = copy_from_user((void *)(& bulk), (void const   *)arg, 24UL);
  if (tmp != 0UL) {
    return (-14);
  }
  ret = findintfep(ps->dev, bulk.ep);
  if (ret < 0) {
    return (ret);
  }
  ret = checkintf(ps, (unsigned int )ret);
  if (ret != 0) {
    return (ret);
  }
  if ((bulk.ep & 128U) != 0U) {
    tmp___0 = __create_pipe(dev, bulk.ep & 127U);
    pipe = tmp___0 | 3221225600U;
  } else {
    tmp___1 = __create_pipe(dev, bulk.ep & 127U);
    pipe = tmp___1 | 3221225472U;
  }
  tmp___2 = usb_maxpacket(dev, (int )pipe, (bulk.ep & 128U) == 0U);
  if ((unsigned int )tmp___2 == 0U) {
    return (-22);
  }
  len1 = bulk.len;
  if (len1 > 2146483646U) {
    return (-22);
  }
  ret = usbfs_increase_memory_usage(len1 + 192U);
  if (ret != 0) {
    return (ret);
  }
  tmp___3 = kmalloc((size_t )len1, 208U);
  tbuf = (unsigned char *)tmp___3;
  if ((unsigned long )tbuf == (unsigned long )((unsigned char *)0)) {
    ret = -12;
    goto done;
  }
  tmo = bulk.timeout;
  if ((bulk.ep & 128U) != 0U) {
    if (len1 != 0U) {
      tmp___4 = current_thread_info();
      __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (bulk.data),
                "g" ((long )len1), "rm" (tmp___4->addr_limit.seg));
      tmp___5 = ldv__builtin_expect(flag == 0UL, 1L);
      if (tmp___5 == 0L) {
        ret = -22;
        goto done;
      }
    }
    snoop_urb(dev, 0, (int )pipe, len1, (int )tmo, 0, 0, 0U);
    device_unlock___4(& dev->dev);
    i = usb_bulk_msg(dev, pipe, (void *)tbuf, (int )len1, & len2, (int )tmo);
    device_lock___4(& dev->dev);
    snoop_urb(dev, 0, (int )pipe, (unsigned int )len2, i, 1, tbuf, (unsigned int )len2);
    if (i == 0 && len2 != 0) {
      tmp___6 = copy_to_user(bulk.data, (void const   *)tbuf, (unsigned int )len2);
      if (tmp___6 != 0) {
        ret = -14;
        goto done;
      }
    }
  } else {
    if (len1 != 0U) {
      tmp___7 = copy_from_user((void *)tbuf, (void const   *)bulk.data, (unsigned long )len1);
      if (tmp___7 != 0UL) {
        ret = -14;
        goto done;
      }
    }
    snoop_urb(dev, 0, (int )pipe, len1, (int )tmo, 0, tbuf, len1);
    device_unlock___4(& dev->dev);
    i = usb_bulk_msg(dev, pipe, (void *)tbuf, (int )len1, & len2, (int )tmo);
    device_lock___4(& dev->dev);
    snoop_urb(dev, 0, (int )pipe, (unsigned int )len2, i, 1, 0, 0U);
  }
  if (i < 0) {
    ret = i;
  } else {
    ret = len2;
  }
  done: 
  kfree((void const   *)tbuf);
  usbfs_decrease_memory_usage(len1 + 192U);
  return (ret);
}
}
static int proc_resetep(struct dev_state *ps , void *arg ) 
{ unsigned int ep ;
  int ret ;
  int __ret_gu ;
  register unsigned long __val_gu ;

  {
  might_fault();
  __asm__  volatile   ("call __get_user_%P3": "=a" (__ret_gu), "=r" (__val_gu): "0" ((unsigned int *)arg),
                       "i" (4UL));
  ep = (unsigned int )__val_gu;
  if (__ret_gu != 0) {
    return (-14);
  }
  ret = findintfep(ps->dev, ep);
  if (ret < 0) {
    return (ret);
  }
  ret = checkintf(ps, (unsigned int )ret);
  if (ret != 0) {
    return (ret);
  }
  usb_reset_endpoint(ps->dev, ep);
  return (0);
}
}
static int proc_clearhalt(struct dev_state *ps , void *arg ) 
{ unsigned int ep ;
  int pipe ;
  int ret ;
  int __ret_gu ;
  register unsigned long __val_gu ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  int tmp___1 ;

  {
  might_fault();
  __asm__  volatile   ("call __get_user_%P3": "=a" (__ret_gu), "=r" (__val_gu): "0" ((unsigned int *)arg),
                       "i" (4UL));
  ep = (unsigned int )__val_gu;
  if (__ret_gu != 0) {
    return (-14);
  }
  ret = findintfep(ps->dev, ep);
  if (ret < 0) {
    return (ret);
  }
  ret = checkintf(ps, (unsigned int )ret);
  if (ret != 0) {
    return (ret);
  }
  if ((ep & 128U) != 0U) {
    tmp = __create_pipe(ps->dev, ep & 127U);
    pipe = (int )(tmp | 3221225600U);
  } else {
    tmp___0 = __create_pipe(ps->dev, ep & 127U);
    pipe = (int )(tmp___0 | 3221225472U);
  }
  tmp___1 = usb_clear_halt(ps->dev, pipe);
  return (tmp___1);
}
}
static int proc_getdriver(struct dev_state *ps , void *arg ) 
{ struct usbdevfs_getdriver gd ;
  struct usb_interface *intf ;
  int ret ;
  unsigned long tmp ;
  int tmp___0 ;

  {
  tmp = copy_from_user((void *)(& gd), (void const   *)arg, 260UL);
  if (tmp != 0UL) {
    return (-14);
  }
  intf = usb_ifnum_to_if((struct usb_device  const  *)ps->dev, gd.interface);
  if ((unsigned long )intf == (unsigned long )((struct usb_interface *)0) || (unsigned long )intf->dev.driver == (unsigned long )((struct device_driver *)0)) {
    ret = -61;
  } else {
    strlcpy((char *)(& gd.driver), (intf->dev.driver)->name, 256UL);
    tmp___0 = copy_to_user(arg, (void const   *)(& gd), 260U);
    if (tmp___0 != 0) {
      ret = -14;
    } else {
      ret = 0;
    }
  }
  return (ret);
}
}
static int proc_connectinfo(struct dev_state *ps , void *arg ) 
{ struct usbdevfs_connectinfo ci ;
  int tmp ;

  {
  ci.devnum = (unsigned int )(ps->dev)->devnum;
  ci.slow = (unsigned int )(ps->dev)->speed == 1U;
  tmp = copy_to_user(arg, (void const   *)(& ci), 8U);
  if (tmp != 0) {
    return (-14);
  }
  return (0);
}
}
static int proc_resetdevice(struct dev_state *ps ) 
{ int tmp ;

  {
  tmp = usb_reset_device(ps->dev);
  return (tmp);
}
}
static int proc_setintf(struct dev_state *ps , void *arg ) 
{ struct usbdevfs_setinterface setintf ;
  int ret ;
  unsigned long tmp ;
  int tmp___0 ;

  {
  tmp = copy_from_user((void *)(& setintf), (void const   *)arg, 8UL);
  if (tmp != 0UL) {
    return (-14);
  }
  ret = checkintf(ps, setintf.interface);
  if (ret != 0) {
    return (ret);
  }
  tmp___0 = usb_set_interface(ps->dev, (int )setintf.interface, (int )setintf.altsetting);
  return (tmp___0);
}
}
static int proc_setconfig(struct dev_state *ps , void *arg ) 
{ int u ;
  int status ;
  struct usb_host_config *actconfig ;
  int __ret_gu ;
  register unsigned long __val_gu ;
  int i ;
  struct task_struct *tmp ;
  int tmp___0 ;

  {
  status = 0;
  might_fault();
  __asm__  volatile   ("call __get_user_%P3": "=a" (__ret_gu), "=r" (__val_gu): "0" ((int *)arg),
                       "i" (4UL));
  u = (int )__val_gu;
  if (__ret_gu != 0) {
    return (-14);
  }
  actconfig = (ps->dev)->actconfig;
  if ((unsigned long )actconfig != (unsigned long )((struct usb_host_config *)0)) {
    i = 0;
    goto ldv_34918;
    ldv_34917: 
    tmp___0 = usb_interface_claimed(actconfig->interface[i]);
    if (tmp___0 != 0) {
      tmp = get_current();
      dev_warn((struct device  const  *)(& (ps->dev)->dev), "usbfs: interface %d claimed by %s while \'%s\' sets config #%d\n",
               (int )((actconfig->interface[i])->cur_altsetting)->desc.bInterfaceNumber,
               ((actconfig->interface[i])->dev.driver)->name, (char *)(& tmp->comm),
               u);
      status = -16;
      goto ldv_34916;
    }
    i ++;
    ldv_34918: ;
    if ((int )actconfig->desc.bNumInterfaces > i) {
      goto ldv_34917;
    }
    ldv_34916: ;
  }
  if (status == 0) {
    if ((unsigned long )actconfig != (unsigned long )((struct usb_host_config *)0) && (int )actconfig->desc.bConfigurationValue == u) {
      status = usb_reset_configuration(ps->dev);
    } else {
      status = usb_set_configuration(ps->dev, u);
    }
  }
  return (status);
}
}
static int proc_do_submiturb(struct dev_state *ps , struct usbdevfs_urb *uurb , struct usbdevfs_iso_packet_desc *iso_frame_desc ,
                             void *arg ) 
{ struct usbdevfs_iso_packet_desc *isopkt ;
  struct usb_host_endpoint *ep ;
  struct async *as ;
  struct usb_ctrlrequest *dr ;
  unsigned int u ;
  unsigned int totlen ;
  unsigned int isofrmlen ;
  int i ;
  int ret ;
  int is_in ;
  int num_sgs ;
  int ifnum ;
  void *buf ;
  int tmp ;
  void *tmp___0 ;
  unsigned long tmp___1 ;
  __u16 tmp___2 ;
  __u16 tmp___3 ;
  __u16 tmp___4 ;
  __u16 tmp___5 ;
  __u16 tmp___6 ;
  __u16 tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  void *tmp___11 ;
  unsigned long tmp___12 ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp___13 ;
  long tmp___14 ;
  void *tmp___15 ;
  unsigned long tmp___16 ;
  unsigned long tmp___17 ;
  unsigned int tmp___18 ;
  int _min1 ;
  int _min2 ;
  struct task_struct *tmp___19 ;
  struct pid *tmp___20 ;
  int tmp___21 ;
  struct task_struct *tmp___22 ;
  struct task_struct *tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  int tmp___26 ;

  {
  isopkt = 0;
  as = 0;
  dr = 0;
  num_sgs = 0;
  ifnum = -1;
  if ((uurb->flags & 4294967064U) != 0U) {
    return (-22);
  }
  if (uurb->buffer_length > 0 && (unsigned long )uurb->buffer == (unsigned long )((void *)0)) {
    return (-22);
  }
  if ((unsigned int )uurb->type != 2U || ((int )uurb->endpoint & -129) != 0) {
    ifnum = findintfep(ps->dev, (unsigned int )uurb->endpoint);
    if (ifnum < 0) {
      return (ifnum);
    }
    ret = checkintf(ps, (unsigned int )ifnum);
    if (ret != 0) {
      return (ret);
    }
  }
  if ((int )((signed char )uurb->endpoint) < 0) {
    is_in = 1;
    ep = (ps->dev)->ep_in[(int )uurb->endpoint & 15];
  } else {
    is_in = 0;
    ep = (ps->dev)->ep_out[(int )uurb->endpoint & 15];
  }
  if ((unsigned long )ep == (unsigned long )((struct usb_host_endpoint *)0)) {
    return (-2);
  }
  u = 0U;
  switch ((int )uurb->type) {
  case 2: 
  tmp = usb_endpoint_xfer_control((struct usb_endpoint_descriptor  const  *)(& ep->desc));
  if (tmp == 0) {
    return (-22);
  }
  if (uurb->buffer_length <= 7) {
    return (-22);
  }
  tmp___0 = kmalloc(8UL, 208U);
  dr = (struct usb_ctrlrequest *)tmp___0;
  if ((unsigned long )dr == (unsigned long )((struct usb_ctrlrequest *)0)) {
    return (-12);
  }
  tmp___1 = copy_from_user((void *)dr, (void const   *)uurb->buffer, 8UL);
  if (tmp___1 != 0UL) {
    ret = -14;
    goto error;
  }
  tmp___2 = __le16_to_cpup((__le16 const   *)(& dr->wLength));
  if (uurb->buffer_length < (int )tmp___2 + 8) {
    ret = -22;
    goto error;
  }
  tmp___3 = __le16_to_cpup((__le16 const   *)(& dr->wIndex));
  ret = check_ctrlrecip(ps, (unsigned int )dr->bRequestType, (unsigned int )dr->bRequest,
                        (unsigned int )tmp___3);
  if (ret != 0) {
    goto error;
  }
  uurb->number_of_packets = 0;
  tmp___4 = __le16_to_cpup((__le16 const   *)(& dr->wLength));
  uurb->buffer_length = (int )tmp___4;
  uurb->buffer += 8UL;
  if ((int )((signed char )dr->bRequestType) < 0 && uurb->buffer_length != 0) {
    is_in = 1;
    uurb->endpoint = (unsigned int )uurb->endpoint | 128U;
  } else {
    is_in = 0;
    uurb->endpoint = (unsigned int )uurb->endpoint & 127U;
  }
  if ((int )usbfs_snoop) {
    tmp___5 = __le16_to_cpup((__le16 const   *)(& dr->wLength));
    tmp___6 = __le16_to_cpup((__le16 const   *)(& dr->wIndex));
    tmp___7 = __le16_to_cpup((__le16 const   *)(& dr->wValue));
    _dev_info((struct device  const  *)(& (ps->dev)->dev), "control urb: bRequestType=%02x bRequest=%02x wValue=%04x wIndex=%04x wLength=%04x\n",
              (int )dr->bRequestType, (int )dr->bRequest, (int )tmp___7, (int )tmp___6,
              (int )tmp___5);
  }
  u = 8U;
  goto ldv_34940;
  case 3: 
  tmp___8 = usb_endpoint_type((struct usb_endpoint_descriptor  const  *)(& ep->desc));
  switch (tmp___8) {
  case 0: ;
  case 1: ;
  return (-22);
  case 3: 
  uurb->type = 1U;
  goto interrupt_urb;
  }
  uurb->number_of_packets = 0;
  num_sgs = (uurb->buffer_length + 16383) / 16384;
  if (num_sgs == 1 || (unsigned int )num_sgs > ((ps->dev)->bus)->sg_tablesize) {
    num_sgs = 0;
  }
  goto ldv_34940;
  case 1: 
  tmp___9 = usb_endpoint_xfer_int((struct usb_endpoint_descriptor  const  *)(& ep->desc));
  if (tmp___9 == 0) {
    return (-22);
  }
  interrupt_urb: 
  uurb->number_of_packets = 0;
  goto ldv_34940;
  case 0: ;
  if (uurb->number_of_packets <= 0 || uurb->number_of_packets > 128) {
    return (-22);
  }
  tmp___10 = usb_endpoint_xfer_isoc((struct usb_endpoint_descriptor  const  *)(& ep->desc));
  if (tmp___10 == 0) {
    return (-22);
  }
  isofrmlen = (unsigned int )((unsigned long )uurb->number_of_packets) * 12U;
  tmp___11 = kmalloc((size_t )isofrmlen, 208U);
  isopkt = (struct usbdevfs_iso_packet_desc *)tmp___11;
  if ((unsigned long )isopkt == (unsigned long )((struct usbdevfs_iso_packet_desc *)0)) {
    return (-12);
  }
  tmp___12 = copy_from_user((void *)isopkt, (void const   *)iso_frame_desc, (unsigned long )isofrmlen);
  if (tmp___12 != 0UL) {
    ret = -14;
    goto error;
  }
  u = 0U;
  totlen = u;
  goto ldv_34949;
  ldv_34948: ;
  if ((isopkt + (unsigned long )u)->length > 8192U) {
    ret = -22;
    goto error;
  }
  totlen = (isopkt + (unsigned long )u)->length + totlen;
  u ++;
  ldv_34949: ;
  if ((unsigned int )uurb->number_of_packets > u) {
    goto ldv_34948;
  }
  u *= 16U;
  uurb->buffer_length = (int )totlen;
  goto ldv_34940;
  default: ;
  return (-22);
  }
  ldv_34940: ;
  if ((unsigned int )uurb->buffer_length > 2146483646U) {
    ret = -22;
    goto error;
  }
  if (uurb->buffer_length > 0) {
    tmp___13 = current_thread_info();
    __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (uurb->buffer),
              "g" ((long )uurb->buffer_length), "rm" (tmp___13->addr_limit.seg));
    tmp___14 = ldv__builtin_expect(flag == 0UL, 1L);
    if (tmp___14 == 0L) {
      ret = -14;
      goto error;
    }
  }
  as = alloc_async((unsigned int )uurb->number_of_packets);
  if ((unsigned long )as == (unsigned long )((struct async *)0)) {
    ret = -12;
    goto error;
  }
  u = (((unsigned int )uurb->buffer_length + (unsigned int )((unsigned long )num_sgs) * 40U) + u) + 280U;
  ret = usbfs_increase_memory_usage(u);
  if (ret != 0) {
    goto error;
  }
  as->mem_usage = u;
  if (num_sgs != 0) {
    tmp___15 = kmalloc((unsigned long )num_sgs * 40UL, 208U);
    (as->urb)->sg = (struct scatterlist *)tmp___15;
    if ((unsigned long )(as->urb)->sg == (unsigned long )((struct scatterlist *)0)) {
      ret = -12;
      goto error;
    }
    (as->urb)->num_sgs = num_sgs;
    sg_init_table((as->urb)->sg, (unsigned int )(as->urb)->num_sgs);
    totlen = (unsigned int )uurb->buffer_length;
    i = 0;
    goto ldv_34956;
    ldv_34955: 
    if (16384U < totlen) {
      u = 16384U;
    } else {
      u = totlen;
    }
    buf = kmalloc((size_t )u, 208U);
    if ((unsigned long )buf == (unsigned long )((void *)0)) {
      ret = -12;
      goto error;
    }
    sg_set_buf((as->urb)->sg + (unsigned long )i, (void const   *)buf, u);
    if (is_in == 0) {
      tmp___16 = copy_from_user(buf, (void const   *)uurb->buffer, (unsigned long )u);
      if (tmp___16 != 0UL) {
        ret = -14;
        goto error;
      }
      uurb->buffer += (unsigned long )u;
    }
    totlen -= u;
    i ++;
    ldv_34956: ;
    if ((as->urb)->num_sgs > i) {
      goto ldv_34955;
    }
  } else
  if (uurb->buffer_length > 0) {
    (as->urb)->transfer_buffer = kmalloc((size_t )uurb->buffer_length, 208U);
    if ((unsigned long )(as->urb)->transfer_buffer == (unsigned long )((void *)0)) {
      ret = -12;
      goto error;
    }
    if (is_in == 0) {
      tmp___17 = copy_from_user((as->urb)->transfer_buffer, (void const   *)uurb->buffer,
                                (unsigned long )uurb->buffer_length);
      if (tmp___17 != 0UL) {
        ret = -14;
        goto error;
      }
    } else
    if ((unsigned int )uurb->type == 0U) {
      memset((as->urb)->transfer_buffer, 0, (size_t )uurb->buffer_length);
    }
  }
  (as->urb)->dev = ps->dev;
  tmp___18 = __create_pipe(ps->dev, (unsigned int )uurb->endpoint & 15U);
  (as->urb)->pipe = ((unsigned int )((int )uurb->type << 30) | tmp___18) | ((unsigned int )uurb->endpoint & 128U);
  if (is_in != 0) {
    u = 512U;
  } else {
    u = 0U;
  }
  if ((uurb->flags & 2U) != 0U) {
    u |= 2U;
  }
  if ((int )uurb->flags & 1) {
    u |= 1U;
  }
  if ((uurb->flags & 32U) != 0U) {
    u |= 32U;
  }
  if ((uurb->flags & 64U) != 0U) {
    u |= 64U;
  }
  if ((uurb->flags & 128U) != 0U) {
    u |= 128U;
  }
  (as->urb)->transfer_flags = u;
  (as->urb)->transfer_buffer_length = (u32 )uurb->buffer_length;
  (as->urb)->setup_packet = (unsigned char *)dr;
  dr = 0;
  (as->urb)->start_frame = uurb->start_frame;
  (as->urb)->number_of_packets = uurb->number_of_packets;
  if ((unsigned int )uurb->type == 0U || (unsigned int )(ps->dev)->speed == 3U) {
    _min1 = 15;
    _min2 = (int )ep->desc.bInterval + -1;
    if (_min1 < _min2) {
      tmp___26 = _min1;
    } else {
      tmp___26 = _min2;
    }
    (as->urb)->interval = 1 << tmp___26;
  } else {
    (as->urb)->interval = (int )ep->desc.bInterval;
  }
  (as->urb)->context = (void *)as;
  (as->urb)->complete = & async_completed;
  u = 0U;
  totlen = u;
  goto ldv_34962;
  ldv_34961: 
  (as->urb)->iso_frame_desc[u].offset = totlen;
  (as->urb)->iso_frame_desc[u].length = (isopkt + (unsigned long )u)->length;
  totlen = (isopkt + (unsigned long )u)->length + totlen;
  u ++;
  ldv_34962: ;
  if ((unsigned int )uurb->number_of_packets > u) {
    goto ldv_34961;
  }
  kfree((void const   *)isopkt);
  isopkt = 0;
  as->ps = ps;
  as->userurb = arg;
  if (is_in != 0 && uurb->buffer_length > 0) {
    as->userbuffer = uurb->buffer;
  } else {
    as->userbuffer = 0;
  }
  as->signr = uurb->signr;
  as->ifnum = (unsigned int )ifnum;
  tmp___19 = get_current();
  tmp___20 = task_pid(tmp___19);
  as->pid = get_pid(tmp___20);
  tmp___21 = debug_lockdep_rcu_enabled();
  tmp___22 = get_current();
  as->cred = get_cred(tmp___22->cred);
  tmp___23 = get_current();
  security_task_getsecid(tmp___23, & as->secid);
  snoop_urb(ps->dev, as->userurb, (int )(as->urb)->pipe, (as->urb)->transfer_buffer_length,
            0, 0, 0, 0U);
  if (is_in == 0) {
    snoop_urb_data(as->urb, (as->urb)->transfer_buffer_length);
  }
  async_newpending(as);
  tmp___25 = usb_endpoint_xfer_bulk((struct usb_endpoint_descriptor  const  *)(& ep->desc));
  if (tmp___25 != 0) {
    spin_lock_irq(& ps->lock);
    tmp___24 = usb_endpoint_num((struct usb_endpoint_descriptor  const  *)(& ep->desc));
    as->bulk_addr = (u8 )((int )((signed char )tmp___24) | (int )((signed char )(((int )ep->desc.bEndpointAddress & 128) >> 3)));
    if ((uurb->flags & 4U) != 0U) {
      as->bulk_status = 1U;
    } else {
      ps->disabled_bulk_eps &= (u32 )(~ (1 << (int )as->bulk_addr));
    }
    if ((ps->disabled_bulk_eps & (u32 )(1 << (int )as->bulk_addr)) != 0U) {
      ret = -121;
    } else {
      ret = usb_submit_urb(as->urb, 32U);
    }
    spin_unlock_irq(& ps->lock);
  } else {
    ret = usb_submit_urb(as->urb, 208U);
  }
  if (ret != 0) {
    dev_printk("\017", (struct device  const  *)(& (ps->dev)->dev), "usbfs: usb_submit_urb returned %d\n",
               ret);
    snoop_urb(ps->dev, as->userurb, (int )(as->urb)->pipe, 0U, ret, 1, 0, 0U);
    async_removepending(as);
    goto error;
  }
  return (0);
  error: 
  kfree((void const   *)isopkt);
  kfree((void const   *)dr);
  if ((unsigned long )as != (unsigned long )((struct async *)0)) {
    free_async(as);
  }
  return (ret);
}
}
static int proc_submiturb(struct dev_state *ps , void *arg ) 
{ struct usbdevfs_urb uurb ;
  unsigned long tmp ;
  int tmp___0 ;

  {
  tmp = copy_from_user((void *)(& uurb), (void const   *)arg, 56UL);
  if (tmp != 0UL) {
    return (-14);
  }
  tmp___0 = proc_do_submiturb(ps, & uurb, (struct usbdevfs_iso_packet_desc *)(& ((struct usbdevfs_urb *)arg)->iso_frame_desc),
                              arg);
  return (tmp___0);
}
}
static int proc_unlinkurb(struct dev_state *ps , void *arg ) 
{ struct urb *urb ;
  struct async *as ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
  tmp = spinlock_check(& ps->lock);
  flags = _raw_spin_lock_irqsave(tmp);
  as = async_getpending(ps, arg);
  if ((unsigned long )as == (unsigned long )((struct async *)0)) {
    spin_unlock_irqrestore(& ps->lock, flags);
    return (-22);
  }
  urb = as->urb;
  usb_get_urb(urb);
  spin_unlock_irqrestore(& ps->lock, flags);
  usb_kill_urb(urb);
  usb_free_urb(urb);
  return (0);
}
}
static int processcompl(struct async *as , void **arg ) 
{ struct urb *urb ;
  struct usbdevfs_urb *userurb ;
  void *addr ;
  unsigned int i ;
  int tmp ;
  int __ret_pu ;
  int __pu_val ;
  int __ret_pu___0 ;
  int __pu_val___0 ;
  int __ret_pu___1 ;
  int __pu_val___1 ;
  int __ret_pu___2 ;
  unsigned int __pu_val___2 ;
  int __ret_pu___3 ;
  unsigned int __pu_val___3 ;
  int tmp___0 ;
  int __ret_pu___4 ;
  void *__pu_val___4 ;

  {
  urb = as->urb;
  userurb = (struct usbdevfs_urb *)as->userurb;
  addr = as->userurb;
  if ((unsigned long )as->userbuffer != (unsigned long )((void *)0) && urb->actual_length != 0U) {
    tmp = copy_urb_data_to_user((u8 *)as->userbuffer, urb);
    if (tmp != 0) {
      goto err_out;
    }
  }
  might_fault();
  __pu_val = as->status;
  switch (4UL) {
  case 1UL: 
  __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" (& userurb->status): "ebx");
  goto ldv_34993;
  case 2UL: 
  __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" (& userurb->status): "ebx");
  goto ldv_34993;
  case 4UL: 
  __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" (& userurb->status): "ebx");
  goto ldv_34993;
  case 8UL: 
  __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" (& userurb->status): "ebx");
  goto ldv_34993;
  default: 
  __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" (& userurb->status): "ebx");
  goto ldv_34993;
  }
  ldv_34993: ;
  if (__ret_pu != 0) {
    goto err_out;
  }
  might_fault();
  __pu_val___0 = (int )urb->actual_length;
  switch (4UL) {
  case 1UL: 
  __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (& userurb->actual_length): "ebx");
  goto ldv_35002;
  case 2UL: 
  __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (& userurb->actual_length): "ebx");
  goto ldv_35002;
  case 4UL: 
  __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (& userurb->actual_length): "ebx");
  goto ldv_35002;
  case 8UL: 
  __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (& userurb->actual_length): "ebx");
  goto ldv_35002;
  default: 
  __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (& userurb->actual_length): "ebx");
  goto ldv_35002;
  }
  ldv_35002: ;
  if (__ret_pu___0 != 0) {
    goto err_out;
  }
  might_fault();
  __pu_val___1 = urb->error_count;
  switch (4UL) {
  case 1UL: 
  __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (& userurb->error_count): "ebx");
  goto ldv_35011;
  case 2UL: 
  __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (& userurb->error_count): "ebx");
  goto ldv_35011;
  case 4UL: 
  __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (& userurb->error_count): "ebx");
  goto ldv_35011;
  case 8UL: 
  __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (& userurb->error_count): "ebx");
  goto ldv_35011;
  default: 
  __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (& userurb->error_count): "ebx");
  goto ldv_35011;
  }
  ldv_35011: ;
  if (__ret_pu___1 != 0) {
    goto err_out;
  }
  tmp___0 = usb_endpoint_xfer_isoc((struct usb_endpoint_descriptor  const  *)(& (urb->ep)->desc));
  if (tmp___0 != 0) {
    i = 0U;
    goto ldv_35036;
    ldv_35035: 
    might_fault();
    __pu_val___2 = urb->iso_frame_desc[i].actual_length;
    switch (4UL) {
    case 1UL: 
    __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" (& userurb->iso_frame_desc[i].actual_length): "ebx");
    goto ldv_35020;
    case 2UL: 
    __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" (& userurb->iso_frame_desc[i].actual_length): "ebx");
    goto ldv_35020;
    case 4UL: 
    __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" (& userurb->iso_frame_desc[i].actual_length): "ebx");
    goto ldv_35020;
    case 8UL: 
    __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" (& userurb->iso_frame_desc[i].actual_length): "ebx");
    goto ldv_35020;
    default: 
    __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" (& userurb->iso_frame_desc[i].actual_length): "ebx");
    goto ldv_35020;
    }
    ldv_35020: ;
    if (__ret_pu___2 != 0) {
      goto err_out;
    }
    might_fault();
    __pu_val___3 = (unsigned int )urb->iso_frame_desc[i].status;
    switch (4UL) {
    case 1UL: 
    __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu___3): "0" (__pu_val___3),
                         "c" (& userurb->iso_frame_desc[i].status): "ebx");
    goto ldv_35029;
    case 2UL: 
    __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu___3): "0" (__pu_val___3),
                         "c" (& userurb->iso_frame_desc[i].status): "ebx");
    goto ldv_35029;
    case 4UL: 
    __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu___3): "0" (__pu_val___3),
                         "c" (& userurb->iso_frame_desc[i].status): "ebx");
    goto ldv_35029;
    case 8UL: 
    __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu___3): "0" (__pu_val___3),
                         "c" (& userurb->iso_frame_desc[i].status): "ebx");
    goto ldv_35029;
    default: 
    __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu___3): "0" (__pu_val___3),
                         "c" (& userurb->iso_frame_desc[i].status): "ebx");
    goto ldv_35029;
    }
    ldv_35029: ;
    if (__ret_pu___3 != 0) {
      goto err_out;
    }
    i ++;
    ldv_35036: ;
    if ((unsigned int )urb->number_of_packets > i) {
      goto ldv_35035;
    }
  }
  might_fault();
  __pu_val___4 = addr;
  switch (8UL) {
  case 1UL: 
  __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu___4): "0" (__pu_val___4),
                       "c" (arg): "ebx");
  goto ldv_35041;
  case 2UL: 
  __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu___4): "0" (__pu_val___4),
                       "c" (arg): "ebx");
  goto ldv_35041;
  case 4UL: 
  __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu___4): "0" (__pu_val___4),
                       "c" (arg): "ebx");
  goto ldv_35041;
  case 8UL: 
  __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu___4): "0" (__pu_val___4),
                       "c" (arg): "ebx");
  goto ldv_35041;
  default: 
  __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu___4): "0" (__pu_val___4),
                       "c" (arg): "ebx");
  goto ldv_35041;
  }
  ldv_35041: ;
  if (__ret_pu___4 != 0) {
    return (-14);
  }
  return (0);
  err_out: ;
  return (-14);
}
}
static struct async *reap_as(struct dev_state *ps ) 
{ wait_queue_t wait ;
  struct task_struct *tmp ;
  struct async *as ;
  struct usb_device *dev ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  long volatile   __ret ;
  struct task_struct *tmp___3 ;
  struct task_struct *tmp___4 ;
  struct task_struct *tmp___5 ;
  struct task_struct *tmp___6 ;

  {
  tmp = get_current();
  wait.flags = 0U;
  wait.private = (void *)tmp;
  wait.func = & default_wake_function;
  wait.task_list.next = 0;
  wait.task_list.prev = 0;
  as = 0;
  dev = ps->dev;
  add_wait_queue(& ps->wait, & wait);
  ldv_35054: 
  tmp___0 = get_current();
  tmp___0->state = 1L;
  as = async_getcompleted(ps);
  if ((unsigned long )as != (unsigned long )((struct async *)0)) {
    goto ldv_35053;
  }
  tmp___1 = get_current();
  tmp___2 = signal_pending(tmp___1);
  if (tmp___2 != 0) {
    goto ldv_35053;
  }
  device_unlock___4(& dev->dev);
  schedule();
  device_lock___4(& dev->dev);
  goto ldv_35054;
  ldv_35053: 
  remove_wait_queue(& ps->wait, & wait);
  __ret = 0L;
  switch (8UL) {
  case 1UL: 
  tmp___3 = get_current();
  __asm__  volatile   ("xchgb %b0, %1\n": "+q" (__ret), "+m" (tmp___3->state): : "memory",
                       "cc");
  goto ldv_35057;
  case 2UL: 
  tmp___4 = get_current();
  __asm__  volatile   ("xchgw %w0, %1\n": "+r" (__ret), "+m" (tmp___4->state): : "memory",
                       "cc");
  goto ldv_35057;
  case 4UL: 
  tmp___5 = get_current();
  __asm__  volatile   ("xchgl %0, %1\n": "+r" (__ret), "+m" (tmp___5->state): : "memory",
                       "cc");
  goto ldv_35057;
  case 8UL: 
  tmp___6 = get_current();
  __asm__  volatile   ("xchgq %q0, %1\n": "+r" (__ret), "+m" (tmp___6->state): : "memory",
                       "cc");
  goto ldv_35057;
  default: 
  __xchg_wrong_size();
  }
  ldv_35057: ;
  return (as);
}
}
static int proc_reapurb(struct dev_state *ps , void *arg ) 
{ struct async *as ;
  struct async *tmp ;
  int retval ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
  tmp = reap_as(ps);
  as = tmp;
  if ((unsigned long )as != (unsigned long )((struct async *)0)) {
    tmp___0 = processcompl(as, (void **)arg);
    retval = tmp___0;
    free_async(as);
    return (retval);
  }
  tmp___1 = get_current();
  tmp___2 = signal_pending(tmp___1);
  if (tmp___2 != 0) {
    return (-4);
  }
  return (-5);
}
}
static int proc_reapurbnonblock(struct dev_state *ps , void *arg ) 
{ int retval ;
  struct async *as ;

  {
  as = async_getcompleted(ps);
  retval = -11;
  if ((unsigned long )as != (unsigned long )((struct async *)0)) {
    retval = processcompl(as, (void **)arg);
    free_async(as);
  }
  return (retval);
}
}
static int proc_control_compat(struct dev_state *ps , struct usbdevfs_ctrltransfer32 *p32 ) 
{ struct usbdevfs_ctrltransfer *p ;
  __u32 udata ;
  void *tmp ;
  unsigned long tmp___0 ;
  int __ret_gu ;
  register unsigned long __val_gu ;
  int __ret_pu ;
  void *__pu_val ;
  int tmp___1 ;

  {
  tmp = compat_alloc_user_space(24UL);
  p = (struct usbdevfs_ctrltransfer *)tmp;
  tmp___0 = copy_in_user((void *)p, (void const   *)p32, 12U);
  if (tmp___0 != 0UL) {
    return (-14);
  } else {
    might_fault();
    __asm__  volatile   ("call __get_user_%P3": "=a" (__ret_gu), "=r" (__val_gu): "0" (& p32->data),
                         "i" (4UL));
    udata = (unsigned int )__val_gu;
    if (__ret_gu != 0) {
      return (-14);
    } else {
      might_fault();
      __pu_val = compat_ptr(udata);
      switch (8UL) {
      case 1UL: 
      __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" (& p->data): "ebx");
      goto ldv_35087;
      case 2UL: 
      __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" (& p->data): "ebx");
      goto ldv_35087;
      case 4UL: 
      __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" (& p->data): "ebx");
      goto ldv_35087;
      case 8UL: 
      __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" (& p->data): "ebx");
      goto ldv_35087;
      default: 
      __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" (& p->data): "ebx");
      goto ldv_35087;
      }
      ldv_35087: ;
      if (__ret_pu != 0) {
        return (-14);
      }
    }
  }
  tmp___1 = proc_control(ps, (void *)p);
  return (tmp___1);
}
}
static int proc_bulk_compat(struct dev_state *ps , struct usbdevfs_bulktransfer32 *p32 ) 
{ struct usbdevfs_bulktransfer *p ;
  compat_uint_t n ;
  compat_caddr_t addr ;
  void *tmp ;
  int __ret_gu ;
  register unsigned long __val_gu ;
  int __ret_pu ;
  unsigned int __pu_val ;
  int __ret_gu___0 ;
  register unsigned long __val_gu___0 ;
  int __ret_pu___0 ;
  unsigned int __pu_val___0 ;
  int __ret_gu___1 ;
  register unsigned long __val_gu___1 ;
  int __ret_pu___1 ;
  unsigned int __pu_val___1 ;
  int __ret_gu___2 ;
  register unsigned long __val_gu___2 ;
  int __ret_pu___2 ;
  void *__pu_val___2 ;
  int tmp___0 ;

  {
  tmp = compat_alloc_user_space(24UL);
  p = (struct usbdevfs_bulktransfer *)tmp;
  might_fault();
  __asm__  volatile   ("call __get_user_%P3": "=a" (__ret_gu), "=r" (__val_gu): "0" (& p32->ep),
                       "i" (4UL));
  n = (unsigned int )__val_gu;
  if (__ret_gu != 0) {
    return (-14);
  } else {
    might_fault();
    __pu_val = n;
    switch (4UL) {
    case 1UL: 
    __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" (& p->ep): "ebx");
    goto ldv_35106;
    case 2UL: 
    __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" (& p->ep): "ebx");
    goto ldv_35106;
    case 4UL: 
    __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" (& p->ep): "ebx");
    goto ldv_35106;
    case 8UL: 
    __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" (& p->ep): "ebx");
    goto ldv_35106;
    default: 
    __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" (& p->ep): "ebx");
    goto ldv_35106;
    }
    ldv_35106: ;
    if (__ret_pu != 0) {
      return (-14);
    } else {
      might_fault();
      __asm__  volatile   ("call __get_user_%P3": "=a" (__ret_gu___0), "=r" (__val_gu___0): "0" (& p32->len),
                           "i" (4UL));
      n = (unsigned int )__val_gu___0;
      if (__ret_gu___0 != 0) {
        return (-14);
      } else {
        might_fault();
        __pu_val___0 = n;
        switch (4UL) {
        case 1UL: 
        __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                             "c" (& p->len): "ebx");
        goto ldv_35118;
        case 2UL: 
        __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                             "c" (& p->len): "ebx");
        goto ldv_35118;
        case 4UL: 
        __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                             "c" (& p->len): "ebx");
        goto ldv_35118;
        case 8UL: 
        __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                             "c" (& p->len): "ebx");
        goto ldv_35118;
        default: 
        __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu___0): "0" (__pu_val___0),
                             "c" (& p->len): "ebx");
        goto ldv_35118;
        }
        ldv_35118: ;
        if (__ret_pu___0 != 0) {
          return (-14);
        } else {
          might_fault();
          __asm__  volatile   ("call __get_user_%P3": "=a" (__ret_gu___1), "=r" (__val_gu___1): "0" (& p32->timeout),
                               "i" (4UL));
          n = (unsigned int )__val_gu___1;
          if (__ret_gu___1 != 0) {
            return (-14);
          } else {
            might_fault();
            __pu_val___1 = n;
            switch (4UL) {
            case 1UL: 
            __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu___1): "0" (__pu_val___1),
                                 "c" (& p->timeout): "ebx");
            goto ldv_35130;
            case 2UL: 
            __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu___1): "0" (__pu_val___1),
                                 "c" (& p->timeout): "ebx");
            goto ldv_35130;
            case 4UL: 
            __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu___1): "0" (__pu_val___1),
                                 "c" (& p->timeout): "ebx");
            goto ldv_35130;
            case 8UL: 
            __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu___1): "0" (__pu_val___1),
                                 "c" (& p->timeout): "ebx");
            goto ldv_35130;
            default: 
            __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu___1): "0" (__pu_val___1),
                                 "c" (& p->timeout): "ebx");
            goto ldv_35130;
            }
            ldv_35130: ;
            if (__ret_pu___1 != 0) {
              return (-14);
            } else {
              might_fault();
              __asm__  volatile   ("call __get_user_%P3": "=a" (__ret_gu___2), "=r" (__val_gu___2): "0" (& p32->data),
                                   "i" (4UL));
              addr = (unsigned int )__val_gu___2;
              if (__ret_gu___2 != 0) {
                return (-14);
              } else {
                might_fault();
                __pu_val___2 = compat_ptr(addr);
                switch (8UL) {
                case 1UL: 
                __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu___2): "0" (__pu_val___2),
                                     "c" (& p->data): "ebx");
                goto ldv_35142;
                case 2UL: 
                __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu___2): "0" (__pu_val___2),
                                     "c" (& p->data): "ebx");
                goto ldv_35142;
                case 4UL: 
                __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu___2): "0" (__pu_val___2),
                                     "c" (& p->data): "ebx");
                goto ldv_35142;
                case 8UL: 
                __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu___2): "0" (__pu_val___2),
                                     "c" (& p->data): "ebx");
                goto ldv_35142;
                default: 
                __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu___2): "0" (__pu_val___2),
                                     "c" (& p->data): "ebx");
                goto ldv_35142;
                }
                ldv_35142: ;
                if (__ret_pu___2 != 0) {
                  return (-14);
                }
              }
            }
          }
        }
      }
    }
  }
  tmp___0 = proc_bulk(ps, (void *)p);
  return (tmp___0);
}
}
static int proc_disconnectsignal_compat(struct dev_state *ps , void *arg ) 
{ struct usbdevfs_disconnectsignal32 ds ;
  unsigned long tmp ;

  {
  tmp = copy_from_user((void *)(& ds), (void const   *)arg, 8UL);
  if (tmp != 0UL) {
    return (-14);
  }
  ps->discsignr = (unsigned int )ds.signr;
  ps->disccontext = compat_ptr(ds.context);
  return (0);
}
}
static int get_urb32(struct usbdevfs_urb *kurb , struct usbdevfs_urb32 *uurb ) 
{ __u32 uptr ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp ;
  long tmp___0 ;
  int __gu_err ;
  unsigned long __gu_val ;
  int tmp___1 ;
  int __gu_err___0 ;
  unsigned long __gu_val___0 ;
  int tmp___2 ;
  int __gu_err___1 ;
  unsigned long __gu_val___1 ;
  int tmp___3 ;
  int __gu_err___2 ;
  unsigned long __gu_val___2 ;
  int tmp___4 ;
  int __gu_err___3 ;
  unsigned long __gu_val___3 ;
  int tmp___5 ;
  int __gu_err___4 ;
  unsigned long __gu_val___4 ;
  int tmp___6 ;
  int __gu_err___5 ;
  unsigned long __gu_val___5 ;
  int tmp___7 ;
  int __gu_err___6 ;
  unsigned long __gu_val___6 ;
  int tmp___8 ;
  int __gu_err___7 ;
  unsigned long __gu_val___7 ;
  int tmp___9 ;
  int __gu_err___8 ;
  unsigned long __gu_val___8 ;
  int tmp___10 ;
  int __gu_err___9 ;
  unsigned long __gu_val___9 ;
  int tmp___11 ;
  int __gu_err___10 ;
  unsigned long __gu_val___10 ;
  int tmp___12 ;

  {
  tmp = current_thread_info();
  __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (uurb),
            "g" (44L), "rm" (tmp->addr_limit.seg));
  tmp___0 = ldv__builtin_expect(flag == 0UL, 1L);
  if (tmp___0 == 0L) {
    return (-14);
  } else {
    __gu_err = 0;
    switch (1UL) {
    case 1UL: 
    __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovb %2,%b1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorb %b1,%b1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err),
                         "=q" (__gu_val): "m" (*((struct __large_struct *)(& uurb->type))),
                         "i" (-14), "0" (__gu_err));
    goto ldv_35164;
    case 2UL: 
    __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovw %2,%w1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorw %w1,%w1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err),
                         "=r" (__gu_val): "m" (*((struct __large_struct *)(& uurb->type))),
                         "i" (-14), "0" (__gu_err));
    goto ldv_35164;
    case 4UL: 
    __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovl %2,%k1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorl %k1,%k1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err),
                         "=r" (__gu_val): "m" (*((struct __large_struct *)(& uurb->type))),
                         "i" (-14), "0" (__gu_err));
    goto ldv_35164;
    case 8UL: 
    __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovq %2,%1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorq %1,%1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err),
                         "=r" (__gu_val): "m" (*((struct __large_struct *)(& uurb->type))),
                         "i" (-14), "0" (__gu_err));
    goto ldv_35164;
    default: 
    tmp___1 = __get_user_bad();
    __gu_val = (unsigned long )tmp___1;
    }
    ldv_35164: 
    kurb->type = (unsigned char )__gu_val;
    if (__gu_err != 0) {
      return (-14);
    } else {
      __gu_err___0 = 0;
      switch (1UL) {
      case 1UL: 
      __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovb %2,%b1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorb %b1,%b1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___0),
                           "=q" (__gu_val___0): "m" (*((struct __large_struct *)(& uurb->endpoint))),
                           "i" (-14), "0" (__gu_err___0));
      goto ldv_35173;
      case 2UL: 
      __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovw %2,%w1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorw %w1,%w1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___0),
                           "=r" (__gu_val___0): "m" (*((struct __large_struct *)(& uurb->endpoint))),
                           "i" (-14), "0" (__gu_err___0));
      goto ldv_35173;
      case 4UL: 
      __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovl %2,%k1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorl %k1,%k1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___0),
                           "=r" (__gu_val___0): "m" (*((struct __large_struct *)(& uurb->endpoint))),
                           "i" (-14), "0" (__gu_err___0));
      goto ldv_35173;
      case 8UL: 
      __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovq %2,%1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorq %1,%1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___0),
                           "=r" (__gu_val___0): "m" (*((struct __large_struct *)(& uurb->endpoint))),
                           "i" (-14), "0" (__gu_err___0));
      goto ldv_35173;
      default: 
      tmp___2 = __get_user_bad();
      __gu_val___0 = (unsigned long )tmp___2;
      }
      ldv_35173: 
      kurb->endpoint = (unsigned char )__gu_val___0;
      if (__gu_err___0 != 0) {
        return (-14);
      } else {
        __gu_err___1 = 0;
        switch (4UL) {
        case 1UL: 
        __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovb %2,%b1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorb %b1,%b1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___1),
                             "=q" (__gu_val___1): "m" (*((struct __large_struct *)(& uurb->status))),
                             "i" (-14), "0" (__gu_err___1));
        goto ldv_35182;
        case 2UL: 
        __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovw %2,%w1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorw %w1,%w1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___1),
                             "=r" (__gu_val___1): "m" (*((struct __large_struct *)(& uurb->status))),
                             "i" (-14), "0" (__gu_err___1));
        goto ldv_35182;
        case 4UL: 
        __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovl %2,%k1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorl %k1,%k1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___1),
                             "=r" (__gu_val___1): "m" (*((struct __large_struct *)(& uurb->status))),
                             "i" (-14), "0" (__gu_err___1));
        goto ldv_35182;
        case 8UL: 
        __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovq %2,%1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorq %1,%1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___1),
                             "=r" (__gu_val___1): "m" (*((struct __large_struct *)(& uurb->status))),
                             "i" (-14), "0" (__gu_err___1));
        goto ldv_35182;
        default: 
        tmp___3 = __get_user_bad();
        __gu_val___1 = (unsigned long )tmp___3;
        }
        ldv_35182: 
        kurb->status = (int )__gu_val___1;
        if (__gu_err___1 != 0) {
          return (-14);
        } else {
          __gu_err___2 = 0;
          switch (4UL) {
          case 1UL: 
          __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovb %2,%b1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorb %b1,%b1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___2),
                               "=q" (__gu_val___2): "m" (*((struct __large_struct *)(& uurb->flags))),
                               "i" (-14), "0" (__gu_err___2));
          goto ldv_35191;
          case 2UL: 
          __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovw %2,%w1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorw %w1,%w1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___2),
                               "=r" (__gu_val___2): "m" (*((struct __large_struct *)(& uurb->flags))),
                               "i" (-14), "0" (__gu_err___2));
          goto ldv_35191;
          case 4UL: 
          __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovl %2,%k1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorl %k1,%k1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___2),
                               "=r" (__gu_val___2): "m" (*((struct __large_struct *)(& uurb->flags))),
                               "i" (-14), "0" (__gu_err___2));
          goto ldv_35191;
          case 8UL: 
          __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovq %2,%1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorq %1,%1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___2),
                               "=r" (__gu_val___2): "m" (*((struct __large_struct *)(& uurb->flags))),
                               "i" (-14), "0" (__gu_err___2));
          goto ldv_35191;
          default: 
          tmp___4 = __get_user_bad();
          __gu_val___2 = (unsigned long )tmp___4;
          }
          ldv_35191: 
          kurb->flags = (unsigned int )__gu_val___2;
          if (__gu_err___2 != 0) {
            return (-14);
          } else {
            __gu_err___3 = 0;
            switch (4UL) {
            case 1UL: 
            __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovb %2,%b1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorb %b1,%b1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___3),
                                 "=q" (__gu_val___3): "m" (*((struct __large_struct *)(& uurb->buffer_length))),
                                 "i" (-14), "0" (__gu_err___3));
            goto ldv_35200;
            case 2UL: 
            __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovw %2,%w1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorw %w1,%w1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___3),
                                 "=r" (__gu_val___3): "m" (*((struct __large_struct *)(& uurb->buffer_length))),
                                 "i" (-14), "0" (__gu_err___3));
            goto ldv_35200;
            case 4UL: 
            __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovl %2,%k1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorl %k1,%k1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___3),
                                 "=r" (__gu_val___3): "m" (*((struct __large_struct *)(& uurb->buffer_length))),
                                 "i" (-14), "0" (__gu_err___3));
            goto ldv_35200;
            case 8UL: 
            __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovq %2,%1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorq %1,%1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___3),
                                 "=r" (__gu_val___3): "m" (*((struct __large_struct *)(& uurb->buffer_length))),
                                 "i" (-14), "0" (__gu_err___3));
            goto ldv_35200;
            default: 
            tmp___5 = __get_user_bad();
            __gu_val___3 = (unsigned long )tmp___5;
            }
            ldv_35200: 
            kurb->buffer_length = (int )__gu_val___3;
            if (__gu_err___3 != 0) {
              return (-14);
            } else {
              __gu_err___4 = 0;
              switch (4UL) {
              case 1UL: 
              __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovb %2,%b1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorb %b1,%b1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___4),
                                   "=q" (__gu_val___4): "m" (*((struct __large_struct *)(& uurb->actual_length))),
                                   "i" (-14), "0" (__gu_err___4));
              goto ldv_35209;
              case 2UL: 
              __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovw %2,%w1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorw %w1,%w1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___4),
                                   "=r" (__gu_val___4): "m" (*((struct __large_struct *)(& uurb->actual_length))),
                                   "i" (-14), "0" (__gu_err___4));
              goto ldv_35209;
              case 4UL: 
              __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovl %2,%k1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorl %k1,%k1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___4),
                                   "=r" (__gu_val___4): "m" (*((struct __large_struct *)(& uurb->actual_length))),
                                   "i" (-14), "0" (__gu_err___4));
              goto ldv_35209;
              case 8UL: 
              __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovq %2,%1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorq %1,%1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___4),
                                   "=r" (__gu_val___4): "m" (*((struct __large_struct *)(& uurb->actual_length))),
                                   "i" (-14), "0" (__gu_err___4));
              goto ldv_35209;
              default: 
              tmp___6 = __get_user_bad();
              __gu_val___4 = (unsigned long )tmp___6;
              }
              ldv_35209: 
              kurb->actual_length = (int )__gu_val___4;
              if (__gu_err___4 != 0) {
                return (-14);
              } else {
                __gu_err___5 = 0;
                switch (4UL) {
                case 1UL: 
                __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovb %2,%b1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorb %b1,%b1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___5),
                                     "=q" (__gu_val___5): "m" (*((struct __large_struct *)(& uurb->start_frame))),
                                     "i" (-14), "0" (__gu_err___5));
                goto ldv_35218;
                case 2UL: 
                __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovw %2,%w1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorw %w1,%w1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___5),
                                     "=r" (__gu_val___5): "m" (*((struct __large_struct *)(& uurb->start_frame))),
                                     "i" (-14), "0" (__gu_err___5));
                goto ldv_35218;
                case 4UL: 
                __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovl %2,%k1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorl %k1,%k1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___5),
                                     "=r" (__gu_val___5): "m" (*((struct __large_struct *)(& uurb->start_frame))),
                                     "i" (-14), "0" (__gu_err___5));
                goto ldv_35218;
                case 8UL: 
                __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovq %2,%1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorq %1,%1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___5),
                                     "=r" (__gu_val___5): "m" (*((struct __large_struct *)(& uurb->start_frame))),
                                     "i" (-14), "0" (__gu_err___5));
                goto ldv_35218;
                default: 
                tmp___7 = __get_user_bad();
                __gu_val___5 = (unsigned long )tmp___7;
                }
                ldv_35218: 
                kurb->start_frame = (int )__gu_val___5;
                if (__gu_err___5 != 0) {
                  return (-14);
                } else {
                  __gu_err___6 = 0;
                  switch (4UL) {
                  case 1UL: 
                  __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovb %2,%b1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorb %b1,%b1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___6),
                                       "=q" (__gu_val___6): "m" (*((struct __large_struct *)(& uurb->number_of_packets))),
                                       "i" (-14), "0" (__gu_err___6));
                  goto ldv_35227;
                  case 2UL: 
                  __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovw %2,%w1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorw %w1,%w1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___6),
                                       "=r" (__gu_val___6): "m" (*((struct __large_struct *)(& uurb->number_of_packets))),
                                       "i" (-14), "0" (__gu_err___6));
                  goto ldv_35227;
                  case 4UL: 
                  __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovl %2,%k1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorl %k1,%k1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___6),
                                       "=r" (__gu_val___6): "m" (*((struct __large_struct *)(& uurb->number_of_packets))),
                                       "i" (-14), "0" (__gu_err___6));
                  goto ldv_35227;
                  case 8UL: 
                  __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovq %2,%1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorq %1,%1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___6),
                                       "=r" (__gu_val___6): "m" (*((struct __large_struct *)(& uurb->number_of_packets))),
                                       "i" (-14), "0" (__gu_err___6));
                  goto ldv_35227;
                  default: 
                  tmp___8 = __get_user_bad();
                  __gu_val___6 = (unsigned long )tmp___8;
                  }
                  ldv_35227: 
                  kurb->number_of_packets = (int )__gu_val___6;
                  if (__gu_err___6 != 0) {
                    return (-14);
                  } else {
                    __gu_err___7 = 0;
                    switch (4UL) {
                    case 1UL: 
                    __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovb %2,%b1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorb %b1,%b1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___7),
                                         "=q" (__gu_val___7): "m" (*((struct __large_struct *)(& uurb->error_count))),
                                         "i" (-14), "0" (__gu_err___7));
                    goto ldv_35236;
                    case 2UL: 
                    __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovw %2,%w1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorw %w1,%w1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___7),
                                         "=r" (__gu_val___7): "m" (*((struct __large_struct *)(& uurb->error_count))),
                                         "i" (-14), "0" (__gu_err___7));
                    goto ldv_35236;
                    case 4UL: 
                    __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovl %2,%k1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorl %k1,%k1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___7),
                                         "=r" (__gu_val___7): "m" (*((struct __large_struct *)(& uurb->error_count))),
                                         "i" (-14), "0" (__gu_err___7));
                    goto ldv_35236;
                    case 8UL: 
                    __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovq %2,%1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorq %1,%1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___7),
                                         "=r" (__gu_val___7): "m" (*((struct __large_struct *)(& uurb->error_count))),
                                         "i" (-14), "0" (__gu_err___7));
                    goto ldv_35236;
                    default: 
                    tmp___9 = __get_user_bad();
                    __gu_val___7 = (unsigned long )tmp___9;
                    }
                    ldv_35236: 
                    kurb->error_count = (int )__gu_val___7;
                    if (__gu_err___7 != 0) {
                      return (-14);
                    } else {
                      __gu_err___8 = 0;
                      switch (4UL) {
                      case 1UL: 
                      __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovb %2,%b1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorb %b1,%b1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___8),
                                           "=q" (__gu_val___8): "m" (*((struct __large_struct *)(& uurb->signr))),
                                           "i" (-14), "0" (__gu_err___8));
                      goto ldv_35245;
                      case 2UL: 
                      __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovw %2,%w1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorw %w1,%w1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___8),
                                           "=r" (__gu_val___8): "m" (*((struct __large_struct *)(& uurb->signr))),
                                           "i" (-14), "0" (__gu_err___8));
                      goto ldv_35245;
                      case 4UL: 
                      __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovl %2,%k1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorl %k1,%k1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___8),
                                           "=r" (__gu_val___8): "m" (*((struct __large_struct *)(& uurb->signr))),
                                           "i" (-14), "0" (__gu_err___8));
                      goto ldv_35245;
                      case 8UL: 
                      __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovq %2,%1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorq %1,%1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___8),
                                           "=r" (__gu_val___8): "m" (*((struct __large_struct *)(& uurb->signr))),
                                           "i" (-14), "0" (__gu_err___8));
                      goto ldv_35245;
                      default: 
                      tmp___10 = __get_user_bad();
                      __gu_val___8 = (unsigned long )tmp___10;
                      }
                      ldv_35245: 
                      kurb->signr = (unsigned int )__gu_val___8;
                      if (__gu_err___8 != 0) {
                        return (-14);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  __gu_err___9 = 0;
  switch (4UL) {
  case 1UL: 
  __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovb %2,%b1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorb %b1,%b1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___9),
                       "=q" (__gu_val___9): "m" (*((struct __large_struct *)(& uurb->buffer))),
                       "i" (-14), "0" (__gu_err___9));
  goto ldv_35254;
  case 2UL: 
  __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovw %2,%w1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorw %w1,%w1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___9),
                       "=r" (__gu_val___9): "m" (*((struct __large_struct *)(& uurb->buffer))),
                       "i" (-14), "0" (__gu_err___9));
  goto ldv_35254;
  case 4UL: 
  __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovl %2,%k1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorl %k1,%k1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___9),
                       "=r" (__gu_val___9): "m" (*((struct __large_struct *)(& uurb->buffer))),
                       "i" (-14), "0" (__gu_err___9));
  goto ldv_35254;
  case 8UL: 
  __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovq %2,%1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorq %1,%1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___9),
                       "=r" (__gu_val___9): "m" (*((struct __large_struct *)(& uurb->buffer))),
                       "i" (-14), "0" (__gu_err___9));
  goto ldv_35254;
  default: 
  tmp___11 = __get_user_bad();
  __gu_val___9 = (unsigned long )tmp___11;
  }
  ldv_35254: 
  uptr = (unsigned int )__gu_val___9;
  if (__gu_err___9 != 0) {
    return (-14);
  }
  kurb->buffer = compat_ptr(uptr);
  __gu_err___10 = 0;
  switch (4UL) {
  case 1UL: 
  __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovb %2,%b1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorb %b1,%b1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___10),
                       "=q" (__gu_val___10): "m" (*((struct __large_struct *)(& uurb->usercontext))),
                       "i" (-14), "0" (__gu_err___10));
  goto ldv_35263;
  case 2UL: 
  __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovw %2,%w1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorw %w1,%w1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___10),
                       "=r" (__gu_val___10): "m" (*((struct __large_struct *)(& uurb->usercontext))),
                       "i" (-14), "0" (__gu_err___10));
  goto ldv_35263;
  case 4UL: 
  __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovl %2,%k1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorl %k1,%k1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___10),
                       "=r" (__gu_val___10): "m" (*((struct __large_struct *)(& uurb->usercontext))),
                       "i" (-14), "0" (__gu_err___10));
  goto ldv_35263;
  case 8UL: 
  __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovq %2,%1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorq %1,%1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___10),
                       "=r" (__gu_val___10): "m" (*((struct __large_struct *)(& uurb->usercontext))),
                       "i" (-14), "0" (__gu_err___10));
  goto ldv_35263;
  default: 
  tmp___12 = __get_user_bad();
  __gu_val___10 = (unsigned long )tmp___12;
  }
  ldv_35263: 
  uptr = (unsigned int )__gu_val___10;
  if (__gu_err___10 != 0) {
    return (-14);
  }
  kurb->usercontext = compat_ptr(uptr);
  return (0);
}
}
static int proc_submiturb_compat(struct dev_state *ps , void *arg ) 
{ struct usbdevfs_urb uurb ;
  int tmp ;
  int tmp___0 ;

  {
  tmp = get_urb32(& uurb, (struct usbdevfs_urb32 *)arg);
  if (tmp != 0) {
    return (-14);
  }
  tmp___0 = proc_do_submiturb(ps, & uurb, (struct usbdevfs_iso_packet_desc *)(& ((struct usbdevfs_urb32 *)arg)->iso_frame_desc),
                              arg);
  return (tmp___0);
}
}
static int processcompl_compat(struct async *as , void **arg ) 
{ struct urb *urb ;
  struct usbdevfs_urb32 *userurb ;
  void *addr ;
  unsigned int i ;
  int tmp ;
  int __ret_pu ;
  compat_int_t __pu_val ;
  int __ret_pu___0 ;
  compat_int_t __pu_val___0 ;
  int __ret_pu___1 ;
  compat_int_t __pu_val___1 ;
  int __ret_pu___2 ;
  unsigned int __pu_val___2 ;
  int __ret_pu___3 ;
  unsigned int __pu_val___3 ;
  int tmp___0 ;
  int __ret_pu___4 ;
  u32 __pu_val___4 ;

  {
  urb = as->urb;
  userurb = (struct usbdevfs_urb32 *)as->userurb;
  addr = as->userurb;
  if ((unsigned long )as->userbuffer != (unsigned long )((void *)0) && urb->actual_length != 0U) {
    tmp = copy_urb_data_to_user((u8 *)as->userbuffer, urb);
    if (tmp != 0) {
      return (-14);
    }
  }
  might_fault();
  __pu_val = as->status;
  switch (4UL) {
  case 1UL: 
  __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" (& userurb->status): "ebx");
  goto ldv_35285;
  case 2UL: 
  __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" (& userurb->status): "ebx");
  goto ldv_35285;
  case 4UL: 
  __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" (& userurb->status): "ebx");
  goto ldv_35285;
  case 8UL: 
  __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" (& userurb->status): "ebx");
  goto ldv_35285;
  default: 
  __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" (& userurb->status): "ebx");
  goto ldv_35285;
  }
  ldv_35285: ;
  if (__ret_pu != 0) {
    return (-14);
  }
  might_fault();
  __pu_val___0 = (compat_int_t )urb->actual_length;
  switch (4UL) {
  case 1UL: 
  __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (& userurb->actual_length): "ebx");
  goto ldv_35294;
  case 2UL: 
  __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (& userurb->actual_length): "ebx");
  goto ldv_35294;
  case 4UL: 
  __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (& userurb->actual_length): "ebx");
  goto ldv_35294;
  case 8UL: 
  __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (& userurb->actual_length): "ebx");
  goto ldv_35294;
  default: 
  __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (& userurb->actual_length): "ebx");
  goto ldv_35294;
  }
  ldv_35294: ;
  if (__ret_pu___0 != 0) {
    return (-14);
  }
  might_fault();
  __pu_val___1 = urb->error_count;
  switch (4UL) {
  case 1UL: 
  __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (& userurb->error_count): "ebx");
  goto ldv_35303;
  case 2UL: 
  __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (& userurb->error_count): "ebx");
  goto ldv_35303;
  case 4UL: 
  __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (& userurb->error_count): "ebx");
  goto ldv_35303;
  case 8UL: 
  __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (& userurb->error_count): "ebx");
  goto ldv_35303;
  default: 
  __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (& userurb->error_count): "ebx");
  goto ldv_35303;
  }
  ldv_35303: ;
  if (__ret_pu___1 != 0) {
    return (-14);
  }
  tmp___0 = usb_endpoint_xfer_isoc((struct usb_endpoint_descriptor  const  *)(& (urb->ep)->desc));
  if (tmp___0 != 0) {
    i = 0U;
    goto ldv_35328;
    ldv_35327: 
    might_fault();
    __pu_val___2 = urb->iso_frame_desc[i].actual_length;
    switch (4UL) {
    case 1UL: 
    __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" (& userurb->iso_frame_desc[i].actual_length): "ebx");
    goto ldv_35312;
    case 2UL: 
    __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" (& userurb->iso_frame_desc[i].actual_length): "ebx");
    goto ldv_35312;
    case 4UL: 
    __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" (& userurb->iso_frame_desc[i].actual_length): "ebx");
    goto ldv_35312;
    case 8UL: 
    __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" (& userurb->iso_frame_desc[i].actual_length): "ebx");
    goto ldv_35312;
    default: 
    __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" (& userurb->iso_frame_desc[i].actual_length): "ebx");
    goto ldv_35312;
    }
    ldv_35312: ;
    if (__ret_pu___2 != 0) {
      return (-14);
    }
    might_fault();
    __pu_val___3 = (unsigned int )urb->iso_frame_desc[i].status;
    switch (4UL) {
    case 1UL: 
    __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu___3): "0" (__pu_val___3),
                         "c" (& userurb->iso_frame_desc[i].status): "ebx");
    goto ldv_35321;
    case 2UL: 
    __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu___3): "0" (__pu_val___3),
                         "c" (& userurb->iso_frame_desc[i].status): "ebx");
    goto ldv_35321;
    case 4UL: 
    __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu___3): "0" (__pu_val___3),
                         "c" (& userurb->iso_frame_desc[i].status): "ebx");
    goto ldv_35321;
    case 8UL: 
    __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu___3): "0" (__pu_val___3),
                         "c" (& userurb->iso_frame_desc[i].status): "ebx");
    goto ldv_35321;
    default: 
    __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu___3): "0" (__pu_val___3),
                         "c" (& userurb->iso_frame_desc[i].status): "ebx");
    goto ldv_35321;
    }
    ldv_35321: ;
    if (__ret_pu___3 != 0) {
      return (-14);
    }
    i ++;
    ldv_35328: ;
    if ((unsigned int )urb->number_of_packets > i) {
      goto ldv_35327;
    }
  }
  might_fault();
  __pu_val___4 = ptr_to_compat(addr);
  switch (4UL) {
  case 1UL: 
  __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu___4): "0" (__pu_val___4),
                       "c" ((u32 *)arg): "ebx");
  goto ldv_35333;
  case 2UL: 
  __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu___4): "0" (__pu_val___4),
                       "c" ((u32 *)arg): "ebx");
  goto ldv_35333;
  case 4UL: 
  __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu___4): "0" (__pu_val___4),
                       "c" ((u32 *)arg): "ebx");
  goto ldv_35333;
  case 8UL: 
  __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu___4): "0" (__pu_val___4),
                       "c" ((u32 *)arg): "ebx");
  goto ldv_35333;
  default: 
  __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu___4): "0" (__pu_val___4),
                       "c" ((u32 *)arg): "ebx");
  goto ldv_35333;
  }
  ldv_35333: ;
  if (__ret_pu___4 != 0) {
    return (-14);
  }
  return (0);
}
}
static int proc_reapurb_compat(struct dev_state *ps , void *arg ) 
{ struct async *as ;
  struct async *tmp ;
  int retval ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
  tmp = reap_as(ps);
  as = tmp;
  if ((unsigned long )as != (unsigned long )((struct async *)0)) {
    tmp___0 = processcompl_compat(as, (void **)arg);
    retval = tmp___0;
    free_async(as);
    return (retval);
  }
  tmp___1 = get_current();
  tmp___2 = signal_pending(tmp___1);
  if (tmp___2 != 0) {
    return (-4);
  }
  return (-5);
}
}
static int proc_reapurbnonblock_compat(struct dev_state *ps , void *arg ) 
{ int retval ;
  struct async *as ;

  {
  retval = -11;
  as = async_getcompleted(ps);
  if ((unsigned long )as != (unsigned long )((struct async *)0)) {
    retval = processcompl_compat(as, (void **)arg);
    free_async(as);
  }
  return (retval);
}
}
static int proc_disconnectsignal(struct dev_state *ps , void *arg ) 
{ struct usbdevfs_disconnectsignal ds ;
  unsigned long tmp ;

  {
  tmp = copy_from_user((void *)(& ds), (void const   *)arg, 16UL);
  if (tmp != 0UL) {
    return (-14);
  }
  ps->discsignr = ds.signr;
  ps->disccontext = ds.context;
  return (0);
}
}
static int proc_claiminterface(struct dev_state *ps , void *arg ) 
{ unsigned int ifnum ;
  int __ret_gu ;
  register unsigned long __val_gu ;
  int tmp ;

  {
  might_fault();
  __asm__  volatile   ("call __get_user_%P3": "=a" (__ret_gu), "=r" (__val_gu): "0" ((unsigned int *)arg),
                       "i" (4UL));
  ifnum = (unsigned int )__val_gu;
  if (__ret_gu != 0) {
    return (-14);
  }
  tmp = claimintf(ps, ifnum);
  return (tmp);
}
}
static int proc_releaseinterface(struct dev_state *ps , void *arg ) 
{ unsigned int ifnum ;
  int ret ;
  int __ret_gu ;
  register unsigned long __val_gu ;

  {
  might_fault();
  __asm__  volatile   ("call __get_user_%P3": "=a" (__ret_gu), "=r" (__val_gu): "0" ((unsigned int *)arg),
                       "i" (4UL));
  ifnum = (unsigned int )__val_gu;
  if (__ret_gu != 0) {
    return (-14);
  }
  ret = releaseintf(ps, ifnum);
  if (ret < 0) {
    return (ret);
  }
  destroy_async_on_interface(ps, ifnum);
  return (0);
}
}
static int proc_ioctl(struct dev_state *ps , struct usbdevfs_ioctl *ctl ) 
{ int size ;
  void *buf ;
  int retval ;
  struct usb_interface *intf ;
  struct usb_driver *driver ;
  unsigned long tmp ;
  int tmp___0 ;
  struct device_driver  const  *__mptr ;
  struct _ddebug descriptor ;
  long tmp___1 ;
  struct device_driver  const  *__mptr___0 ;
  int tmp___2 ;

  {
  buf = 0;
  retval = 0;
  intf = 0;
  driver = 0;
  size = (ctl->ioctl_code >> 16) & 16383;
  if (size > 0) {
    buf = kmalloc((size_t )size, 208U);
    if ((unsigned long )buf == (unsigned long )((void *)0)) {
      return (-12);
    }
    if (((unsigned int )ctl->ioctl_code & 1073741824U) != 0U) {
      tmp = copy_from_user(buf, (void const   *)ctl->data, (unsigned long )size);
      if (tmp != 0UL) {
        kfree((void const   *)buf);
        return (-14);
      }
    } else {
      memset(buf, 0, (size_t )size);
    }
  }
  tmp___0 = connected(ps);
  if (tmp___0 == 0) {
    kfree((void const   *)buf);
    return (-19);
  }
  if ((unsigned int )(ps->dev)->state != 7U) {
    retval = -113;
  } else {
    intf = usb_ifnum_to_if((struct usb_device  const  *)ps->dev, (unsigned int )ctl->ifno);
    if ((unsigned long )intf == (unsigned long )((struct usb_interface *)0)) {
      retval = -22;
    } else {
      switch (ctl->ioctl_code) {
      case 21782: ;
      if ((unsigned long )intf->dev.driver != (unsigned long )((struct device_driver *)0)) {
        __mptr = (struct device_driver  const  *)intf->dev.driver;
        driver = (struct usb_driver *)__mptr + 0xffffffffffffff58UL;
        descriptor.modname = "usbcore";
        descriptor.function = "proc_ioctl";
        descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/devio.c.prepared";
        descriptor.format = "disconnect by usbfs\n";
        descriptor.lineno = 1902U;
        descriptor.flags = 1U;
        tmp___1 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
        if (tmp___1 != 0L) {
          __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& intf->dev),
                            "disconnect by usbfs\n");
        }
        usb_driver_release_interface(driver, intf);
      } else {
        retval = -61;
      }
      goto ldv_35387;
      case 21783: ;
      if ((unsigned long )intf->dev.driver == (unsigned long )((struct device_driver *)0)) {
        retval = device_attach(& intf->dev);
      } else {
        retval = -16;
      }
      goto ldv_35387;
      default: ;
      if ((unsigned long )intf->dev.driver != (unsigned long )((struct device_driver *)0)) {
        __mptr___0 = (struct device_driver  const  *)intf->dev.driver;
        driver = (struct usb_driver *)__mptr___0 + 0xffffffffffffff58UL;
      }
      if ((unsigned long )driver == (unsigned long )((struct usb_driver *)0) || (unsigned long )driver->unlocked_ioctl == (unsigned long )((int (*)(struct usb_interface * ,
                                                                                                                                                    unsigned int  ,
                                                                                                                                                    void * ))0)) {
        retval = -25;
      } else {
        retval = (*(driver->unlocked_ioctl))(intf, (unsigned int )ctl->ioctl_code,
                                             buf);
        if (retval == -515) {
          retval = -25;
        }
      }
      }
      ldv_35387: ;
    }
  }
  if ((retval >= 0 && ctl->ioctl_code < 0) && size > 0) {
    tmp___2 = copy_to_user(ctl->data, (void const   *)buf, (unsigned int )size);
    if (tmp___2 != 0) {
      retval = -14;
    }
  }
  kfree((void const   *)buf);
  return (retval);
}
}
static int proc_ioctl_default(struct dev_state *ps , void *arg ) 
{ struct usbdevfs_ioctl ctrl ;
  unsigned long tmp ;
  int tmp___0 ;

  {
  tmp = copy_from_user((void *)(& ctrl), (void const   *)arg, 16UL);
  if (tmp != 0UL) {
    return (-14);
  }
  tmp___0 = proc_ioctl(ps, & ctrl);
  return (tmp___0);
}
}
static int proc_ioctl_compat(struct dev_state *ps , compat_uptr_t arg ) 
{ struct usbdevfs_ioctl32 *uioc ;
  struct usbdevfs_ioctl ctrl ;
  u32 udata ;
  void *tmp ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp___0 ;
  long tmp___1 ;
  int __gu_err ;
  unsigned long __gu_val ;
  int tmp___2 ;
  int __gu_err___0 ;
  unsigned long __gu_val___0 ;
  int tmp___3 ;
  int __gu_err___1 ;
  unsigned long __gu_val___1 ;
  int tmp___4 ;
  int tmp___5 ;

  {
  tmp = compat_ptr(arg);
  uioc = (struct usbdevfs_ioctl32 *)tmp;
  tmp___0 = current_thread_info();
  __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (uioc),
            "g" (12L), "rm" (tmp___0->addr_limit.seg));
  tmp___1 = ldv__builtin_expect(flag == 0UL, 1L);
  if (tmp___1 == 0L) {
    return (-14);
  } else {
    __gu_err = 0;
    switch (4UL) {
    case 1UL: 
    __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovb %2,%b1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorb %b1,%b1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err),
                         "=q" (__gu_val): "m" (*((struct __large_struct *)(& uioc->ifno))),
                         "i" (-14), "0" (__gu_err));
    goto ldv_35410;
    case 2UL: 
    __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovw %2,%w1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorw %w1,%w1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err),
                         "=r" (__gu_val): "m" (*((struct __large_struct *)(& uioc->ifno))),
                         "i" (-14), "0" (__gu_err));
    goto ldv_35410;
    case 4UL: 
    __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovl %2,%k1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorl %k1,%k1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err),
                         "=r" (__gu_val): "m" (*((struct __large_struct *)(& uioc->ifno))),
                         "i" (-14), "0" (__gu_err));
    goto ldv_35410;
    case 8UL: 
    __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovq %2,%1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorq %1,%1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err),
                         "=r" (__gu_val): "m" (*((struct __large_struct *)(& uioc->ifno))),
                         "i" (-14), "0" (__gu_err));
    goto ldv_35410;
    default: 
    tmp___2 = __get_user_bad();
    __gu_val = (unsigned long )tmp___2;
    }
    ldv_35410: 
    ctrl.ifno = (int )__gu_val;
    if (__gu_err != 0) {
      return (-14);
    } else {
      __gu_err___0 = 0;
      switch (4UL) {
      case 1UL: 
      __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovb %2,%b1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorb %b1,%b1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___0),
                           "=q" (__gu_val___0): "m" (*((struct __large_struct *)(& uioc->ioctl_code))),
                           "i" (-14), "0" (__gu_err___0));
      goto ldv_35419;
      case 2UL: 
      __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovw %2,%w1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorw %w1,%w1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___0),
                           "=r" (__gu_val___0): "m" (*((struct __large_struct *)(& uioc->ioctl_code))),
                           "i" (-14), "0" (__gu_err___0));
      goto ldv_35419;
      case 4UL: 
      __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovl %2,%k1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorl %k1,%k1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___0),
                           "=r" (__gu_val___0): "m" (*((struct __large_struct *)(& uioc->ioctl_code))),
                           "i" (-14), "0" (__gu_err___0));
      goto ldv_35419;
      case 8UL: 
      __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovq %2,%1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorq %1,%1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___0),
                           "=r" (__gu_val___0): "m" (*((struct __large_struct *)(& uioc->ioctl_code))),
                           "i" (-14), "0" (__gu_err___0));
      goto ldv_35419;
      default: 
      tmp___3 = __get_user_bad();
      __gu_val___0 = (unsigned long )tmp___3;
      }
      ldv_35419: 
      ctrl.ioctl_code = (int )__gu_val___0;
      if (__gu_err___0 != 0) {
        return (-14);
      } else {
        __gu_err___1 = 0;
        switch (4UL) {
        case 1UL: 
        __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovb %2,%b1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorb %b1,%b1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___1),
                             "=q" (__gu_val___1): "m" (*((struct __large_struct *)(& uioc->data))),
                             "i" (-14), "0" (__gu_err___1));
        goto ldv_35428;
        case 2UL: 
        __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovw %2,%w1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorw %w1,%w1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___1),
                             "=r" (__gu_val___1): "m" (*((struct __large_struct *)(& uioc->data))),
                             "i" (-14), "0" (__gu_err___1));
        goto ldv_35428;
        case 4UL: 
        __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovl %2,%k1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorl %k1,%k1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___1),
                             "=r" (__gu_val___1): "m" (*((struct __large_struct *)(& uioc->data))),
                             "i" (-14), "0" (__gu_err___1));
        goto ldv_35428;
        case 8UL: 
        __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovq %2,%1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorq %1,%1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err___1),
                             "=r" (__gu_val___1): "m" (*((struct __large_struct *)(& uioc->data))),
                             "i" (-14), "0" (__gu_err___1));
        goto ldv_35428;
        default: 
        tmp___4 = __get_user_bad();
        __gu_val___1 = (unsigned long )tmp___4;
        }
        ldv_35428: 
        udata = (unsigned int )__gu_val___1;
        if (__gu_err___1 != 0) {
          return (-14);
        }
      }
    }
  }
  ctrl.data = compat_ptr(udata);
  tmp___5 = proc_ioctl(ps, & ctrl);
  return (tmp___5);
}
}
static int proc_claim_port(struct dev_state *ps , void *arg ) 
{ unsigned int portnum ;
  int rc ;
  int __ret_gu ;
  register unsigned long __val_gu ;
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  pid_t tmp___1 ;

  {
  might_fault();
  __asm__  volatile   ("call __get_user_%P3": "=a" (__ret_gu), "=r" (__val_gu): "0" ((unsigned int *)arg),
                       "i" (4UL));
  portnum = (unsigned int )__val_gu;
  if (__ret_gu != 0) {
    return (-14);
  }
  rc = usb_hub_claim_port(ps->dev, portnum, ps);
  if (rc == 0) {
    if ((int )usbfs_snoop) {
      tmp = get_current();
      tmp___0 = get_current();
      tmp___1 = task_pid_nr(tmp___0);
      _dev_info((struct device  const  *)(& (ps->dev)->dev), "port %d claimed by process %d: %s\n",
                portnum, tmp___1, (char *)(& tmp->comm));
    }
  }
  return (rc);
}
}
static int proc_release_port(struct dev_state *ps , void *arg ) 
{ unsigned int portnum ;
  int __ret_gu ;
  register unsigned long __val_gu ;
  int tmp ;

  {
  might_fault();
  __asm__  volatile   ("call __get_user_%P3": "=a" (__ret_gu), "=r" (__val_gu): "0" ((unsigned int *)arg),
                       "i" (4UL));
  portnum = (unsigned int )__val_gu;
  if (__ret_gu != 0) {
    return (-14);
  }
  tmp = usb_hub_release_port(ps->dev, portnum, ps);
  return (tmp);
}
}
static int proc_get_capabilities(struct dev_state *ps , void *arg ) 
{ __u32 caps ;
  int __ret_pu ;
  __u32 __pu_val ;

  {
  caps = 5U;
  if ((unsigned int )*((unsigned char *)(ps->dev)->bus + 27UL) == 0U) {
    caps |= 2U;
  }
  if (((ps->dev)->bus)->sg_tablesize != 0U) {
    caps |= 8U;
  }
  might_fault();
  __pu_val = caps;
  switch (4UL) {
  case 1UL: 
  __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((__u32 *)arg): "ebx");
  goto ldv_35459;
  case 2UL: 
  __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((__u32 *)arg): "ebx");
  goto ldv_35459;
  case 4UL: 
  __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" ((__u32 *)arg): "ebx");
  goto ldv_35459;
  case 8UL: 
  __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((__u32 *)arg): "ebx");
  goto ldv_35459;
  default: 
  __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" ((__u32 *)arg): "ebx");
  goto ldv_35459;
  }
  ldv_35459: ;
  if (__ret_pu != 0) {
    return (-14);
  }
  return (0);
}
}
static int proc_disconnect_claim(struct dev_state *ps , void *arg ) 
{ struct usbdevfs_disconnect_claim dc ;
  struct usb_interface *intf ;
  unsigned long tmp ;
  struct usb_driver *driver ;
  struct device_driver  const  *__mptr ;
  int tmp___0 ;
  int tmp___1 ;
  struct _ddebug descriptor ;
  long tmp___2 ;
  int tmp___3 ;

  {
  tmp = copy_from_user((void *)(& dc), (void const   *)arg, 264UL);
  if (tmp != 0UL) {
    return (-14);
  }
  intf = usb_ifnum_to_if((struct usb_device  const  *)ps->dev, dc.interface);
  if ((unsigned long )intf == (unsigned long )((struct usb_interface *)0)) {
    return (-22);
  }
  if ((unsigned long )intf->dev.driver != (unsigned long )((struct device_driver *)0)) {
    __mptr = (struct device_driver  const  *)intf->dev.driver;
    driver = (struct usb_driver *)__mptr + 0xffffffffffffff58UL;
    if ((int )dc.flags & 1) {
      tmp___0 = strncmp((char const   *)(& dc.driver), (intf->dev.driver)->name, 256UL);
      if (tmp___0 != 0) {
        return (-16);
      }
    }
    if ((dc.flags & 2U) != 0U) {
      tmp___1 = strncmp((char const   *)(& dc.driver), (intf->dev.driver)->name, 256UL);
      if (tmp___1 == 0) {
        return (-16);
      }
    }
    descriptor.modname = "usbcore";
    descriptor.function = "proc_disconnect_claim";
    descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/devio.c.prepared";
    descriptor.format = "disconnect by usbfs\n";
    descriptor.lineno = 2032U;
    descriptor.flags = 1U;
    tmp___2 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
    if (tmp___2 != 0L) {
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& intf->dev), "disconnect by usbfs\n");
    }
    usb_driver_release_interface(driver, intf);
  }
  tmp___3 = claimintf(ps, dc.interface);
  return (tmp___3);
}
}
static long usbdev_do_ioctl(struct file *file , unsigned int cmd , void *p ) 
{ struct dev_state *ps ;
  struct inode *inode ;
  struct inode *tmp ;
  struct usb_device *dev ;
  int ret ;
  int tmp___0 ;
  compat_uptr_t tmp___1 ;

  {
  ps = (struct dev_state *)file->private_data;
  tmp = file_inode(file);
  inode = tmp;
  dev = ps->dev;
  ret = -25;
  if ((file->f_mode & 2U) == 0U) {
    return (-1L);
  }
  device_lock___4(& dev->dev);
  tmp___0 = connected(ps);
  if (tmp___0 == 0) {
    device_unlock___4(& dev->dev);
    return (-19L);
  }
  switch (cmd) {
  case 3222820096U: ;
  if ((int )usbfs_snoop) {
    _dev_info((struct device  const  *)(& dev->dev), "%s: CONTROL\n", "usbdev_do_ioctl");
  }
  ret = proc_control(ps, p);
  if (ret >= 0) {
    inode->i_mtime = current_kernel_time();
  }
  goto ldv_35487;
  case 3222820098U: ;
  if ((int )usbfs_snoop) {
    _dev_info((struct device  const  *)(& dev->dev), "%s: BULK\n", "usbdev_do_ioctl");
  }
  ret = proc_bulk(ps, p);
  if (ret >= 0) {
    inode->i_mtime = current_kernel_time();
  }
  goto ldv_35487;
  case 2147767555U: ;
  if ((int )usbfs_snoop) {
    _dev_info((struct device  const  *)(& dev->dev), "%s: RESETEP\n", "usbdev_do_ioctl");
  }
  ret = proc_resetep(ps, p);
  if (ret >= 0) {
    inode->i_mtime = current_kernel_time();
  }
  goto ldv_35487;
  case 21780U: ;
  if ((int )usbfs_snoop) {
    _dev_info((struct device  const  *)(& dev->dev), "%s: RESET\n", "usbdev_do_ioctl");
  }
  ret = proc_resetdevice(ps);
  goto ldv_35487;
  case 2147767573U: ;
  if ((int )usbfs_snoop) {
    _dev_info((struct device  const  *)(& dev->dev), "%s: CLEAR_HALT\n", "usbdev_do_ioctl");
  }
  ret = proc_clearhalt(ps, p);
  if (ret >= 0) {
    inode->i_mtime = current_kernel_time();
  }
  goto ldv_35487;
  case 1090802952U: ;
  if ((int )usbfs_snoop) {
    _dev_info((struct device  const  *)(& dev->dev), "%s: GETDRIVER\n", "usbdev_do_ioctl");
  }
  ret = proc_getdriver(ps, p);
  goto ldv_35487;
  case 1074287889U: ;
  if ((int )usbfs_snoop) {
    _dev_info((struct device  const  *)(& dev->dev), "%s: CONNECTINFO\n", "usbdev_do_ioctl");
  }
  ret = proc_connectinfo(ps, p);
  goto ldv_35487;
  case 2148029700U: ;
  if ((int )usbfs_snoop) {
    _dev_info((struct device  const  *)(& dev->dev), "%s: SETINTERFACE\n", "usbdev_do_ioctl");
  }
  ret = proc_setintf(ps, p);
  goto ldv_35487;
  case 2147767557U: ;
  if ((int )usbfs_snoop) {
    _dev_info((struct device  const  *)(& dev->dev), "%s: SETCONFIGURATION\n", "usbdev_do_ioctl");
  }
  ret = proc_setconfig(ps, p);
  goto ldv_35487;
  case 2151175434U: ;
  if ((int )usbfs_snoop) {
    _dev_info((struct device  const  *)(& dev->dev), "%s: SUBMITURB\n", "usbdev_do_ioctl");
  }
  ret = proc_submiturb(ps, p);
  if (ret >= 0) {
    inode->i_mtime = current_kernel_time();
  }
  goto ldv_35487;
  case 3222295808U: ;
  if ((int )usbfs_snoop) {
    _dev_info((struct device  const  *)(& dev->dev), "%s: CONTROL32\n", "usbdev_do_ioctl");
  }
  ret = proc_control_compat(ps, (struct usbdevfs_ctrltransfer32 *)p);
  if (ret >= 0) {
    inode->i_mtime = current_kernel_time();
  }
  goto ldv_35487;
  case 3222295810U: ;
  if ((int )usbfs_snoop) {
    _dev_info((struct device  const  *)(& dev->dev), "%s: BULK32\n", "usbdev_do_ioctl");
  }
  ret = proc_bulk_compat(ps, (struct usbdevfs_bulktransfer32 *)p);
  if (ret >= 0) {
    inode->i_mtime = current_kernel_time();
  }
  goto ldv_35487;
  case 2148029710U: ;
  if ((int )usbfs_snoop) {
    _dev_info((struct device  const  *)(& dev->dev), "%s: DISCSIGNAL32\n", "usbdev_do_ioctl");
  }
  ret = proc_disconnectsignal_compat(ps, p);
  goto ldv_35487;
  case 2150389002U: ;
  if ((int )usbfs_snoop) {
    _dev_info((struct device  const  *)(& dev->dev), "%s: SUBMITURB32\n", "usbdev_do_ioctl");
  }
  ret = proc_submiturb_compat(ps, p);
  if (ret >= 0) {
    inode->i_mtime = current_kernel_time();
  }
  goto ldv_35487;
  case 1074025740U: ;
  if ((int )usbfs_snoop) {
    _dev_info((struct device  const  *)(& dev->dev), "%s: REAPURB32\n", "usbdev_do_ioctl");
  }
  ret = proc_reapurb_compat(ps, p);
  goto ldv_35487;
  case 1074025741U: ;
  if ((int )usbfs_snoop) {
    _dev_info((struct device  const  *)(& dev->dev), "%s: REAPURBNDELAY32\n", "usbdev_do_ioctl");
  }
  ret = proc_reapurbnonblock_compat(ps, p);
  goto ldv_35487;
  case 3222033682U: ;
  if ((int )usbfs_snoop) {
    _dev_info((struct device  const  *)(& dev->dev), "%s: IOCTL32\n", "usbdev_do_ioctl");
  }
  tmp___1 = ptr_to_compat(p);
  ret = proc_ioctl_compat(ps, tmp___1);
  goto ldv_35487;
  case 21771U: ;
  if ((int )usbfs_snoop) {
    _dev_info((struct device  const  *)(& dev->dev), "%s: DISCARDURB\n", "usbdev_do_ioctl");
  }
  ret = proc_unlinkurb(ps, p);
  goto ldv_35487;
  case 1074287884U: ;
  if ((int )usbfs_snoop) {
    _dev_info((struct device  const  *)(& dev->dev), "%s: REAPURB\n", "usbdev_do_ioctl");
  }
  ret = proc_reapurb(ps, p);
  goto ldv_35487;
  case 1074287885U: ;
  if ((int )usbfs_snoop) {
    _dev_info((struct device  const  *)(& dev->dev), "%s: REAPURBNDELAY\n", "usbdev_do_ioctl");
  }
  ret = proc_reapurbnonblock(ps, p);
  goto ldv_35487;
  case 2148553998U: ;
  if ((int )usbfs_snoop) {
    _dev_info((struct device  const  *)(& dev->dev), "%s: DISCSIGNAL\n", "usbdev_do_ioctl");
  }
  ret = proc_disconnectsignal(ps, p);
  goto ldv_35487;
  case 2147767567U: ;
  if ((int )usbfs_snoop) {
    _dev_info((struct device  const  *)(& dev->dev), "%s: CLAIMINTERFACE\n", "usbdev_do_ioctl");
  }
  ret = proc_claiminterface(ps, p);
  goto ldv_35487;
  case 2147767568U: ;
  if ((int )usbfs_snoop) {
    _dev_info((struct device  const  *)(& dev->dev), "%s: RELEASEINTERFACE\n", "usbdev_do_ioctl");
  }
  ret = proc_releaseinterface(ps, p);
  goto ldv_35487;
  case 3222295826U: ;
  if ((int )usbfs_snoop) {
    _dev_info((struct device  const  *)(& dev->dev), "%s: IOCTL\n", "usbdev_do_ioctl");
  }
  ret = proc_ioctl_default(ps, p);
  goto ldv_35487;
  case 2147767576U: ;
  if ((int )usbfs_snoop) {
    _dev_info((struct device  const  *)(& dev->dev), "%s: CLAIM_PORT\n", "usbdev_do_ioctl");
  }
  ret = proc_claim_port(ps, p);
  goto ldv_35487;
  case 2147767577U: ;
  if ((int )usbfs_snoop) {
    _dev_info((struct device  const  *)(& dev->dev), "%s: RELEASE_PORT\n", "usbdev_do_ioctl");
  }
  ret = proc_release_port(ps, p);
  goto ldv_35487;
  case 2147767578U: 
  ret = proc_get_capabilities(ps, p);
  goto ldv_35487;
  case 2164806939U: 
  ret = proc_disconnect_claim(ps, p);
  goto ldv_35487;
  }
  ldv_35487: 
  device_unlock___4(& dev->dev);
  if (ret >= 0) {
    inode->i_atime = current_kernel_time();
  }
  return ((long )ret);
}
}
static long usbdev_ioctl(struct file *file , unsigned int cmd , unsigned long arg ) 
{ int ret ;
  long tmp ;

  {
  tmp = usbdev_do_ioctl(file, cmd, (void *)arg);
  ret = (int )tmp;
  return ((long )ret);
}
}
static long usbdev_compat_ioctl(struct file *file , unsigned int cmd , unsigned long arg ) 
{ int ret ;
  void *tmp ;
  long tmp___0 ;

  {
  tmp = compat_ptr((compat_uptr_t )arg);
  tmp___0 = usbdev_do_ioctl(file, cmd, tmp);
  ret = (int )tmp___0;
  return ((long )ret);
}
}
static unsigned int usbdev_poll(struct file *file , struct poll_table_struct *wait ) 
{ struct dev_state *ps ;
  unsigned int mask ;
  int tmp ;
  int tmp___0 ;

  {
  ps = (struct dev_state *)file->private_data;
  mask = 0U;
  poll_wait(file, & ps->wait, wait);
  if ((file->f_mode & 2U) != 0U) {
    tmp = list_empty((struct list_head  const  *)(& ps->async_completed));
    if (tmp == 0) {
      mask |= 260U;
    }
  }
  tmp___0 = connected(ps);
  if (tmp___0 == 0) {
    mask |= 24U;
  }
  return (mask);
}
}
struct file_operations  const  usbdev_file_operations  = 
     {& __this_module, & usbdev_lseek, & usbdev_read, 0, 0, 0, 0, & usbdev_poll, & usbdev_ioctl,
    & usbdev_compat_ioctl, 0, & usbdev_open, 0, & usbdev_release, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0};
static void usbdev_remove(struct usb_device *udev ) 
{ struct dev_state *ps ;
  struct siginfo sinfo ;
  struct list_head  const  *__mptr ;
  int tmp ;

  {
  goto ldv_35542;
  ldv_35541: 
  __mptr = (struct list_head  const  *)udev->filelist.next;
  ps = (struct dev_state *)__mptr;
  destroy_all_async(ps);
  __wake_up(& ps->wait, 3U, 0, 0);
  list_del_init(& ps->list);
  if (ps->discsignr != 0U) {
    sinfo.si_signo = (int )ps->discsignr;
    sinfo.si_errno = 32;
    sinfo.si_code = -4;
    sinfo._sifields._sigfault._addr = ps->disccontext;
    kill_pid_info_as_cred((int )ps->discsignr, & sinfo, ps->disc_pid, ps->cred, ps->secid);
  }
  ldv_35542: 
  tmp = list_empty((struct list_head  const  *)(& udev->filelist));
  if (tmp == 0) {
    goto ldv_35541;
  }
  return;
}
}
static int usbdev_notify(struct notifier_block *self , unsigned long action , void *dev ) 
{ 

  {
  switch (action) {
  case 1UL: ;
  goto ldv_35550;
  case 2UL: 
  usbdev_remove((struct usb_device *)dev);
  goto ldv_35550;
  }
  ldv_35550: ;
  return (1);
}
}
static struct notifier_block usbdev_nb  =    {& usbdev_notify, 0, 0};
static struct cdev usb_device_cdev  ;
int usb_devio_init(void) 
{ int retval ;

  {
  retval = register_chrdev_region(198180864U, 8192U, "usb_device");
  if (retval != 0) {
    printk("\vUnable to register minors for usb_device\n");
    goto out;
  }
  cdev_init(& usb_device_cdev, & usbdev_file_operations);
  retval = cdev_add(& usb_device_cdev, 198180864U, 8192U);
  if (retval != 0) {
    printk("\vUnable to get usb_device major %d\n", 189);
    goto error_cdev;
  }
  usb_register_notify(& usbdev_nb);
  out: ;
  return (retval);
  error_cdev: 
  unregister_chrdev_region(198180864U, 8192U);
  goto out;
}
}
void usb_devio_cleanup(void) 
{ 

  {
  usb_unregister_notify(& usbdev_nb);
  cdev_del(& usb_device_cdev);
  unregister_chrdev_region(198180864U, 8192U);
  return;
}
}
void ldv_main11_sequence_infinite_withcheck_stateful(void) 
{ struct usb_interface *var_group1 ;
  struct usb_device_id  const  *var_driver_probe_18_p1 ;
  int res_driver_probe_18 ;
  pm_message_t var_driver_suspend_20_p1 ;
  struct file *var_group2 ;
  loff_t var_usbdev_lseek_3_p1 ;
  int var_usbdev_lseek_3_p2 ;
  char *var_usbdev_read_4_p1 ;
  size_t var_usbdev_read_4_p2 ;
  loff_t *var_usbdev_read_4_p3 ;
  ssize_t res_usbdev_read_4 ;
  struct poll_table_struct *var_group3 ;
  unsigned int var_usbdev_ioctl_66_p1 ;
  unsigned long var_usbdev_ioctl_66_p2 ;
  unsigned int var_usbdev_compat_ioctl_67_p1 ;
  unsigned long var_usbdev_compat_ioctl_67_p2 ;
  struct inode *var_group4 ;
  int res_usbdev_open_29 ;
  struct notifier_block *var_group5 ;
  unsigned long var_usbdev_notify_70_p1 ;
  void *var_usbdev_notify_70_p2 ;
  int ldv_s_usbfs_driver_usb_driver ;
  int ldv_s_usbdev_file_operations_file_operations ;
  int tmp ;
  int tmp___0 ;

  {
  ldv_s_usbfs_driver_usb_driver = 0;
  ldv_s_usbdev_file_operations_file_operations = 0;
  LDV_IN_INTERRUPT = 1;
  ldv_initialize();
  goto ldv_35618;
  ldv_35617: 
  tmp = __VERIFIER_nondet_int();
  switch (tmp) {
  case 0: ;
  if (ldv_s_usbfs_driver_usb_driver == 0) {
    res_driver_probe_18 = driver_probe(var_group1, var_driver_probe_18_p1);
    ldv_check_return_value(res_driver_probe_18);
    ldv_check_return_value_probe(res_driver_probe_18);
    if (res_driver_probe_18 != 0) {
      goto ldv_module_exit;
    }
    ldv_s_usbfs_driver_usb_driver ++;
  }
  goto ldv_35604;
  case 1: ;
  if (ldv_s_usbfs_driver_usb_driver == 1) {
    ldv_handler_precall();
    driver_suspend(var_group1, var_driver_suspend_20_p1);
    ldv_s_usbfs_driver_usb_driver ++;
  }
  goto ldv_35604;
  case 2: ;
  if (ldv_s_usbfs_driver_usb_driver == 2) {
    ldv_handler_precall();
    driver_resume(var_group1);
    ldv_s_usbfs_driver_usb_driver ++;
  }
  goto ldv_35604;
  case 3: ;
  if (ldv_s_usbfs_driver_usb_driver == 3) {
    ldv_handler_precall();
    driver_disconnect(var_group1);
    ldv_s_usbfs_driver_usb_driver = 0;
  }
  goto ldv_35604;
  case 4: ;
  if (ldv_s_usbdev_file_operations_file_operations == 0) {
    ldv_handler_precall();
    res_usbdev_open_29 = usbdev_open(var_group4, var_group2);
    ldv_check_return_value(res_usbdev_open_29);
    if (res_usbdev_open_29 != 0) {
      goto ldv_module_exit;
    }
    ldv_s_usbdev_file_operations_file_operations ++;
  }
  goto ldv_35604;
  case 5: ;
  if (ldv_s_usbdev_file_operations_file_operations == 1) {
    ldv_handler_precall();
    res_usbdev_read_4 = usbdev_read(var_group2, var_usbdev_read_4_p1, var_usbdev_read_4_p2,
                                    var_usbdev_read_4_p3);
    ldv_check_return_value((int )res_usbdev_read_4);
    if (res_usbdev_read_4 < 0L) {
      goto ldv_module_exit;
    }
    ldv_s_usbdev_file_operations_file_operations ++;
  }
  goto ldv_35604;
  case 6: ;
  if (ldv_s_usbdev_file_operations_file_operations == 2) {
    ldv_handler_precall();
    usbdev_lseek(var_group2, var_usbdev_lseek_3_p1, var_usbdev_lseek_3_p2);
    ldv_s_usbdev_file_operations_file_operations ++;
  }
  goto ldv_35604;
  case 7: ;
  if (ldv_s_usbdev_file_operations_file_operations == 3) {
    ldv_handler_precall();
    usbdev_release(var_group4, var_group2);
    ldv_s_usbdev_file_operations_file_operations = 0;
  }
  goto ldv_35604;
  case 8: 
  ldv_handler_precall();
  usbdev_poll(var_group2, var_group3);
  goto ldv_35604;
  case 9: 
  ldv_handler_precall();
  usbdev_ioctl(var_group2, var_usbdev_ioctl_66_p1, var_usbdev_ioctl_66_p2);
  goto ldv_35604;
  case 10: 
  ldv_handler_precall();
  usbdev_compat_ioctl(var_group2, var_usbdev_compat_ioctl_67_p1, var_usbdev_compat_ioctl_67_p2);
  goto ldv_35604;
  case 11: 
  ldv_handler_precall();
  usbdev_notify(var_group5, var_usbdev_notify_70_p1, var_usbdev_notify_70_p2);
  goto ldv_35604;
  default: ;
  goto ldv_35604;
  }
  ldv_35604: ;
  ldv_35618: 
  tmp___0 = __VERIFIER_nondet_int();
  if ((tmp___0 != 0 || ldv_s_usbfs_driver_usb_driver != 0) || ldv_s_usbdev_file_operations_file_operations != 0) {
    goto ldv_35617;
  }
  ldv_module_exit: 
  ldv_check_final_state();
  return;
}
}
void ldv_mutex_lock_195(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_lock(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_196(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_lock(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_197(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
int ldv_mutex_trylock_198(struct mutex *ldv_func_arg1 ) 
{ ldv_func_ret_type___2 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
  tmp = mutex_trylock(ldv_func_arg1);
  ldv_func_res = tmp;
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
  return (tmp___0);
  return (ldv_func_res);
}
}
void ldv_mutex_unlock_199(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_200(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_i_mutex_of_inode(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_201(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_i_mutex_of_inode(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_202(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_usbfs_mutex(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_203(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_usbfs_mutex(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
int ldv_mutex_trylock_216(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_214(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_217(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_219(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_213(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_215(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_218(struct mutex *ldv_func_arg1 ) ;
extern int blocking_notifier_chain_register(struct blocking_notifier_head * , struct notifier_block * ) ;
extern int blocking_notifier_chain_unregister(struct blocking_notifier_head * , struct notifier_block * ) ;
extern int blocking_notifier_call_chain(struct blocking_notifier_head * , unsigned long  ,
                                        void * ) ;
void usb_notify_add_device(struct usb_device *udev ) ;
void usb_notify_remove_device(struct usb_device *udev ) ;
static struct blocking_notifier_head usb_notifier_list  =    {{0L, {{{0U}}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "(usb_notifier_list).rwsem.wait_lock",
                                                                   0, 0UL}}, {& usb_notifier_list.rwsem.wait_list,
                                                                              & usb_notifier_list.rwsem.wait_list},
     {0, {0, 0}, "(usb_notifier_list).rwsem", 0, 0UL}}, 0};
void usb_register_notify(struct notifier_block *nb ) 
{ 

  {
  blocking_notifier_chain_register(& usb_notifier_list, nb);
  return;
}
}
void usb_unregister_notify(struct notifier_block *nb ) 
{ 

  {
  blocking_notifier_chain_unregister(& usb_notifier_list, nb);
  return;
}
}
void usb_notify_add_device(struct usb_device *udev ) 
{ 

  {
  blocking_notifier_call_chain(& usb_notifier_list, 1UL, (void *)udev);
  return;
}
}
void usb_notify_remove_device(struct usb_device *udev ) 
{ 

  {
  ldv_mutex_lock_218(& usbfs_mutex);
  blocking_notifier_call_chain(& usb_notifier_list, 2UL, (void *)udev);
  ldv_mutex_unlock_219(& usbfs_mutex);
  return;
}
}
void usb_notify_add_bus(struct usb_bus *ubus ) 
{ 

  {
  blocking_notifier_call_chain(& usb_notifier_list, 3UL, (void *)ubus);
  return;
}
}
void usb_notify_remove_bus(struct usb_bus *ubus ) 
{ 

  {
  blocking_notifier_call_chain(& usb_notifier_list, 4UL, (void *)ubus);
  return;
}
}
void ldv_mutex_lock_213(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_lock(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_214(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_lock(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_215(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
int ldv_mutex_trylock_216(struct mutex *ldv_func_arg1 ) 
{ ldv_func_ret_type___2 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
  tmp = mutex_trylock(ldv_func_arg1);
  ldv_func_res = tmp;
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
  return (tmp___0);
  return (ldv_func_res);
}
}
void ldv_mutex_unlock_217(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_218(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_usbfs_mutex(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_219(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_usbfs_mutex(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
int ldv_mutex_trylock_230(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_228(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_231(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_227(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_229(struct mutex *ldv_func_arg1 ) ;
static int is_rndis(struct usb_interface_descriptor *desc ) 
{ 

  {
  return (((unsigned int )desc->bInterfaceClass == 2U && (unsigned int )desc->bInterfaceSubClass == 2U) && (unsigned int )desc->bInterfaceProtocol == 255U);
}
}
static int is_activesync(struct usb_interface_descriptor *desc ) 
{ 

  {
  return (((unsigned int )desc->bInterfaceClass == 239U && (unsigned int )desc->bInterfaceSubClass == 1U) && (unsigned int )desc->bInterfaceProtocol == 1U);
}
}
int usb_choose_configuration(struct usb_device *udev ) 
{ int i ;
  int num_configs ;
  int insufficient_power ;
  struct usb_host_config *c ;
  struct usb_host_config *best ;
  bool tmp ;
  struct usb_interface_descriptor *desc ;
  unsigned int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  struct _ddebug descriptor ;
  char const   *tmp___4 ;
  long tmp___5 ;
  char const   *tmp___6 ;

  {
  insufficient_power = 0;
  tmp = usb_device_is_owned(udev);
  if ((int )tmp) {
    return (0);
  }
  best = 0;
  c = udev->config;
  num_configs = (int )udev->descriptor.bNumConfigurations;
  i = 0;
  goto ldv_27930;
  ldv_27929: 
  desc = 0;
  if ((unsigned int )c->desc.bNumInterfaces != 0U) {
    desc = & ((struct usb_host_interface *)(& (c->intf_cache[0])->altsetting))->desc;
  }
  tmp___0 = usb_get_max_power(udev, c);
  if (tmp___0 > (unsigned int )udev->bus_mA) {
    insufficient_power ++;
    goto ldv_27927;
  }
  if ((i == 0 && num_configs > 1) && (unsigned long )desc != (unsigned long )((struct usb_interface_descriptor *)0)) {
    tmp___1 = is_rndis(desc);
    if (tmp___1 != 0) {
      best = c;
    } else {
      tmp___2 = is_activesync(desc);
      if (tmp___2 != 0) {
        best = c;
      } else {
        goto _L;
      }
    }
  } else
  _L: 
  if ((unsigned int )udev->descriptor.bDeviceClass != 255U && ((unsigned long )desc != (unsigned long )((struct usb_interface_descriptor *)0) && (unsigned int )desc->bInterfaceClass != 255U)) {
    best = c;
    goto ldv_27928;
  } else
  if ((unsigned long )best == (unsigned long )((struct usb_host_config *)0)) {
    best = c;
  }
  ldv_27927: 
  i ++;
  c ++;
  ldv_27930: ;
  if (i < num_configs) {
    goto ldv_27929;
  }
  ldv_27928: ;
  if (insufficient_power > 0) {
    tmp___3 = plural(insufficient_power);
    _dev_info((struct device  const  *)(& udev->dev), "rejected %d configuration%s due to insufficient available bus power\n",
              insufficient_power, tmp___3);
  }
  if ((unsigned long )best != (unsigned long )((struct usb_host_config *)0)) {
    i = (int )best->desc.bConfigurationValue;
    descriptor.modname = "usbcore";
    descriptor.function = "usb_choose_configuration";
    descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/generic.c.prepared";
    descriptor.format = "configuration #%d chosen from %d choice%s\n";
    descriptor.lineno = 221U;
    descriptor.flags = 1U;
    tmp___5 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
    if (tmp___5 != 0L) {
      tmp___4 = plural(num_configs);
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& udev->dev), "configuration #%d chosen from %d choice%s\n",
                        i, num_configs, tmp___4);
    }
  } else {
    i = -1;
    tmp___6 = plural(num_configs);
    dev_warn((struct device  const  *)(& udev->dev), "no configuration chosen from %d choice%s\n",
             num_configs, tmp___6);
  }
  return (i);
}
}
static int generic_probe(struct usb_device *udev ) 
{ int err ;
  int c ;

  {
  if ((unsigned int )*((unsigned char *)udev + 1588UL) == 0U) {
    dev_err((struct device  const  *)(& udev->dev), "Device is not authorized for usage\n");
  } else {
    c = usb_choose_configuration(udev);
    if (c >= 0) {
      err = usb_set_configuration(udev, c);
      if (err != 0 && err != -19) {
        dev_err((struct device  const  *)(& udev->dev), "can\'t set config #%d, error %d\n",
                c, err);
      }
    }
  }
  usb_notify_add_device(udev);
  return (0);
}
}
static void generic_disconnect(struct usb_device *udev ) 
{ 

  {
  usb_notify_remove_device(udev);
  if ((unsigned long )udev->actconfig != (unsigned long )((struct usb_host_config *)0)) {
    usb_set_configuration(udev, -1);
  }
  return;
}
}
static int generic_suspend(struct usb_device *udev , pm_message_t msg ) 
{ int rc ;

  {
  if ((unsigned long )udev->parent == (unsigned long )((struct usb_device *)0)) {
    rc = hcd_bus_suspend(udev, msg);
  } else
  if (msg.event == 1 || msg.event == 8) {
    rc = 0;
  } else {
    rc = usb_port_suspend(udev, msg);
  }
  return (rc);
}
}
static int generic_resume(struct usb_device *udev , pm_message_t msg ) 
{ int rc ;

  {
  if ((unsigned long )udev->parent == (unsigned long )((struct usb_device *)0)) {
    rc = hcd_bus_resume(udev, msg);
  } else {
    rc = usb_port_resume(udev, msg);
  }
  return (rc);
}
}
struct usb_device_driver usb_generic_driver  =    {"usb", & generic_probe, & generic_disconnect, & generic_suspend, & generic_resume,
    {{0, 0, 0, 0, (_Bool)0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 0}, 1U};
int main(void) 
{ struct usb_device *var_group1 ;
  int res_generic_probe_4 ;
  pm_message_t var_generic_suspend_6_p1 ;
  pm_message_t var_generic_resume_7_p1 ;
  int ldv_s_usb_generic_driver_usb_device_driver ;
  int tmp ;
  int tmp___0 ;

  {
  ldv_s_usb_generic_driver_usb_device_driver = 0;
  LDV_IN_INTERRUPT = 1;
  ldv_initialize();
  goto ldv_27981;
  ldv_27980: 
  tmp = __VERIFIER_nondet_int();
  switch (tmp) {
  case 0: ;
  if (ldv_s_usb_generic_driver_usb_device_driver == 0) {
    res_generic_probe_4 = generic_probe(var_group1);
    ldv_check_return_value(res_generic_probe_4);
    ldv_check_return_value_probe(res_generic_probe_4);
    if (res_generic_probe_4 != 0) {
      goto ldv_module_exit;
    }
    ldv_s_usb_generic_driver_usb_device_driver ++;
  }
  goto ldv_27975;
  case 1: ;
  if (ldv_s_usb_generic_driver_usb_device_driver == 1) {
    ldv_handler_precall();
    generic_disconnect(var_group1);
    ldv_s_usb_generic_driver_usb_device_driver = 0;
  }
  goto ldv_27975;
  case 2: 
  ldv_handler_precall();
  generic_suspend(var_group1, var_generic_suspend_6_p1);
  goto ldv_27975;
  case 3: 
  ldv_handler_precall();
  generic_resume(var_group1, var_generic_resume_7_p1);
  goto ldv_27975;
  default: ;
  goto ldv_27975;
  }
  ldv_27975: ;
  ldv_27981: 
  tmp___0 = __VERIFIER_nondet_int();
  if (tmp___0 != 0 || ldv_s_usb_generic_driver_usb_device_driver != 0) {
    goto ldv_27980;
  }
  ldv_module_exit: 
  ldv_check_final_state();
  return;
}
}
void ldv_mutex_lock_227(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_lock(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_228(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_lock(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_229(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
int ldv_mutex_trylock_230(struct mutex *ldv_func_arg1 ) 
{ ldv_func_ret_type___2 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
  tmp = mutex_trylock(ldv_func_arg1);
  ldv_func_res = tmp;
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
  return (tmp___0);
  return (ldv_func_res);
}
}
void ldv_mutex_unlock_231(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
int ldv_mutex_trylock_240(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_238(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_241(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_237(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_239(struct mutex *ldv_func_arg1 ) ;
static struct usb_device_id  const  usb_quirk_list[32U]  = 
  {      {3U, 516U, 24613U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      2UL}, 
        {3U, 1008U, 1793U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      1UL}, 
        {3U, 1054U, 12320U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      2UL}, 
        {3U, 1118U, 1904U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      2UL}, 
        {3U, 1133U, 2241U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      2UL}, 
        {3U, 1133U, 2242U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      2UL}, 
        {3U, 1133U, 2243U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      2UL}, 
        {3U, 1133U, 2245U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      2UL}, 
        {3U, 1133U, 2246U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      2UL}, 
        {3U, 1133U, 2247U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      2UL}, 
        {3U, 1133U, 49442U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      64UL}, 
        {3U, 1137U, 341U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      2UL}, 
        {3U, 1204U, 1318U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      8UL}, 
        {3U, 1240U, 12U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      8UL}, 
        {3U, 1256U, 26113U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      8UL}, 
        {3U, 1410U, 7U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      2UL}, 
        {3U, 1410U, 39U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      2UL}, 
        {3U, 1452U, 538U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      2UL}, 
        {3U, 1592U, 2579U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      1UL}, 
        {3U, 1699U, 6U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      8UL}, 
        {3U, 1784U, 2052U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      2UL}, 
        {3U, 1784U, 12293U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      2UL}, 
        {3U, 1891U, 402U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      2UL}, 
        {3U, 2284U, 4096U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      2UL}, 
        {3U, 2342U, 13107U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      8UL}, 
        {3U, 2417U, 8192U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      4UL}, 
        {3U, 2652U, 8225U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      2UL}, 
        {3U, 4310U, 8704U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      1UL}, 
        {3U, 5398U, 34344U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      2UL}, 
        {3U, 6408U, 4885U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      32UL}, 
        {3U, 32902U, 61861U, (unsigned short)0, (unsigned short)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, 2UL}, 
        {(unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0,
      (unsigned short)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}};
static struct usb_device_id  const  usb_interface_quirk_list[2U]  = {      {897U, 1133U, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, 14U, 1U, 0U, (unsigned char)0, 2UL}, 
        {(unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0,
      (unsigned short)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}};
static bool usb_match_any_interface(struct usb_device *udev , struct usb_device_id  const  *id ) 
{ unsigned int i ;
  struct usb_host_config *cfg ;
  unsigned int j ;
  struct usb_interface_cache *cache ;
  struct usb_host_interface *intf ;
  int tmp ;

  {
  i = 0U;
  goto ldv_27520;
  ldv_27519: 
  cfg = udev->config + (unsigned long )i;
  j = 0U;
  goto ldv_27517;
  ldv_27516: 
  cache = cfg->intf_cache[j];
  if (cache->num_altsetting == 0U) {
    goto ldv_27515;
  }
  intf = (struct usb_host_interface *)(& cache->altsetting);
  tmp = usb_match_one_id_intf(udev, intf, id);
  if (tmp != 0) {
    return (1);
  }
  ldv_27515: 
  j ++;
  ldv_27517: ;
  if ((unsigned int )cfg->desc.bNumInterfaces > j) {
    goto ldv_27516;
  }
  i ++;
  ldv_27520: ;
  if ((unsigned int )udev->descriptor.bNumConfigurations > i) {
    goto ldv_27519;
  }
  return (0);
}
}
static u32 __usb_detect_quirks(struct usb_device *udev , struct usb_device_id  const  *id ) 
{ u32 quirks ;
  int tmp ;
  bool tmp___0 ;
  int tmp___1 ;

  {
  quirks = 0U;
  goto ldv_27529;
  ldv_27528: 
  tmp = usb_match_device(udev, id);
  if (tmp == 0) {
    goto ldv_27527;
  }
  if (((int )id->match_flags & 896) != 0) {
    tmp___0 = usb_match_any_interface(udev, id);
    if (tmp___0) {
      tmp___1 = 0;
    } else {
      tmp___1 = 1;
    }
    if (tmp___1) {
      goto ldv_27527;
    }
  }
  quirks = (u32 )id->driver_info | quirks;
  ldv_27527: 
  id ++;
  ldv_27529: ;
  if ((unsigned int )((unsigned short )id->match_flags) != 0U) {
    goto ldv_27528;
  }
  return (quirks);
}
}
void usb_detect_quirks(struct usb_device *udev ) 
{ struct _ddebug descriptor ;
  long tmp ;

  {
  udev->quirks = __usb_detect_quirks(udev, (struct usb_device_id  const  *)(& usb_quirk_list));
  if (udev->quirks != 0U) {
    descriptor.modname = "usbcore";
    descriptor.function = "usb_detect_quirks";
    descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/quirks.c.prepared";
    descriptor.format = "USB quirks for this device: %x\n";
    descriptor.lineno = 273U;
    descriptor.flags = 1U;
    tmp = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
    if (tmp != 0L) {
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& udev->dev), "USB quirks for this device: %x\n",
                        udev->quirks);
    }
  }
  if ((udev->quirks & 16U) == 0U) {
    udev->persist_enabled = 1U;
  }
  return;
}
}
void usb_detect_interface_quirks(struct usb_device *udev ) 
{ u32 quirks ;
  struct _ddebug descriptor ;
  long tmp ;

  {
  quirks = __usb_detect_quirks(udev, (struct usb_device_id  const  *)(& usb_interface_quirk_list));
  if (quirks == 0U) {
    return;
  }
  descriptor.modname = "usbcore";
  descriptor.function = "usb_detect_interface_quirks";
  descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/quirks.c.prepared";
  descriptor.format = "USB interface quirks for this device: %x\n";
  descriptor.lineno = 294U;
  descriptor.flags = 1U;
  tmp = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
  if (tmp != 0L) {
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& udev->dev), "USB interface quirks for this device: %x\n",
                      quirks);
  }
  udev->quirks |= quirks;
  return;
}
}
void ldv_mutex_lock_237(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_lock(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_238(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_lock(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_239(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
int ldv_mutex_trylock_240(struct mutex *ldv_func_arg1 ) 
{ ldv_func_ret_type___2 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
  tmp = mutex_trylock(ldv_func_arg1);
  ldv_func_res = tmp;
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
  return (tmp___0);
  return (ldv_func_res);
}
}
void ldv_mutex_unlock_241(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
int ldv_mutex_trylock_250(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_248(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_251(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_253(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_254(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_256(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_247(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_249(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_252(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_255(struct mutex *ldv_func_arg1 ) ;
 static struct thread_info *current_thread_info___0(void) 
{ struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
  switch (8UL) {
  case 1UL: 
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6304;
  case 2UL: 
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6304;
  case 4UL: 
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6304;
  case 8UL: 
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6304;
  default: 
  __bad_percpu_size();
  }
  ldv_6304: 
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
  return (ti);
}
}
 static void device_lock___5(struct device *dev ) 
{ 

  {
  ldv_mutex_lock_249(& dev->mutex);
  return;
}
}
 static void device_unlock___5(struct device *dev ) 
{ 

  {
  ldv_mutex_unlock_251(& dev->mutex);
  return;
}
}
void usbfs_conn_disc_event(void) ;
static char const   format_topo[85U]  = 
  {      '\n',      'T',      ':',      ' ', 
        ' ',      'B',      'u',      's', 
        '=',      '%',      '2',      '.', 
        '2',      'd',      ' ',      'L', 
        'e',      'v',      '=',      '%', 
        '2',      '.',      '2',      'd', 
        ' ',      'P',      'r',      'n', 
        't',      '=',      '%',      '2', 
        '.',      '2',      'd',      ' ', 
        'P',      'o',      'r',      't', 
        '=',      '%',      '2',      '.', 
        '2',      'd',      ' ',      'C', 
        'n',      't',      '=',      '%', 
        '2',      '.',      '2',      'd', 
        ' ',      'D',      'e',      'v', 
        '#',      '=',      '%',      '3', 
        'd',      ' ',      'S',      'p', 
        'd',      '=',      '%',      '-', 
        '4',      's',      ' ',      'M', 
        'x',      'C',      'h',      '=', 
        '%',      '2',      'd',      '\n', 
        '\000'};
static char const   format_string_manufacturer[25U]  = 
  {      'S',      ':',      ' ',      ' ', 
        'M',      'a',      'n',      'u', 
        'f',      'a',      'c',      't', 
        'u',      'r',      'e',      'r', 
        '=',      '%',      '.',      '1', 
        '0',      '0',      's',      '\n', 
        '\000'};
static char const   format_string_product[20U]  = 
  {      'S',      ':',      ' ',      ' ', 
        'P',      'r',      'o',      'd', 
        'u',      'c',      't',      '=', 
        '%',      '.',      '1',      '0', 
        '0',      's',      '\n',      '\000'};
static char const   format_string_serialnumber[25U]  = 
  {      'S',      ':',      ' ',      ' ', 
        'S',      'e',      'r',      'i', 
        'a',      'l',      'N',      'u', 
        'm',      'b',      'e',      'r', 
        '=',      '%',      '.',      '1', 
        '0',      '0',      's',      '\n', 
        '\000'};
static char const   format_bandwidth[50U]  = 
  {      'B',      ':',      ' ',      ' ', 
        'A',      'l',      'l',      'o', 
        'c',      '=',      '%',      '3', 
        'd',      '/',      '%',      '3', 
        'd',      ' ',      'u',      's', 
        ' ',      '(',      '%',      '2', 
        'd',      '%',      '%',      ')', 
        ',',      ' ',      '#',      'I', 
        'n',      't',      '=',      '%', 
        '3',      'd',      ',',      ' ', 
        '#',      'I',      's',      'o', 
        '=',      '%',      '3',      'd', 
        '\n',      '\000'};
static char const   format_device1[71U]  = 
  {      'D',      ':',      ' ',      ' ', 
        'V',      'e',      'r',      '=', 
        '%',      '2',      'x',      '.', 
        '%',      '0',      '2',      'x', 
        ' ',      'C',      'l',      's', 
        '=',      '%',      '0',      '2', 
        'x',      '(',      '%',      '-', 
        '5',      's',      ')',      ' ', 
        'S',      'u',      'b',      '=', 
        '%',      '0',      '2',      'x', 
        ' ',      'P',      'r',      'o', 
        't',      '=',      '%',      '0', 
        '2',      'x',      ' ',      'M', 
        'x',      'P',      'S',      '=', 
        '%',      '2',      'd',      ' ', 
        '#',      'C',      'f',      'g', 
        's',      '=',      '%',      '3', 
        'd',      '\n',      '\000'};
static char const   format_device2[42U]  = 
  {      'P',      ':',      ' ',      ' ', 
        'V',      'e',      'n',      'd', 
        'o',      'r',      '=',      '%', 
        '0',      '4',      'x',      ' ', 
        'P',      'r',      'o',      'd', 
        'I',      'D',      '=',      '%', 
        '0',      '4',      'x',      ' ', 
        'R',      'e',      'v',      '=', 
        '%',      '2',      'x',      '.', 
        '%',      '0',      '2',      'x', 
        '\n',      '\000'};
static char const   format_config[45U]  = 
  {      'C',      ':',      '%',      'c', 
        ' ',      '#',      'I',      'f', 
        's',      '=',      '%',      '2', 
        'd',      ' ',      'C',      'f', 
        'g',      '#',      '=',      '%', 
        '2',      'd',      ' ',      'A', 
        't',      'r',      '=',      '%', 
        '0',      '2',      'x',      ' ', 
        'M',      'x',      'P',      'w', 
        'r',      '=',      '%',      '3', 
        'd',      'm',      'A',      '\n', 
        '\000'};
static char const   format_iad[64U]  = 
  {      'A',      ':',      ' ',      ' ', 
        'F',      'i',      'r',      's', 
        't',      'I',      'f',      '#', 
        '=',      '%',      '2',      'd', 
        ' ',      'I',      'f',      'C', 
        'o',      'u',      'n',      't', 
        '=',      '%',      '2',      'd', 
        ' ',      'C',      'l',      's', 
        '=',      '%',      '0',      '2', 
        'x',      '(',      '%',      '-', 
        '5',      's',      ')',      ' ', 
        'S',      'u',      'b',      '=', 
        '%',      '0',      '2',      'x', 
        ' ',      'P',      'r',      'o', 
        't',      '=',      '%',      '0', 
        '2',      'x',      '\n',      '\000'};
static char const   format_iface[75U]  = 
  {      'I',      ':',      '%',      'c', 
        ' ',      'I',      'f',      '#', 
        '=',      '%',      '2',      'd', 
        ' ',      'A',      'l',      't', 
        '=',      '%',      '2',      'd', 
        ' ',      '#',      'E',      'P', 
        's',      '=',      '%',      '2', 
        'd',      ' ',      'C',      'l', 
        's',      '=',      '%',      '0', 
        '2',      'x',      '(',      '%', 
        '-',      '5',      's',      ')', 
        ' ',      'S',      'u',      'b', 
        '=',      '%',      '0',      '2', 
        'x',      ' ',      'P',      'r', 
        'o',      't',      '=',      '%', 
        '0',      '2',      'x',      ' ', 
        'D',      'r',      'i',      'v', 
        'e',      'r',      '=',      '%', 
        's',      '\n',      '\000'};
static char const   format_endpt[51U]  = 
  {      'E',      ':',      ' ',      ' ', 
        'A',      'd',      '=',      '%', 
        '0',      '2',      'x',      '(', 
        '%',      'c',      ')',      ' ', 
        'A',      't',      'r',      '=', 
        '%',      '0',      '2',      'x', 
        '(',      '%',      '-',      '4', 
        's',      ')',      ' ',      'M', 
        'x',      'P',      'S',      '=', 
        '%',      '4',      'd',      ' ', 
        'I',      'v',      'l',      '=', 
        '%',      'd',      '%',      'c', 
        's',      '\n',      '\000'};
static struct device_connect_event device_event  =    {{1}, {{{{{{0U}}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "device_event.wait.lock",
                                                                      0, 0UL}}}},
          {& device_event.wait.task_list, & device_event.wait.task_list}}};
static struct class_info  const  clas_info[18U]  = 
  {      {0, (char *)">ifc"}, 
        {1, (char *)"audio"}, 
        {2, (char *)"comm."}, 
        {3, (char *)"HID"}, 
        {5, (char *)"PID"}, 
        {6, (char *)"still"}, 
        {7, (char *)"print"}, 
        {8, (char *)"stor."}, 
        {9, (char *)"hub"}, 
        {10, (char *)"data"}, 
        {11, (char *)"scard"}, 
        {13, (char *)"c-sec"}, 
        {14, (char *)"video"}, 
        {224, (char *)"wlcon"}, 
        {239, (char *)"misc"}, 
        {254, (char *)"app."}, 
        {255, (char *)"vend."}, 
        {-1, (char *)"unk."}};
void usbfs_conn_disc_event(void) 
{ 

  {
  atomic_add(2, & device_event.count);
  __wake_up(& device_event.wait, 3U, 1, 0);
  return;
}
}
static char const   *class_decode(int class ) 
{ int ix ;

  {
  ix = 0;
  goto ldv_32052;
  ldv_32051: ;
  if ((int )clas_info[ix].class == class) {
    goto ldv_32050;
  }
  ix ++;
  ldv_32052: ;
  if ((int )clas_info[ix].class != -1) {
    goto ldv_32051;
  }
  ldv_32050: ;
  return ((char const   *)clas_info[ix].class_name);
}
}
static char *usb_dump_endpoint_descriptor(int speed , char *start , char *end , struct usb_endpoint_descriptor  const  *desc ) 
{ char dir ;
  char unit ;
  char *type ;
  unsigned int interval ;
  unsigned int bandwidth ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  unsigned int tmp___4 ;

  {
  bandwidth = 1U;
  if ((unsigned long )start > (unsigned long )end) {
    return (start);
  }
  tmp = usb_endpoint_dir_in(desc);
  if (tmp != 0) {
    dir = 73;
  } else {
    dir = 79;
  }
  if (speed == 3) {
    tmp___0 = usb_endpoint_maxp(desc);
    switch (tmp___0 & 6144) {
    case 2048: 
    bandwidth = 2U;
    goto ldv_32065;
    case 4096: 
    bandwidth = 3U;
    goto ldv_32065;
    }
    ldv_32065: ;
  }
  tmp___1 = usb_endpoint_type(desc);
  switch (tmp___1) {
  case 0: 
  type = (char *)"Ctrl";
  if (speed == 3) {
    interval = (unsigned int )desc->bInterval;
  } else {
    interval = 0U;
  }
  dir = 66;
  goto ldv_32068;
  case 1: 
  type = (char *)"Isoc";
  interval = (unsigned int )(1 << ((int )desc->bInterval + -1));
  goto ldv_32068;
  case 2: 
  type = (char *)"Bulk";
  if (speed == 3 && (int )((signed char )dir) == 79) {
    interval = (unsigned int )desc->bInterval;
  } else {
    interval = 0U;
  }
  goto ldv_32068;
  case 3: 
  type = (char *)"Int.";
  if (speed == 3 || speed == 5) {
    interval = (unsigned int )(1 << ((int )desc->bInterval + -1));
  } else {
    interval = (unsigned int )desc->bInterval;
  }
  goto ldv_32068;
  default: ;
  return (start);
  }
  ldv_32068: 
  if (speed == 3 || speed == 5) {
    tmp___4 = 125U;
  } else {
    tmp___4 = 1000U;
  }
  interval = tmp___4 * interval;
  if (interval % 1000U != 0U) {
    unit = 117;
  } else {
    unit = 109;
    interval /= 1000U;
  }
  tmp___2 = usb_endpoint_maxp(desc);
  tmp___3 = sprintf(start, (char const   *)(& format_endpt), (int )desc->bEndpointAddress,
                    (int )dir, (int )desc->bmAttributes, type, ((unsigned int )tmp___2 & 2047U) * bandwidth,
                    interval, (int )unit);
  start += (unsigned long )tmp___3;
  return (start);
}
}
static char *usb_dump_interface_descriptor(char *start , char *end , struct usb_interface_cache  const  *intfc ,
                                           struct usb_interface  const  *iface , int setno ) 
{ struct usb_interface_descriptor  const  *desc ;
  char const   *driver_name ;
  int active ;
  char const   *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  driver_name = "";
  active = 0;
  if ((unsigned long )start > (unsigned long )end) {
    return (start);
  }
  desc = & intfc->altsetting[setno].desc;
  if ((unsigned long )iface != (unsigned long )((struct usb_interface  const  *)0)) {
    if ((unsigned long )iface->dev.driver != (unsigned long )((struct device_driver *)0)) {
      driver_name = (iface->dev.driver)->name;
    } else {
      driver_name = "(none)";
    }
    active = (unsigned long )((struct usb_interface_descriptor  const  *)(& (iface->cur_altsetting)->desc)) == (unsigned long )desc;
  }
  tmp = class_decode((int const   )desc->bInterfaceClass);
  if (active != 0) {
    tmp___1 = 42;
  } else {
    tmp___1 = 32;
  }
  tmp___0 = sprintf(start, (char const   *)(& format_iface), tmp___1, (int )desc->bInterfaceNumber,
                    (int )desc->bAlternateSetting, (int )desc->bNumEndpoints, (int )desc->bInterfaceClass,
                    tmp, (int )desc->bInterfaceSubClass, (int )desc->bInterfaceProtocol,
                    driver_name);
  start += (unsigned long )tmp___0;
  return (start);
}
}
static char *usb_dump_interface(int speed , char *start , char *end , struct usb_interface_cache  const  *intfc ,
                                struct usb_interface  const  *iface , int setno ) 
{ struct usb_host_interface  const  *desc ;
  int i ;

  {
  desc = (struct usb_host_interface  const  *)(& intfc->altsetting) + (unsigned long )setno;
  start = usb_dump_interface_descriptor(start, end, intfc, iface, setno);
  i = 0;
  goto ldv_32094;
  ldv_32093: ;
  if ((unsigned long )start > (unsigned long )end) {
    return (start);
  }
  start = usb_dump_endpoint_descriptor(speed, start, end, (struct usb_endpoint_descriptor  const  *)(& (desc->endpoint + (unsigned long )i)->desc));
  i ++;
  ldv_32094: ;
  if ((int )desc->desc.bNumEndpoints > i) {
    goto ldv_32093;
  }
  return (start);
}
}
static char *usb_dump_iad_descriptor(char *start , char *end , struct usb_interface_assoc_descriptor  const  *iad ) 
{ char const   *tmp ;
  int tmp___0 ;

  {
  if ((unsigned long )start > (unsigned long )end) {
    return (start);
  }
  tmp = class_decode((int const   )iad->bFunctionClass);
  tmp___0 = sprintf(start, (char const   *)(& format_iad), (int )iad->bFirstInterface,
                    (int )iad->bInterfaceCount, (int )iad->bFunctionClass, tmp, (int )iad->bFunctionSubClass,
                    (int )iad->bFunctionProtocol);
  start += (unsigned long )tmp___0;
  return (start);
}
}
static char *usb_dump_config_descriptor(char *start , char *end , struct usb_config_descriptor  const  *desc ,
                                        int active , int speed ) 
{ int mul ;
  int tmp ;
  int tmp___0 ;

  {
  if ((unsigned long )start > (unsigned long )end) {
    return (start);
  }
  if (speed == 5) {
    mul = 8;
  } else {
    mul = 2;
  }
  if (active != 0) {
    tmp___0 = 42;
  } else {
    tmp___0 = 32;
  }
  tmp = sprintf(start, (char const   *)(& format_config), tmp___0, (int )desc->bNumInterfaces,
                (int )desc->bConfigurationValue, (int )desc->bmAttributes, (int )desc->bMaxPower * mul);
  start += (unsigned long )tmp;
  return (start);
}
}
static char *usb_dump_config(int speed , char *start , char *end , struct usb_host_config  const  *config ,
                             int active ) 
{ int i ;
  int j ;
  struct usb_interface_cache *intfc ;
  struct usb_interface *interface ;
  int tmp ;

  {
  if ((unsigned long )start > (unsigned long )end) {
    return (start);
  }
  if ((unsigned long )config == (unsigned long )((struct usb_host_config  const  *)0)) {
    tmp = sprintf(start, "(null Cfg. desc.)\n");
    return (start + (unsigned long )tmp);
  }
  start = usb_dump_config_descriptor(start, end, & config->desc, active, speed);
  i = 0;
  goto ldv_32122;
  ldv_32121: ;
  if ((unsigned long )config->intf_assoc[i] == (unsigned long )((struct usb_interface_assoc_descriptor *)0)) {
    goto ldv_32120;
  }
  start = usb_dump_iad_descriptor(start, end, (struct usb_interface_assoc_descriptor  const  *)config->intf_assoc[i]);
  i ++;
  ldv_32122: ;
  if (i <= 15) {
    goto ldv_32121;
  }
  ldv_32120: 
  i = 0;
  goto ldv_32127;
  ldv_32126: 
  intfc = config->intf_cache[i];
  interface = config->interface[i];
  j = 0;
  goto ldv_32124;
  ldv_32123: ;
  if ((unsigned long )start > (unsigned long )end) {
    return (start);
  }
  start = usb_dump_interface(speed, start, end, (struct usb_interface_cache  const  *)intfc,
                             (struct usb_interface  const  *)interface, j);
  j ++;
  ldv_32124: ;
  if ((unsigned int )j < intfc->num_altsetting) {
    goto ldv_32123;
  }
  i ++;
  ldv_32127: ;
  if ((int )config->desc.bNumInterfaces > i) {
    goto ldv_32126;
  }
  return (start);
}
}
static char *usb_dump_device_descriptor(char *start , char *end , struct usb_device_descriptor  const  *desc ) 
{ u16 bcdUSB ;
  u16 bcdDevice ;
  char const   *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  bcdUSB = desc->bcdUSB;
  bcdDevice = desc->bcdDevice;
  if ((unsigned long )start > (unsigned long )end) {
    return (start);
  }
  tmp = class_decode((int const   )desc->bDeviceClass);
  tmp___0 = sprintf(start, (char const   *)(& format_device1), (int )bcdUSB >> 8,
                    (int )bcdUSB & 255, (int )desc->bDeviceClass, tmp, (int )desc->bDeviceSubClass,
                    (int )desc->bDeviceProtocol, (int )desc->bMaxPacketSize0, (int )desc->bNumConfigurations);
  start += (unsigned long )tmp___0;
  if ((unsigned long )start > (unsigned long )end) {
    return (start);
  }
  tmp___1 = sprintf(start, (char const   *)(& format_device2), (int )desc->idVendor,
                    (int )desc->idProduct, (int )bcdDevice >> 8, (int )bcdDevice & 255);
  start += (unsigned long )tmp___1;
  return (start);
}
}
static char *usb_dump_device_strings(char *start , char *end , struct usb_device *dev ) 
{ int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  if ((unsigned long )start > (unsigned long )end) {
    return (start);
  }
  if ((unsigned long )dev->manufacturer != (unsigned long )((char *)0)) {
    tmp = sprintf(start, (char const   *)(& format_string_manufacturer), dev->manufacturer);
    start += (unsigned long )tmp;
  }
  if ((unsigned long )start > (unsigned long )end) {
    goto out;
  }
  if ((unsigned long )dev->product != (unsigned long )((char *)0)) {
    tmp___0 = sprintf(start, (char const   *)(& format_string_product), dev->product);
    start += (unsigned long )tmp___0;
  }
  if ((unsigned long )start > (unsigned long )end) {
    goto out;
  }
  if ((unsigned long )dev->serial != (unsigned long )((char *)0)) {
    tmp___1 = sprintf(start, (char const   *)(& format_string_serialnumber), dev->serial);
    start += (unsigned long )tmp___1;
  }
  out: ;
  return (start);
}
}
static char *usb_dump_desc(char *start , char *end , struct usb_device *dev ) 
{ int i ;

  {
  if ((unsigned long )start > (unsigned long )end) {
    return (start);
  }
  start = usb_dump_device_descriptor(start, end, (struct usb_device_descriptor  const  *)(& dev->descriptor));
  if ((unsigned long )start > (unsigned long )end) {
    return (start);
  }
  start = usb_dump_device_strings(start, end, dev);
  i = 0;
  goto ldv_32149;
  ldv_32148: ;
  if ((unsigned long )start > (unsigned long )end) {
    return (start);
  }
  start = usb_dump_config((int )dev->speed, start, end, (struct usb_host_config  const  *)dev->config + (unsigned long )i,
                          (unsigned long )(dev->config + (unsigned long )i) == (unsigned long )dev->actconfig);
  i ++;
  ldv_32149: ;
  if ((int )dev->descriptor.bNumConfigurations > i) {
    goto ldv_32148;
  }
  return (start);
}
}
static ssize_t usb_device_dump(char **buffer , size_t *nbytes , loff_t *skip_bytes ,
                               loff_t *file_offset , struct usb_device *usbdev , struct usb_bus *bus ,
                               int level , int index , int count ) 
{ int chix ;
  int ret ;
  int cnt ;
  int parent_devnum ;
  char *pages_start ;
  char *data_end ;
  char *speed ;
  unsigned int length ;
  ssize_t total_written ;
  struct usb_device *childdev ;
  unsigned long tmp ;
  int tmp___0 ;
  int max ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  ssize_t tmp___4 ;

  {
  cnt = 0;
  parent_devnum = 0;
  total_written = 0L;
  childdev = 0;
  if (*nbytes == 0UL) {
    return (0L);
  }
  if (level > 6) {
    return (0L);
  }
  tmp = __get_free_pages(16U, 1U);
  pages_start = (char *)tmp;
  if ((unsigned long )pages_start == (unsigned long )((char *)0)) {
    return (-12L);
  }
  if ((unsigned long )usbdev->parent != (unsigned long )((struct usb_device *)0) && (usbdev->parent)->devnum != -1) {
    parent_devnum = (usbdev->parent)->devnum;
  }
  switch ((unsigned int )usbdev->speed) {
  case 1U: 
  speed = (char *)"1.5";
  goto ldv_32173;
  case 0U: ;
  case 2U: 
  speed = (char *)"12";
  goto ldv_32173;
  case 4U: ;
  case 3U: 
  speed = (char *)"480";
  goto ldv_32173;
  case 5U: 
  speed = (char *)"5000";
  goto ldv_32173;
  default: 
  speed = (char *)"??";
  }
  ldv_32173: 
  tmp___0 = sprintf(pages_start, (char const   *)(& format_topo), bus->busnum, level,
                    parent_devnum, index, count, usbdev->devnum, speed, usbdev->maxchild);
  data_end = pages_start + (unsigned long )tmp___0;
  if (level == 0) {
    if ((unsigned int )usbdev->speed == 3U || (unsigned int )usbdev->speed == 5U) {
      max = 800;
    } else {
      max = 900;
    }
    tmp___1 = sprintf(data_end, (char const   *)(& format_bandwidth), bus->bandwidth_allocated,
                      max, (bus->bandwidth_allocated * 100 + max / 2) / max, bus->bandwidth_int_reqs,
                      bus->bandwidth_isoc_reqs);
    data_end += (unsigned long )tmp___1;
  }
  data_end = usb_dump_desc(data_end, pages_start + 7936U, usbdev);
  if ((unsigned long )(pages_start + 7936U) < (unsigned long )data_end) {
    tmp___2 = sprintf(data_end, "(truncated)\n");
    data_end += (unsigned long )tmp___2;
  }
  length = (unsigned int )((long )data_end) - (unsigned int )((long )pages_start);
  if ((loff_t )length > *skip_bytes) {
    length -= (unsigned int )*skip_bytes;
    if ((size_t )length > *nbytes) {
      length = (unsigned int )*nbytes;
    }
    tmp___3 = copy_to_user((void *)*buffer, (void const   *)pages_start + (unsigned long )*skip_bytes,
                           length);
    if (tmp___3 != 0) {
      free_pages((unsigned long )pages_start, 1U);
      return (-14L);
    }
    *nbytes -= (size_t )length;
    *file_offset += (loff_t )length;
    total_written = (ssize_t )length + total_written;
    *buffer += (unsigned long )length;
    *skip_bytes = 0LL;
  } else {
    *skip_bytes -= (loff_t )length;
  }
  free_pages((unsigned long )pages_start, 1U);
  chix = 1;
  childdev = usb_hub_find_child(usbdev, chix);
  goto ldv_32183;
  ldv_32182: ;
  if (! ((unsigned long )childdev == (unsigned long )((struct usb_device *)0))) {
    device_lock___5(& childdev->dev);
    cnt ++;
    tmp___4 = usb_device_dump(buffer, nbytes, skip_bytes, file_offset, childdev, bus,
                              level + 1, chix + -1, cnt);
    ret = (int )tmp___4;
    device_unlock___5(& childdev->dev);
    if (ret == -14) {
      return (total_written);
    }
    total_written = (ssize_t )ret + total_written;
  }
  chix ++;
  childdev = usb_hub_find_child(usbdev, chix);
  ldv_32183: ;
  if (usbdev->maxchild >= chix) {
    goto ldv_32182;
  }
  return (total_written);
}
}
static ssize_t usb_device_read(struct file *file , char *buf , size_t nbytes , loff_t *ppos ) 
{ struct usb_bus *bus ;
  ssize_t ret ;
  ssize_t total_written ;
  loff_t skip_bytes ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp ;
  long tmp___0 ;
  struct list_head  const  *__mptr ;
  struct usb_hcd *tmp___1 ;
  struct list_head  const  *__mptr___0 ;

  {
  total_written = 0L;
  skip_bytes = *ppos;
  if (*ppos < 0LL) {
    return (-22L);
  }
  if (nbytes == 0UL) {
    return (0L);
  }
  tmp = current_thread_info___0();
  __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (buf),
            "g" ((long )nbytes), "rm" (tmp->addr_limit.seg));
  tmp___0 = ldv__builtin_expect(flag == 0UL, 1L);
  if (tmp___0 == 0L) {
    return (-14L);
  }
  ldv_mutex_lock_252(& usb_bus_list_lock);
  __mptr = (struct list_head  const  *)usb_bus_list.next;
  bus = (struct usb_bus *)__mptr + 0xffffffffffffffb8UL;
  goto ldv_32204;
  ldv_32203: 
  tmp___1 = bus_to_hcd(bus);
  if ((unsigned int )*((unsigned char *)tmp___1 + 408UL) == 0U) {
    goto ldv_32202;
  }
  device_lock___5(& (bus->root_hub)->dev);
  ret = usb_device_dump(& buf, & nbytes, & skip_bytes, ppos, bus->root_hub, bus, 0,
                        0, 0);
  device_unlock___5(& (bus->root_hub)->dev);
  if (ret < 0L) {
    ldv_mutex_unlock_253(& usb_bus_list_lock);
    return (ret);
  }
  total_written += ret;
  ldv_32202: 
  __mptr___0 = (struct list_head  const  *)bus->bus_list.next;
  bus = (struct usb_bus *)__mptr___0 + 0xffffffffffffffb8UL;
  ldv_32204: ;
  if ((unsigned long )(& bus->bus_list) != (unsigned long )(& usb_bus_list)) {
    goto ldv_32203;
  }
  ldv_mutex_unlock_254(& usb_bus_list_lock);
  return (total_written);
}
}
static unsigned int usb_device_poll(struct file *file , struct poll_table_struct *wait ) 
{ unsigned int event_count ;
  int tmp ;

  {
  poll_wait(file, & device_event.wait, wait);
  tmp = atomic_read((atomic_t const   *)(& device_event.count));
  event_count = (unsigned int )tmp;
  if (file->f_version != (u64 )event_count) {
    file->f_version = (u64 )event_count;
    return (65U);
  }
  return (0U);
}
}
static loff_t usb_device_lseek(struct file *file , loff_t offset , int orig ) 
{ loff_t ret ;
  struct inode *tmp ;
  struct inode *tmp___0 ;

  {
  tmp = file_inode(file);
  ldv_mutex_lock_255(& tmp->i_mutex);
  switch (orig) {
  case 0: 
  file->f_pos = offset;
  ret = file->f_pos;
  goto ldv_32218;
  case 1: 
  file->f_pos += offset;
  ret = file->f_pos;
  goto ldv_32218;
  case 2: ;
  default: 
  ret = -22LL;
  }
  ldv_32218: 
  tmp___0 = file_inode(file);
  ldv_mutex_unlock_256(& tmp___0->i_mutex);
  return (ret);
}
}
struct file_operations  const  usbfs_devices_fops  = 
     {0, & usb_device_lseek, & usb_device_read, 0, 0, 0, 0, & usb_device_poll, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
void ldv_main15_sequence_infinite_withcheck_stateful(void) 
{ struct file *var_group1 ;
  loff_t var_usb_device_lseek_16_p1 ;
  int var_usb_device_lseek_16_p2 ;
  char *var_usb_device_read_14_p1 ;
  size_t var_usb_device_read_14_p2 ;
  loff_t *var_usb_device_read_14_p3 ;
  ssize_t res_usb_device_read_14 ;
  struct poll_table_struct *var_group2 ;
  int ldv_s_usbfs_devices_fops_file_operations ;
  int tmp ;
  int tmp___0 ;

  {
  ldv_s_usbfs_devices_fops_file_operations = 0;
  LDV_IN_INTERRUPT = 1;
  ldv_initialize();
  goto ldv_32255;
  ldv_32254: 
  tmp = __VERIFIER_nondet_int();
  switch (tmp) {
  case 0: ;
  if (ldv_s_usbfs_devices_fops_file_operations == 0) {
    ldv_handler_precall();
    res_usb_device_read_14 = usb_device_read(var_group1, var_usb_device_read_14_p1,
                                             var_usb_device_read_14_p2, var_usb_device_read_14_p3);
    ldv_check_return_value((int )res_usb_device_read_14);
    if (res_usb_device_read_14 < 0L) {
      goto ldv_module_exit;
    }
    ldv_s_usbfs_devices_fops_file_operations ++;
  }
  goto ldv_32250;
  case 1: ;
  if (ldv_s_usbfs_devices_fops_file_operations == 1) {
    ldv_handler_precall();
    usb_device_lseek(var_group1, var_usb_device_lseek_16_p1, var_usb_device_lseek_16_p2);
    ldv_s_usbfs_devices_fops_file_operations = 0;
  }
  goto ldv_32250;
  case 2: 
  ldv_handler_precall();
  usb_device_poll(var_group1, var_group2);
  goto ldv_32250;
  default: ;
  goto ldv_32250;
  }
  ldv_32250: ;
  ldv_32255: 
  tmp___0 = __VERIFIER_nondet_int();
  if (tmp___0 != 0 || ldv_s_usbfs_devices_fops_file_operations != 0) {
    goto ldv_32254;
  }
  ldv_module_exit: 
  ldv_check_final_state();
  return;
}
}
void ldv_mutex_lock_247(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_lock(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_248(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_lock(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_249(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
int ldv_mutex_trylock_250(struct mutex *ldv_func_arg1 ) 
{ ldv_func_ret_type___2 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
  tmp = mutex_trylock(ldv_func_arg1);
  ldv_func_res = tmp;
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
  return (tmp___0);
  return (ldv_func_res);
}
}
void ldv_mutex_unlock_251(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_252(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_usb_bus_list_lock(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_253(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_usb_bus_list_lock(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_254(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_usb_bus_list_lock(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_255(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_i_mutex_of_inode(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_256(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_i_mutex_of_inode(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
int ldv_mutex_trylock_270(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_268(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_271(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_267(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_269(struct mutex *ldv_func_arg1 ) ;
extern int dev_pm_qos_expose_flags(struct device * , s32  ) ;
extern int pm_generic_runtime_idle(struct device * ) ;
struct device_type usb_port_device_type ;
 static int hub_port_debounce_be_connected(struct usb_hub *hub , int port1 ) 
{ int tmp ;

  {
  tmp = hub_port_debounce(hub, port1, 1);
  return (tmp);
}
}
static struct attribute_group  const  *port_dev_group[2U] ;
static ssize_t show_port_connect_type(struct device *dev , struct device_attribute *attr ,
                                      char *buf ) 
{ struct usb_port *port_dev ;
  struct device  const  *__mptr ;
  char *result ;
  int tmp ;

  {
  __mptr = (struct device  const  *)dev;
  port_dev = (struct usb_port *)__mptr + 0xfffffffffffffff8UL;
  switch ((unsigned int )port_dev->connect_type) {
  case 1U: 
  result = (char *)"hotplug";
  goto ldv_28145;
  case 2U: 
  result = (char *)"hardwired";
  goto ldv_28145;
  case 3U: 
  result = (char *)"not used";
  goto ldv_28145;
  default: 
  result = (char *)"unknown";
  goto ldv_28145;
  }
  ldv_28145: 
  tmp = sprintf(buf, "%s\n", result);
  return ((ssize_t )tmp);
}
}
static struct device_attribute dev_attr_connect_type  =    {{"connect_type", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                          {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & show_port_connect_type, 0};
static struct attribute *port_dev_attrs[2U]  = {      & dev_attr_connect_type.attr,      0};
static struct attribute_group port_dev_attr_grp  =    {0, 0, (struct attribute **)(& port_dev_attrs)};
static struct attribute_group  const  *port_dev_group[2U]  = {      (struct attribute_group  const  *)(& port_dev_attr_grp),      0};
static void usb_port_device_release(struct device *dev ) 
{ struct usb_port *port_dev ;
  struct device  const  *__mptr ;

  {
  __mptr = (struct device  const  *)dev;
  port_dev = (struct usb_port *)__mptr + 0xfffffffffffffff8UL;
  kfree((void const   *)port_dev);
  return;
}
}
static int usb_port_runtime_resume(struct device *dev ) 
{ struct usb_port *port_dev ;
  struct device  const  *__mptr ;
  struct usb_device *hdev ;
  struct device  const  *__mptr___0 ;
  struct usb_interface *intf ;
  struct device  const  *__mptr___1 ;
  struct usb_hub *hub ;
  struct usb_hub *tmp ;
  int port1 ;
  int retval ;
  struct _ddebug descriptor ;
  long tmp___0 ;

  {
  __mptr = (struct device  const  *)dev;
  port_dev = (struct usb_port *)__mptr + 0xfffffffffffffff8UL;
  __mptr___0 = (struct device  const  *)(dev->parent)->parent;
  hdev = (struct usb_device *)__mptr___0 + 0xffffffffffffff78UL;
  __mptr___1 = (struct device  const  *)dev->parent;
  intf = (struct usb_interface *)__mptr___1 + 0xffffffffffffffd0UL;
  tmp = usb_hub_to_struct_hub(hdev);
  hub = tmp;
  port1 = (int )port_dev->portnum;
  if ((unsigned long )hub == (unsigned long )((struct usb_hub *)0)) {
    return (-22);
  }
  usb_autopm_get_interface(intf);
  set_bit((unsigned int )port1, (unsigned long volatile   *)(& hub->busy_bits));
  retval = usb_hub_set_port_power(hdev, port1, 1);
  if ((unsigned long )port_dev->child != (unsigned long )((struct usb_device *)0) && retval == 0) {
    retval = hub_port_debounce_be_connected(hub, port1);
    if (retval < 0) {
      descriptor.modname = "usbcore";
      descriptor.function = "usb_port_runtime_resume";
      descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/port.c.prepared";
      descriptor.format = "can\'t get reconnection after setting port  power on, status %d\n";
      descriptor.lineno = 170U;
      descriptor.flags = 1U;
      tmp___0 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
      if (tmp___0 != 0L) {
        __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& port_dev->dev),
                          "can\'t get reconnection after setting port  power on, status %d\n",
                          retval);
      }
      goto out;
    }
    usb_clear_port_feature(hdev, port1, 17);
    retval = 0;
  }
  out: 
  clear_bit(port1, (unsigned long volatile   *)(& hub->busy_bits));
  usb_autopm_put_interface(intf);
  return (retval);
}
}
static int usb_port_runtime_suspend(struct device *dev ) 
{ struct usb_port *port_dev ;
  struct device  const  *__mptr ;
  struct usb_device *hdev ;
  struct device  const  *__mptr___0 ;
  struct usb_interface *intf ;
  struct device  const  *__mptr___1 ;
  struct usb_hub *hub ;
  struct usb_hub *tmp ;
  int port1 ;
  int retval ;
  enum pm_qos_flags_status tmp___0 ;

  {
  __mptr = (struct device  const  *)dev;
  port_dev = (struct usb_port *)__mptr + 0xfffffffffffffff8UL;
  __mptr___0 = (struct device  const  *)(dev->parent)->parent;
  hdev = (struct usb_device *)__mptr___0 + 0xffffffffffffff78UL;
  __mptr___1 = (struct device  const  *)dev->parent;
  intf = (struct usb_interface *)__mptr___1 + 0xffffffffffffffd0UL;
  tmp = usb_hub_to_struct_hub(hdev);
  hub = tmp;
  port1 = (int )port_dev->portnum;
  if ((unsigned long )hub == (unsigned long )((struct usb_hub *)0)) {
    return (-22);
  }
  tmp___0 = dev_pm_qos_flags(& port_dev->dev, 1);
  if ((int )tmp___0 == 2) {
    return (-11);
  }
  usb_autopm_get_interface(intf);
  set_bit((unsigned int )port1, (unsigned long volatile   *)(& hub->busy_bits));
  retval = usb_hub_set_port_power(hdev, port1, 0);
  usb_clear_port_feature(hdev, port1, 16);
  usb_clear_port_feature(hdev, port1, 17);
  clear_bit(port1, (unsigned long volatile   *)(& hub->busy_bits));
  usb_autopm_put_interface(intf);
  return (retval);
}
}
static struct dev_pm_ops  const  usb_port_pm_ops  = 
     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, & usb_port_runtime_suspend,
    & usb_port_runtime_resume, & pm_generic_runtime_idle};
struct device_type usb_port_device_type  =    {"usb_port", 0, 0, 0, & usb_port_device_release, & usb_port_pm_ops};
int usb_hub_create_port_device(struct usb_hub *hub , int port1 ) 
{ struct usb_port *port_dev ;
  int retval ;
  void *tmp ;
  int tmp___0 ;

  {
  port_dev = 0;
  tmp = kzalloc(1160UL, 208U);
  port_dev = (struct usb_port *)tmp;
  if ((unsigned long )port_dev == (unsigned long )((struct usb_port *)0)) {
    retval = -12;
    goto exit;
  }
  *(hub->ports + ((unsigned long )port1 + 0xffffffffffffffffUL)) = port_dev;
  port_dev->portnum = (u8 )port1;
  port_dev->power_is_on = 1U;
  port_dev->dev.parent = hub->intfdev;
  port_dev->dev.groups = (struct attribute_group  const  **)(& port_dev_group);
  port_dev->dev.type = (struct device_type  const  *)(& usb_port_device_type);
  dev_set_name(& port_dev->dev, "port%d", port1);
  retval = device_register(& port_dev->dev);
  if (retval != 0) {
    goto error_register;
  }
  pm_runtime_set_active(& port_dev->dev);
  tmp___0 = dev_pm_qos_expose_flags(& port_dev->dev, 1);
  if (tmp___0 == 0) {
    pm_runtime_enable(& port_dev->dev);
  }
  device_enable_async_suspend(& port_dev->dev);
  return (0);
  error_register: 
  put_device(& port_dev->dev);
  exit: ;
  return (retval);
}
}
void usb_hub_remove_port_device(struct usb_hub *hub , int port1 ) 
{ 

  {
  device_unregister(& (*(hub->ports + ((unsigned long )port1 + 0xffffffffffffffffUL)))->dev);
  return;
}
}
void ldv_main16_sequence_infinite_withcheck_stateful(void) 
{ struct device *var_group1 ;
  int ldv_s_usb_port_device_type_device_type ;
  int tmp ;
  int tmp___0 ;

  {
  ldv_s_usb_port_device_type_device_type = 0;
  LDV_IN_INTERRUPT = 1;
  ldv_initialize();
  goto ldv_28230;
  ldv_28229: 
  tmp = __VERIFIER_nondet_int();
  switch (tmp) {
  case 0: 
  ldv_handler_precall();
  usb_port_runtime_suspend(var_group1);
  goto ldv_28225;
  case 1: 
  ldv_handler_precall();
  usb_port_runtime_resume(var_group1);
  goto ldv_28225;
  case 2: ;
  if (ldv_s_usb_port_device_type_device_type == 0) {
    ldv_handler_precall();
    usb_port_device_release(var_group1);
    ldv_s_usb_port_device_type_device_type = 0;
  }
  goto ldv_28225;
  default: ;
  goto ldv_28225;
  }
  ldv_28225: ;
  ldv_28230: 
  tmp___0 = __VERIFIER_nondet_int();
  if (tmp___0 != 0 || ldv_s_usb_port_device_type_device_type != 0) {
    goto ldv_28229;
  }
  ldv_check_final_state();
  return;
}
}
void ldv_mutex_lock_267(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_lock(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_268(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_lock(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_269(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
int ldv_mutex_trylock_270(struct mutex *ldv_func_arg1 ) 
{ ldv_func_ret_type___2 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
  tmp = mutex_trylock(ldv_func_arg1);
  ldv_func_res = tmp;
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
  return (tmp___0);
  return (ldv_func_res);
}
}
void ldv_mutex_unlock_271(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
 static int constant_test_bit(unsigned int nr , unsigned long const volatile   *addr ) 
{ 

  {
  return ((int )((unsigned long )*(addr + (unsigned long )(nr / 64U)) >> ((int )nr & 63)) & 1);
}
}
 static void arch_local_irq_enable(void) 
{ unsigned long __edi ;
  unsigned long __esi ;
  unsigned long __edx ;
  unsigned long __ecx ;
  unsigned long __eax ;
  long tmp ;

  {
  __edi = __edi;
  __esi = __esi;
  __edx = __edx;
  __ecx = __ecx;
  __eax = __eax;
  tmp = ldv__builtin_expect((unsigned long )pv_irq_ops.irq_enable.func == (unsigned long )((void *)0),
                            0L);
  if (tmp != 0L) {
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/exper_fp/inst/current/envs/linux-3.10-rc1.tar/linux-3.10-rc1/arch/x86/include/asm/paravirt.h"),
                         "i" (839), "i" (12UL));
    ldv_4809: ;
    goto ldv_4809;
  }
  __asm__  volatile   ("771:\n\tcall *%c2;\n772:\n.pushsection .parainstructions,\"a\"\n .balign 8 \n .quad  771b\n  .byte %c1\n  .byte 772b-771b\n  .short %c3\n.popsection\n": "=a" (__eax): [paravirt_typenum] "i" (47UL),
                       [paravirt_opptr] "i" (& pv_irq_ops.irq_enable.func), [paravirt_clobber] "i" (1): "memory",
                       "cc");
  return;
}
}
int ldv_mutex_trylock_280(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_278(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_281(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_277(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_279(struct mutex *ldv_func_arg1 ) ;
extern struct resource ioport_resource ;
extern struct resource iomem_resource ;
extern struct resource *__request_region(struct resource * , resource_size_t  , resource_size_t  ,
                                         char const   * , int  ) ;
extern void __release_region(struct resource * , resource_size_t  , resource_size_t  ) ;
extern void __suspend_report_result(char const   * , void * , int  ) ;
extern void *ioremap_nocache(resource_size_t  , unsigned long  ) ;
extern void iounmap(void volatile   * ) ;
 static void device_lock___6(struct device *dev ) 
{ 

  {
  ldv_mutex_lock_279(& dev->mutex);
  return;
}
}
 static void device_unlock___6(struct device *dev ) 
{ 

  {
  ldv_mutex_unlock_281(& dev->mutex);
  return;
}
}
extern char const   *pci_power_names[] ;
 static char const   *pci_power_name(pci_power_t state ) 
{ 

  {
  return (pci_power_names[state + 1]);
}
}
extern struct pci_dev *pci_get_device(unsigned int  , unsigned int  , struct pci_dev * ) ;
extern int pci_enable_device(struct pci_dev * ) ;
extern void pci_disable_device(struct pci_dev * ) ;
extern void pci_set_master(struct pci_dev * ) ;
extern int pci_save_state(struct pci_dev * ) ;
extern int pci_prepare_to_sleep(struct pci_dev * ) ;
extern int pci_back_from_sleep(struct pci_dev * ) ;
extern bool pci_dev_run_wake(struct pci_dev * ) ;
 static void *pci_get_drvdata(struct pci_dev *pdev ) 
{ void *tmp ;

  {
  tmp = dev_get_drvdata((struct device  const  *)(& pdev->dev));
  return (tmp);
}
}
 static char const   *pci_name(struct pci_dev  const  *pdev ) 
{ char const   *tmp ;

  {
  tmp = dev_name(& pdev->dev);
  return (tmp);
}
}
extern void synchronize_irq(unsigned int  ) ;
int usb_hcd_pci_probe(struct pci_dev *dev , struct pci_device_id  const  *id ) ;
void usb_hcd_pci_remove(struct pci_dev *dev ) ;
void usb_hcd_pci_shutdown(struct pci_dev *dev ) ;
struct dev_pm_ops  const  usb_hcd_pci_pm_ops ;
static struct rw_semaphore companions_rwsem  =    {0L, {{{0U}}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "companions_rwsem.wait_lock",
                                                                  0, 0UL}}, {& companions_rwsem.wait_list,
                                                                             & companions_rwsem.wait_list},
    {0, {0, 0}, "companions_rwsem", 0, 0UL}};
 static int is_ohci_or_uhci(struct pci_dev *pdev ) 
{ 

  {
  return (pdev->class == 787216U || pdev->class == 787200U);
}
}
static void for_each_companion(struct pci_dev *pdev , struct usb_hcd *hcd , void (*fn)(struct pci_dev * ,
                                                                                       struct usb_hcd * ,
                                                                                       struct pci_dev * ,
                                                                                       struct usb_hcd * ) ) 
{ struct pci_dev *companion ;
  struct usb_hcd *companion_hcd ;
  unsigned int slot ;
  void *tmp ;

  {
  slot = (pdev->devfn >> 3) & 31U;
  companion = 0;
  goto ldv_33716;
  ldv_33717: ;
  if ((unsigned long )companion->bus != (unsigned long )pdev->bus || ((companion->devfn >> 3) & 31U) != slot) {
    goto ldv_33716;
  }
  tmp = pci_get_drvdata(companion);
  companion_hcd = (struct usb_hcd *)tmp;
  if ((unsigned long )companion_hcd == (unsigned long )((struct usb_hcd *)0)) {
    goto ldv_33716;
  }
  (*fn)(pdev, hcd, companion, companion_hcd);
  ldv_33716: 
  companion = pci_get_device(4294967295U, 4294967295U, companion);
  if ((unsigned long )companion != (unsigned long )((struct pci_dev *)0)) {
    goto ldv_33717;
  }
  return;
}
}
static void ehci_pre_add(struct pci_dev *pdev , struct usb_hcd *hcd , struct pci_dev *companion ,
                         struct usb_hcd *companion_hcd ) 
{ struct usb_device *udev ;
  int tmp ;

  {
  tmp = is_ohci_or_uhci(companion);
  if (tmp != 0) {
    udev = companion_hcd->self.root_hub;
    device_lock___6(& udev->dev);
    usb_set_configuration(udev, 0);
  }
  return;
}
}
static void ehci_post_add(struct pci_dev *pdev , struct usb_hcd *hcd , struct pci_dev *companion ,
                          struct usb_hcd *companion_hcd ) 
{ struct usb_device *udev ;
  struct _ddebug descriptor ;
  char const   *tmp ;
  long tmp___0 ;
  void *tmp___1 ;
  int tmp___2 ;

  {
  tmp___2 = is_ohci_or_uhci(companion);
  if (tmp___2 != 0) {
    tmp___1 = dev_get_drvdata((struct device  const  *)(& pdev->dev));
    if ((unsigned long )tmp___1 != (unsigned long )((void *)0)) {
      descriptor.modname = "usbcore";
      descriptor.function = "ehci_post_add";
      descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hcd-pci.c.prepared";
      descriptor.format = "HS companion for %s\n";
      descriptor.lineno = 187U;
      descriptor.flags = 1U;
      tmp___0 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
      if (tmp___0 != 0L) {
        tmp = dev_name((struct device  const  *)(& companion->dev));
        __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& pdev->dev), "HS companion for %s\n",
                          tmp);
      }
      companion_hcd->self.hs_companion = & hcd->self;
    }
    udev = companion_hcd->self.root_hub;
    usb_set_configuration(udev, 1);
    device_unlock___6(& udev->dev);
  }
  return;
}
}
static void non_ehci_add(struct pci_dev *pdev , struct usb_hcd *hcd , struct pci_dev *companion ,
                         struct usb_hcd *companion_hcd ) 
{ struct _ddebug descriptor ;
  char const   *tmp ;
  long tmp___0 ;
  int tmp___1 ;

  {
  tmp___1 = is_ohci_or_uhci(pdev);
  if (tmp___1 != 0 && companion->class == 787232U) {
    descriptor.modname = "usbcore";
    descriptor.function = "non_ehci_add";
    descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hcd-pci.c.prepared";
    descriptor.format = "FS/LS companion for %s\n";
    descriptor.lineno = 205U;
    descriptor.flags = 1U;
    tmp___0 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
    if (tmp___0 != 0L) {
      tmp = dev_name((struct device  const  *)(& companion->dev));
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& pdev->dev), "FS/LS companion for %s\n",
                        tmp);
    }
    hcd->self.hs_companion = & companion_hcd->self;
  }
  return;
}
}
static void ehci_remove(struct pci_dev *pdev , struct usb_hcd *hcd , struct pci_dev *companion ,
                        struct usb_hcd *companion_hcd ) 
{ int tmp ;

  {
  tmp = is_ohci_or_uhci(companion);
  if (tmp != 0) {
    companion_hcd->self.hs_companion = 0;
  }
  return;
}
}
static void ehci_wait_for_companions(struct pci_dev *pdev , struct usb_hcd *hcd ,
                                     struct pci_dev *companion , struct usb_hcd *companion_hcd ) 
{ int tmp ;

  {
  tmp = is_ohci_or_uhci(companion);
  if (tmp != 0) {
    device_pm_wait_for_dev(& pdev->dev, & companion->dev);
  }
  return;
}
}
int usb_hcd_pci_probe(struct pci_dev *dev , struct pci_device_id  const  *id ) 
{ struct hc_driver *driver ;
  struct usb_hcd *hcd ;
  int retval ;
  int hcd_irq ;
  int tmp ;
  int tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  struct _ddebug descriptor ;
  long tmp___3 ;
  struct resource *tmp___4 ;
  struct _ddebug descriptor___0 ;
  long tmp___5 ;
  int region ;
  struct resource *tmp___6 ;
  struct _ddebug descriptor___1 ;
  long tmp___7 ;
  bool tmp___8 ;
  char const   *tmp___9 ;

  {
  hcd_irq = 0;
  tmp = usb_disabled();
  if (tmp != 0) {
    return (-19);
  }
  if ((unsigned long )id == (unsigned long )((struct pci_device_id  const  *)0)) {
    return (-22);
  }
  driver = (struct hc_driver *)id->driver_data;
  if ((unsigned long )driver == (unsigned long )((struct hc_driver *)0)) {
    return (-22);
  }
  tmp___0 = pci_enable_device(dev);
  if (tmp___0 < 0) {
    return (-19);
  }
  dev->current_state = 0;
  if ((driver->flags & 112) != 64) {
    if (dev->irq == 0U) {
      tmp___1 = pci_name((struct pci_dev  const  *)dev);
      dev_err((struct device  const  *)(& dev->dev), "Found HC with no IRQ. Check BIOS/PCI %s setup!\n",
              tmp___1);
      retval = -19;
      goto disable_pci;
    }
    hcd_irq = (int )dev->irq;
  }
  tmp___2 = pci_name((struct pci_dev  const  *)dev);
  hcd = usb_create_hcd((struct hc_driver  const  *)driver, & dev->dev, tmp___2);
  if ((unsigned long )hcd == (unsigned long )((struct usb_hcd *)0)) {
    retval = -12;
    goto disable_pci;
  }
  if (driver->flags & 1) {
    hcd->rsrc_start = dev->resource[0].start;
    if (dev->resource[0].start != 0ULL || dev->resource[0].end != dev->resource[0].start) {
      hcd->rsrc_len = (dev->resource[0].end - dev->resource[0].start) + 1ULL;
    } else {
      hcd->rsrc_len = 0ULL;
    }
    tmp___4 = __request_region(& iomem_resource, hcd->rsrc_start, hcd->rsrc_len, driver->description,
                               0);
    if ((unsigned long )tmp___4 == (unsigned long )((struct resource *)0)) {
      descriptor.modname = "usbcore";
      descriptor.function = "usb_hcd_pci_probe";
      descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hcd-pci.c.prepared";
      descriptor.format = "controller already in use\n";
      descriptor.lineno = 294U;
      descriptor.flags = 1U;
      tmp___3 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
      if (tmp___3 != 0L) {
        __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& dev->dev), "controller already in use\n");
      }
      retval = -16;
      goto put_hcd;
    }
    hcd->regs = ioremap_nocache(hcd->rsrc_start, (unsigned long )hcd->rsrc_len);
    if ((unsigned long )hcd->regs == (unsigned long )((void *)0)) {
      descriptor___0.modname = "usbcore";
      descriptor___0.function = "usb_hcd_pci_probe";
      descriptor___0.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hcd-pci.c.prepared";
      descriptor___0.format = "error mapping memory\n";
      descriptor___0.lineno = 300U;
      descriptor___0.flags = 1U;
      tmp___5 = ldv__builtin_expect((long )descriptor___0.flags & 1L, 0L);
      if (tmp___5 != 0L) {
        __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)(& dev->dev),
                          "error mapping memory\n");
      }
      retval = -14;
      goto release_mem_region;
    }
  } else {
    region = 0;
    goto ldv_33773;
    ldv_33772: ;
    if ((dev->resource[region].flags & 256UL) == 0UL) {
      goto ldv_33770;
    }
    hcd->rsrc_start = dev->resource[region].start;
    if (dev->resource[region].start != 0ULL || dev->resource[region].end != dev->resource[region].start) {
      hcd->rsrc_len = (dev->resource[region].end - dev->resource[region].start) + 1ULL;
    } else {
      hcd->rsrc_len = 0ULL;
    }
    tmp___6 = __request_region(& ioport_resource, hcd->rsrc_start, hcd->rsrc_len,
                               driver->description, 0);
    if ((unsigned long )tmp___6 != (unsigned long )((struct resource *)0)) {
      goto ldv_33771;
    }
    ldv_33770: 
    region ++;
    ldv_33773: ;
    if (region <= 5) {
      goto ldv_33772;
    }
    ldv_33771: ;
    if (region == 6) {
      descriptor___1.modname = "usbcore";
      descriptor___1.function = "usb_hcd_pci_probe";
      descriptor___1.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hcd-pci.c.prepared";
      descriptor___1.format = "no i/o regions available\n";
      descriptor___1.lineno = 321U;
      descriptor___1.flags = 1U;
      tmp___7 = ldv__builtin_expect((long )descriptor___1.flags & 1L, 0L);
      if (tmp___7 != 0L) {
        __dynamic_dev_dbg(& descriptor___1, (struct device  const  *)(& dev->dev),
                          "no i/o regions available\n");
      }
      retval = -16;
      goto put_hcd;
    }
  }
  pci_set_master(dev);
  if (dev->class == 787232U) {
    down_write(& companions_rwsem);
    dev_set_drvdata(& dev->dev, (void *)hcd);
    for_each_companion(dev, hcd, & ehci_pre_add);
    retval = usb_add_hcd(hcd, (unsigned int )hcd_irq, 128UL);
    if (retval != 0) {
      dev_set_drvdata(& dev->dev, 0);
    }
    for_each_companion(dev, hcd, & ehci_post_add);
    up_write(& companions_rwsem);
  } else {
    down_read(& companions_rwsem);
    dev_set_drvdata(& dev->dev, (void *)hcd);
    retval = usb_add_hcd(hcd, (unsigned int )hcd_irq, 128UL);
    if (retval != 0) {
      dev_set_drvdata(& dev->dev, 0);
    } else {
      for_each_companion(dev, hcd, & non_ehci_add);
    }
    up_read(& companions_rwsem);
  }
  if (retval != 0) {
    goto unmap_registers;
  }
  tmp___8 = pci_dev_run_wake(dev);
  if ((int )tmp___8) {
    pm_runtime_put_noidle(& dev->dev);
  }
  return (retval);
  unmap_registers: ;
  if (driver->flags & 1) {
    iounmap((void volatile   *)hcd->regs);
    release_mem_region: 
    __release_region(& iomem_resource, hcd->rsrc_start, hcd->rsrc_len);
  } else {
    __release_region(& ioport_resource, hcd->rsrc_start, hcd->rsrc_len);
  }
  put_hcd: 
  usb_put_hcd(hcd);
  disable_pci: 
  pci_disable_device(dev);
  tmp___9 = pci_name((struct pci_dev  const  *)dev);
  dev_err((struct device  const  *)(& dev->dev), "init %s fail, %d\n", tmp___9, retval);
  return (retval);
}
}
void usb_hcd_pci_remove(struct pci_dev *dev ) 
{ struct usb_hcd *hcd ;
  void *tmp ;
  bool tmp___0 ;

  {
  tmp = pci_get_drvdata(dev);
  hcd = (struct usb_hcd *)tmp;
  if ((unsigned long )hcd == (unsigned long )((struct usb_hcd *)0)) {
    return;
  }
  tmp___0 = pci_dev_run_wake(dev);
  if ((int )tmp___0) {
    pm_runtime_get_noresume(& dev->dev);
  }
  arch_local_irq_disable();
  trace_hardirqs_off();
  usb_hcd_irq(0, (void *)hcd);
  trace_hardirqs_on();
  arch_local_irq_enable();
  if (dev->class == 787232U) {
    down_write(& companions_rwsem);
    for_each_companion(dev, hcd, & ehci_remove);
    usb_remove_hcd(hcd);
    dev_set_drvdata(& dev->dev, 0);
    up_write(& companions_rwsem);
  } else {
    down_read(& companions_rwsem);
    hcd->self.hs_companion = 0;
    usb_remove_hcd(hcd);
    dev_set_drvdata(& dev->dev, 0);
    up_read(& companions_rwsem);
  }
  if ((int )(hcd->driver)->flags & 1) {
    iounmap((void volatile   *)hcd->regs);
    __release_region(& iomem_resource, hcd->rsrc_start, hcd->rsrc_len);
  } else {
    __release_region(& ioport_resource, hcd->rsrc_start, hcd->rsrc_len);
  }
  usb_put_hcd(hcd);
  pci_disable_device(dev);
  return;
}
}
void usb_hcd_pci_shutdown(struct pci_dev *dev ) 
{ struct usb_hcd *hcd ;
  void *tmp ;
  int tmp___0 ;

  {
  tmp = pci_get_drvdata(dev);
  hcd = (struct usb_hcd *)tmp;
  if ((unsigned long )hcd == (unsigned long )((struct usb_hcd *)0)) {
    return;
  }
  tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& hcd->flags));
  if (tmp___0 != 0 && (unsigned long )(hcd->driver)->shutdown != (unsigned long )((void (*)(struct usb_hcd * ))0)) {
    (*((hcd->driver)->shutdown))(hcd);
    pci_disable_device(dev);
  }
  return;
}
}
 static void powermac_set_asic(struct pci_dev *pci_dev , int enable ) 
{ 

  {
  return;
}
}
static int check_root_hub_suspended(struct device *dev ) 
{ struct pci_dev *pci_dev ;
  struct device  const  *__mptr ;
  struct usb_hcd *hcd ;
  void *tmp ;

  {
  __mptr = (struct device  const  *)dev;
  pci_dev = (struct pci_dev *)__mptr + 0xffffffffffffff68UL;
  tmp = pci_get_drvdata(pci_dev);
  hcd = (struct usb_hcd *)tmp;
  if ((hcd->flags & 32UL) != 0UL) {
    dev_warn((struct device  const  *)dev, "Root hub is not suspended\n");
    return (-16);
  }
  if ((unsigned long )hcd->shared_hcd != (unsigned long )((struct usb_hcd *)0)) {
    hcd = hcd->shared_hcd;
    if ((hcd->flags & 32UL) != 0UL) {
      dev_warn((struct device  const  *)dev, "Secondary root hub is not suspended\n");
      return (-16);
    }
  }
  return (0);
}
}
static int suspend_common(struct device *dev , bool do_wakeup ) 
{ struct pci_dev *pci_dev ;
  struct device  const  *__mptr ;
  struct usb_hcd *hcd ;
  void *tmp ;
  int retval ;

  {
  __mptr = (struct device  const  *)dev;
  pci_dev = (struct pci_dev *)__mptr + 0xffffffffffffff68UL;
  tmp = pci_get_drvdata(pci_dev);
  hcd = (struct usb_hcd *)tmp;
  retval = check_root_hub_suspended(dev);
  if (retval != 0) {
    return (retval);
  }
  if ((unsigned long )(hcd->driver)->pci_suspend != (unsigned long )((int (*)(struct usb_hcd * ,
                                                                              bool  ))0) && (hcd->flags & 64UL) == 0UL) {
    if ((int )do_wakeup && (hcd->flags & 16UL) != 0UL) {
      return (-16);
    }
    if (((int )do_wakeup && (unsigned long )hcd->shared_hcd != (unsigned long )((struct usb_hcd *)0)) && ((hcd->shared_hcd)->flags & 16UL) != 0UL) {
      return (-16);
    }
    retval = (*((hcd->driver)->pci_suspend))(hcd, (int )do_wakeup);
    __suspend_report_result("suspend_common", (void *)(hcd->driver)->pci_suspend,
                            retval);
    if (((retval == 0 && (int )do_wakeup) && (hcd->flags & 16UL) != 0UL) || (((retval == 0 && (int )do_wakeup) && (unsigned long )hcd->shared_hcd != (unsigned long )((struct usb_hcd *)0)) && ((hcd->shared_hcd)->flags & 16UL) != 0UL)) {
      if ((unsigned long )(hcd->driver)->pci_resume != (unsigned long )((int (*)(struct usb_hcd * ,
                                                                                 bool  ))0)) {
        (*((hcd->driver)->pci_resume))(hcd, 0);
      }
      retval = -16;
    }
    if (retval != 0) {
      return (retval);
    }
  }
  if ((unsigned int )*((unsigned char *)hcd + 408UL) == 0U) {
    synchronize_irq(pci_dev->irq);
  }
  pci_disable_device(pci_dev);
  return (retval);
}
}
static int resume_common(struct device *dev , int event ) 
{ struct pci_dev *pci_dev ;
  struct device  const  *__mptr ;
  struct usb_hcd *hcd ;
  void *tmp ;
  int retval ;
  struct _ddebug descriptor ;
  long tmp___0 ;

  {
  __mptr = (struct device  const  *)dev;
  pci_dev = (struct pci_dev *)__mptr + 0xffffffffffffff68UL;
  tmp = pci_get_drvdata(pci_dev);
  hcd = (struct usb_hcd *)tmp;
  if ((hcd->flags & 32UL) != 0UL || ((unsigned long )hcd->shared_hcd != (unsigned long )((struct usb_hcd *)0) && ((hcd->shared_hcd)->flags & 32UL) != 0UL)) {
    descriptor.modname = "usbcore";
    descriptor.function = "resume_common";
    descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hcd-pci.c.prepared";
    descriptor.format = "can\'t resume, not suspended!\n";
    descriptor.lineno = 562U;
    descriptor.flags = 1U;
    tmp___0 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
    if (tmp___0 != 0L) {
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)dev, "can\'t resume, not suspended!\n");
    }
    return (0);
  }
  retval = pci_enable_device(pci_dev);
  if (retval < 0) {
    dev_err((struct device  const  *)dev, "can\'t re-enable after resume, %d!\n",
            retval);
    return (retval);
  }
  pci_set_master(pci_dev);
  if ((unsigned long )(hcd->driver)->pci_resume != (unsigned long )((int (*)(struct usb_hcd * ,
                                                                             bool  ))0) && (hcd->flags & 64UL) == 0UL) {
    if (pci_dev->class == 787232U && event != 1040) {
      for_each_companion(pci_dev, hcd, & ehci_wait_for_companions);
    }
    retval = (*((hcd->driver)->pci_resume))(hcd, event == 64);
    if (retval != 0) {
      dev_err((struct device  const  *)dev, "PCI post-resume error %d!\n", retval);
      if ((unsigned long )hcd->shared_hcd != (unsigned long )((struct usb_hcd *)0)) {
        usb_hc_died(hcd->shared_hcd);
      }
      usb_hc_died(hcd);
    }
  }
  return (retval);
}
}
static int hcd_pci_suspend(struct device *dev ) 
{ bool tmp ;
  int tmp___0 ;

  {
  tmp = device_may_wakeup(dev);
  tmp___0 = suspend_common(dev, (int )tmp);
  return (tmp___0);
}
}
static int hcd_pci_suspend_noirq(struct device *dev ) 
{ struct pci_dev *pci_dev ;
  struct device  const  *__mptr ;
  struct usb_hcd *hcd ;
  void *tmp ;
  int retval ;
  struct _ddebug descriptor ;
  bool tmp___0 ;
  long tmp___1 ;
  struct _ddebug descriptor___0 ;
  long tmp___2 ;
  struct _ddebug descriptor___1 ;
  char const   *tmp___3 ;
  long tmp___4 ;

  {
  __mptr = (struct device  const  *)dev;
  pci_dev = (struct pci_dev *)__mptr + 0xffffffffffffff68UL;
  tmp = pci_get_drvdata(pci_dev);
  hcd = (struct usb_hcd *)tmp;
  retval = check_root_hub_suspended(dev);
  if (retval != 0) {
    return (retval);
  }
  pci_save_state(pci_dev);
  if ((hcd->flags & 64UL) != 0UL) {
    device_set_wakeup_enable(dev, 0);
  }
  descriptor.modname = "usbcore";
  descriptor.function = "hcd_pci_suspend_noirq";
  descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hcd-pci.c.prepared";
  descriptor.format = "wakeup: %d\n";
  descriptor.lineno = 623U;
  descriptor.flags = 1U;
  tmp___1 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
  if (tmp___1 != 0L) {
    tmp___0 = device_may_wakeup(dev);
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)dev, "wakeup: %d\n",
                      (int )tmp___0);
  }
  retval = pci_prepare_to_sleep(pci_dev);
  if (retval == -5) {
    descriptor___0.modname = "usbcore";
    descriptor___0.function = "hcd_pci_suspend_noirq";
    descriptor___0.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hcd-pci.c.prepared";
    descriptor___0.format = "--> PCI D0 legacy\n";
    descriptor___0.lineno = 630U;
    descriptor___0.flags = 1U;
    tmp___2 = ldv__builtin_expect((long )descriptor___0.flags & 1L, 0L);
    if (tmp___2 != 0L) {
      __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)dev, "--> PCI D0 legacy\n");
    }
    retval = 0;
  } else
  if (retval == 0) {
    descriptor___1.modname = "usbcore";
    descriptor___1.function = "hcd_pci_suspend_noirq";
    descriptor___1.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hcd-pci.c.prepared";
    descriptor___1.format = "--> PCI %s\n";
    descriptor___1.lineno = 634U;
    descriptor___1.flags = 1U;
    tmp___4 = ldv__builtin_expect((long )descriptor___1.flags & 1L, 0L);
    if (tmp___4 != 0L) {
      tmp___3 = pci_power_name(pci_dev->current_state);
      __dynamic_dev_dbg(& descriptor___1, (struct device  const  *)dev, "--> PCI %s\n",
                        tmp___3);
    }
  } else {
    __suspend_report_result("hcd_pci_suspend_noirq", (void *)(& pci_prepare_to_sleep),
                            retval);
    return (retval);
  }
  powermac_set_asic(pci_dev, 0);
  return (retval);
}
}
static int hcd_pci_resume_noirq(struct device *dev ) 
{ struct pci_dev *pci_dev ;
  struct device  const  *__mptr ;

  {
  __mptr = (struct device  const  *)dev;
  pci_dev = (struct pci_dev *)__mptr + 0xffffffffffffff68UL;
  powermac_set_asic(pci_dev, 1);
  pci_back_from_sleep(pci_dev);
  return (0);
}
}
static int hcd_pci_resume(struct device *dev ) 
{ int tmp ;

  {
  tmp = resume_common(dev, 16);
  return (tmp);
}
}
static int hcd_pci_restore(struct device *dev ) 
{ int tmp ;

  {
  tmp = resume_common(dev, 64);
  return (tmp);
}
}
static int hcd_pci_runtime_suspend(struct device *dev ) 
{ int retval ;
  struct device  const  *__mptr ;
  struct _ddebug descriptor ;
  long tmp ;

  {
  retval = suspend_common(dev, 1);
  if (retval == 0) {
    __mptr = (struct device  const  *)dev;
    powermac_set_asic((struct pci_dev *)__mptr + 0xffffffffffffff68UL, 0);
  }
  descriptor.modname = "usbcore";
  descriptor.function = "hcd_pci_runtime_suspend";
  descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hcd-pci.c.prepared";
  descriptor.format = "hcd_pci_runtime_suspend: %d\n";
  descriptor.lineno = 684U;
  descriptor.flags = 1U;
  tmp = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
  if (tmp != 0L) {
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)dev, "hcd_pci_runtime_suspend: %d\n",
                      retval);
  }
  return (retval);
}
}
static int hcd_pci_runtime_resume(struct device *dev ) 
{ int retval ;
  struct device  const  *__mptr ;
  struct _ddebug descriptor ;
  long tmp ;

  {
  __mptr = (struct device  const  *)dev;
  powermac_set_asic((struct pci_dev *)__mptr + 0xffffffffffffff68UL, 1);
  retval = resume_common(dev, 1040);
  descriptor.modname = "usbcore";
  descriptor.function = "hcd_pci_runtime_resume";
  descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/hcd-pci.c.prepared";
  descriptor.format = "hcd_pci_runtime_resume: %d\n";
  descriptor.lineno = 694U;
  descriptor.flags = 1U;
  tmp = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
  if (tmp != 0L) {
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)dev, "hcd_pci_runtime_resume: %d\n",
                      retval);
  }
  return (retval);
}
}
struct dev_pm_ops  const  usb_hcd_pci_pm_ops  = 
     {0, 0, & hcd_pci_suspend, & hcd_pci_resume, & check_root_hub_suspended, 0, & hcd_pci_suspend,
    & hcd_pci_restore, 0, 0, 0, 0, 0, 0, & hcd_pci_suspend_noirq, & hcd_pci_resume_noirq,
    & check_root_hub_suspended, 0, & hcd_pci_suspend_noirq, & hcd_pci_resume_noirq,
    & hcd_pci_runtime_suspend, & hcd_pci_runtime_resume, 0};
void ldv_main17_sequence_infinite_withcheck_stateful(void) 
{ struct device *var_group1 ;
  int tmp ;
  int tmp___0 ;

  {
  LDV_IN_INTERRUPT = 1;
  ldv_initialize();
  goto ldv_33912;
  ldv_33911: 
  tmp = __VERIFIER_nondet_int();
  switch (tmp) {
  case 0: 
  ldv_handler_precall();
  hcd_pci_suspend(var_group1);
  goto ldv_33902;
  case 1: 
  ldv_handler_precall();
  hcd_pci_suspend_noirq(var_group1);
  goto ldv_33902;
  case 2: 
  ldv_handler_precall();
  hcd_pci_resume_noirq(var_group1);
  goto ldv_33902;
  case 3: 
  ldv_handler_precall();
  hcd_pci_resume(var_group1);
  goto ldv_33902;
  case 4: 
  ldv_handler_precall();
  check_root_hub_suspended(var_group1);
  goto ldv_33902;
  case 5: 
  ldv_handler_precall();
  hcd_pci_restore(var_group1);
  goto ldv_33902;
  case 6: 
  ldv_handler_precall();
  hcd_pci_runtime_suspend(var_group1);
  goto ldv_33902;
  case 7: 
  ldv_handler_precall();
  hcd_pci_runtime_resume(var_group1);
  goto ldv_33902;
  default: ;
  goto ldv_33902;
  }
  ldv_33902: ;
  ldv_33912: 
  tmp___0 = __VERIFIER_nondet_int();
  if (tmp___0 != 0) {
    goto ldv_33911;
  }
  ldv_check_final_state();
  return;
}
}
void ldv_mutex_lock_277(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_lock(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_278(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_lock(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_279(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
int ldv_mutex_trylock_280(struct mutex *ldv_func_arg1 ) 
{ ldv_func_ret_type___2 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
  tmp = mutex_trylock(ldv_func_arg1);
  ldv_func_res = tmp;
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
  return (tmp___0);
  return (ldv_func_res);
}
}
void ldv_mutex_unlock_281(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
int ldv_mutex_trylock_290(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_288(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_291(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_287(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_289(struct mutex *ldv_func_arg1 ) ;
int usb_acpi_set_power_state(struct usb_device *hdev , int index , bool enable ) ;
bool usb_acpi_power_manageable(struct usb_device *hdev , int index ) ;
extern acpi_status acpi_evaluate_object(acpi_handle  , acpi_string  , struct acpi_object_list * ,
                                        struct acpi_buffer * ) ;
extern acpi_status acpi_get_physical_device_location(acpi_handle  , struct acpi_pld_info ** ) ;
extern int acpi_bus_set_power(acpi_handle  , int  ) ;
extern bool acpi_bus_power_manageable(acpi_handle  ) ;
extern int register_acpi_bus_type(struct acpi_bus_type * ) ;
extern int unregister_acpi_bus_type(struct acpi_bus_type * ) ;
extern acpi_handle acpi_get_child(acpi_handle  , u64  ) ;
 static int is_usb_port(struct device  const  *dev ) 
{ 

  {
  return ((unsigned long )((struct device_type  const  *)dev->type) == (unsigned long )((struct device_type  const  *)(& usb_port_device_type)));
}
}
bool usb_acpi_power_manageable(struct usb_device *hdev , int index ) 
{ acpi_handle port_handle ;
  int port1 ;
  bool tmp ;

  {
  port1 = index + 1;
  port_handle = usb_get_hub_port_acpi_handle(hdev, port1);
  if ((unsigned long )port_handle != (unsigned long )((acpi_handle )0)) {
    tmp = acpi_bus_power_manageable(port_handle);
    return (tmp);
  } else {
    return (0);
  }
}
}
int usb_acpi_set_power_state(struct usb_device *hdev , int index , bool enable ) 
{ acpi_handle port_handle ;
  unsigned char state ;
  int port1 ;
  int error ;
  struct _ddebug descriptor ;
  long tmp ;
  struct _ddebug descriptor___0 ;
  long tmp___0 ;

  {
  port1 = index + 1;
  error = -22;
  port_handle = usb_get_hub_port_acpi_handle(hdev, port1);
  if ((unsigned long )port_handle == (unsigned long )((acpi_handle )0)) {
    return (error);
  }
  if ((int )enable) {
    state = 0U;
  } else {
    state = 4U;
  }
  error = acpi_bus_set_power(port_handle, (int )state);
  if (error == 0) {
    descriptor.modname = "usbcore";
    descriptor.function = "usb_acpi_set_power_state";
    descriptor.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/usb-acpi.c.prepared";
    descriptor.format = "The power of hub port %d was set to %d\n";
    descriptor.lineno = 149U;
    descriptor.flags = 1U;
    tmp = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
    if (tmp != 0L) {
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& hdev->dev), "The power of hub port %d was set to %d\n",
                        port1, (int )enable);
    }
  } else {
    descriptor___0.modname = "usbcore";
    descriptor___0.function = "usb_acpi_set_power_state";
    descriptor___0.filename = "/work/ldvuser/exper_fp/work/current--X--drivers--X--defaultlinux-3.10-rc1.tar--X--32_7a--X--cpachecker/linux-3.10-rc1.tar/csd_deg_dscv/7180/dscv_tempdir/dscv/ri/32_7a/drivers/usb/core/usb-acpi.c.prepared";
    descriptor___0.format = "The power of hub port failed to be set\n";
    descriptor___0.lineno = 151U;
    descriptor___0.flags = 1U;
    tmp___0 = ldv__builtin_expect((long )descriptor___0.flags & 1L, 0L);
    if (tmp___0 != 0L) {
      __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)(& hdev->dev),
                        "The power of hub port failed to be set\n");
    }
  }
  return (error);
}
}
static int usb_acpi_check_port_connect_type(struct usb_device *hdev , acpi_handle handle ,
                                            int port1 ) 
{ acpi_status status ;
  struct acpi_buffer buffer ;
  union acpi_object *upc ;
  struct acpi_pld_info *pld ;
  int ret ;

  {
  buffer.length = 0xffffffffffffffffULL;
  buffer.pointer = 0;
  ret = 0;
  status = acpi_get_physical_device_location(handle, & pld);
  if (status != 0U) {
    return (-19);
  }
  status = acpi_evaluate_object(handle, (char *)"_UPC", 0, & buffer);
  upc = (union acpi_object *)buffer.pointer;
  if (((unsigned long )upc == (unsigned long )((union acpi_object *)0) || upc->type != 4U) || upc->package.count != 4U) {
    ret = -22;
    goto out;
  }
  if ((upc->package.elements)->integer.value != 0ULL) {
    if ((unsigned int )pld->user_visible != 0U) {
      usb_set_hub_port_connect_type(hdev, port1, 1);
    } else {
      usb_set_hub_port_connect_type(hdev, port1, 2);
    }
  } else
  if ((unsigned int )pld->user_visible == 0U) {
    usb_set_hub_port_connect_type(hdev, port1, 3);
  }
  out: 
  kfree((void const   *)pld);
  kfree((void const   *)upc);
  return (ret);
}
}
static int usb_acpi_find_device(struct device *dev , acpi_handle **handle ) 
{ struct usb_device *udev ;
  acpi_handle **parent_handle ;
  int port_num ;
  struct device  const  *__mptr ;
  enum usb_port_connect_type type ;
  acpi_handle tmp ;
  char const   *tmp___0 ;
  struct device  const  *__mptr___0 ;
  struct usb_hcd *hcd ;
  struct usb_hcd *tmp___1 ;
  int raw_port_num ;
  acpi_handle tmp___2 ;
  acpi_handle tmp___3 ;
  acpi_handle tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;

  {
  tmp___6 = is_usb_device((struct device  const  *)dev);
  if (tmp___6 != 0) {
    __mptr = (struct device  const  *)dev;
    udev = (struct usb_device *)__mptr + 0xffffffffffffff78UL;
    if ((unsigned long )udev->parent != (unsigned long )((struct usb_device *)0)) {
      type = usb_get_hub_port_connect_type(udev->parent, (int )udev->portnum);
      switch ((unsigned int )type) {
      case 1U: 
      udev->removable = 1;
      goto ldv_33753;
      case 2U: 
      udev->removable = 2;
      goto ldv_33753;
      default: 
      udev->removable = 0;
      goto ldv_33753;
      }
      ldv_33753: ;
      return (-19);
    }
    parent_handle = (acpi_handle **)(dev->parent)->acpi_node.handle;
    tmp = acpi_get_child((acpi_handle )parent_handle, (u64 )udev->portnum);
    *handle = tmp;
    if ((unsigned long )*handle == (unsigned long )((acpi_handle *)0)) {
      return (-19);
    }
    return (0);
  } else {
    tmp___5 = is_usb_port((struct device  const  *)dev);
    if (tmp___5 != 0) {
      tmp___0 = dev_name((struct device  const  *)dev);
      sscanf(tmp___0, "port%d", & port_num);
      __mptr___0 = (struct device  const  *)(dev->parent)->parent;
      udev = (struct usb_device *)__mptr___0 + 0xffffffffffffff78UL;
      if ((unsigned long )udev->parent == (unsigned long )((struct usb_device *)0)) {
        tmp___1 = bus_to_hcd(udev->bus);
        hcd = tmp___1;
        raw_port_num = usb_hcd_find_raw_port_number(hcd, port_num);
        tmp___2 = acpi_get_child(udev->dev.acpi_node.handle, (u64 )raw_port_num);
        *handle = tmp___2;
        if ((unsigned long )*handle == (unsigned long )((acpi_handle *)0)) {
          return (-19);
        }
      } else {
        tmp___3 = usb_get_hub_port_acpi_handle(udev->parent, (int )udev->portnum);
        parent_handle = (acpi_handle **)tmp___3;
        if ((unsigned long )parent_handle == (unsigned long )((acpi_handle **)0)) {
          return (-19);
        }
        tmp___4 = acpi_get_child((acpi_handle )parent_handle, (u64 )port_num);
        *handle = tmp___4;
        if ((unsigned long )*handle == (unsigned long )((acpi_handle *)0)) {
          return (-19);
        }
      }
      usb_acpi_check_port_connect_type(udev, *handle, port_num);
    } else {
      return (-19);
    }
  }
  return (0);
}
}
static bool usb_acpi_bus_match(struct device *dev ) 
{ int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  tmp = is_usb_device((struct device  const  *)dev);
  if (tmp != 0) {
    tmp___1 = 1;
  } else {
    tmp___0 = is_usb_port((struct device  const  *)dev);
    if (tmp___0 != 0) {
      tmp___1 = 1;
    } else {
      tmp___1 = 0;
    }
  }
  return ((bool )tmp___1);
}
}
static struct acpi_bus_type usb_acpi_bus  =    {{0, 0}, "USB", & usb_acpi_bus_match, & usb_acpi_find_device, 0, 0};
int usb_acpi_register(void) 
{ int tmp ;

  {
  tmp = register_acpi_bus_type(& usb_acpi_bus);
  return (tmp);
}
}
void usb_acpi_unregister(void) 
{ 

  {
  unregister_acpi_bus_type(& usb_acpi_bus);
  return;
}
}
void ldv_main18_sequence_infinite_withcheck_stateful(void) 
{ struct device *var_group1 ;
  acpi_handle **var_usb_acpi_find_device_3_p1 ;
  int tmp ;
  int tmp___0 ;

  {
  LDV_IN_INTERRUPT = 1;
  ldv_initialize();
  goto ldv_33793;
  ldv_33792: 
  tmp = __VERIFIER_nondet_int();
  switch (tmp) {
  case 0: 
  ldv_handler_precall();
  usb_acpi_bus_match(var_group1);
  goto ldv_33789;
  case 1: 
  ldv_handler_precall();
  usb_acpi_find_device(var_group1, var_usb_acpi_find_device_3_p1);
  goto ldv_33789;
  default: ;
  goto ldv_33789;
  }
  ldv_33789: ;
  ldv_33793: 
  tmp___0 = __VERIFIER_nondet_int();
  if (tmp___0 != 0) {
    goto ldv_33792;
  }
  ldv_check_final_state();
  return;
}
}
void ldv_mutex_lock_287(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_lock(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_288(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_lock(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_289(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
int ldv_mutex_trylock_290(struct mutex *ldv_func_arg1 ) 
{ ldv_func_ret_type___2 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
  tmp = mutex_trylock(ldv_func_arg1);
  ldv_func_res = tmp;
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
  return (tmp___0);
  return (ldv_func_res);
}
}
void ldv_mutex_unlock_291(struct mutex *ldv_func_arg1 ) 
{ 

  {
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
 static void ldv_error(void)  __attribute__((__no_instrument_function__)) ;
 static void ldv_error(void)  __attribute__((__no_instrument_function__)) ;
 static void ldv_error(void) 
{ 

  {
  ERROR: __VERIFIER_error(); 
  goto ERROR;
}
}
long ldv__builtin_expect(long exp , long c ) 
{ 

  {
  return (exp);
}
}
static int ldv_mutex_bandwidth_mutex_of_usb_hcd  ;
int ldv_mutex_lock_interruptible_bandwidth_mutex_of_usb_hcd(struct mutex *lock ) 
{ int nondetermined ;

  {
  if (! (ldv_mutex_bandwidth_mutex_of_usb_hcd == 1)) {
    ldv_error();
  }
  nondetermined = __VERIFIER_nondet_int();
  if (nondetermined) {
    ldv_mutex_bandwidth_mutex_of_usb_hcd = 2;
    return (0);
  } else {
    return (-4);
  }
}
}
int ldv_mutex_lock_killable_bandwidth_mutex_of_usb_hcd(struct mutex *lock ) 
{ int nondetermined ;

  {
  if (! (ldv_mutex_bandwidth_mutex_of_usb_hcd == 1)) {
    ldv_error();
  }
  nondetermined = __VERIFIER_nondet_int();
  if (nondetermined) {
    ldv_mutex_bandwidth_mutex_of_usb_hcd = 2;
    return (0);
  } else {
    return (-4);
  }
}
}
void ldv_mutex_lock_bandwidth_mutex_of_usb_hcd(struct mutex *lock ) 
{ 

  {
  if (! (ldv_mutex_bandwidth_mutex_of_usb_hcd == 1)) {
    ldv_error();
  }
  ldv_mutex_bandwidth_mutex_of_usb_hcd = 2;
  return;
}
}
int ldv_mutex_trylock_bandwidth_mutex_of_usb_hcd(struct mutex *lock ) 
{ int is_mutex_held_by_another_thread ;

  {
  if (! (ldv_mutex_bandwidth_mutex_of_usb_hcd == 1)) {
    ldv_error();
  }
  is_mutex_held_by_another_thread = __VERIFIER_nondet_int();
  if (is_mutex_held_by_another_thread) {
    return (0);
  } else {
    ldv_mutex_bandwidth_mutex_of_usb_hcd = 2;
    return (1);
  }
}
}
int ldv_atomic_dec_and_mutex_lock_bandwidth_mutex_of_usb_hcd(atomic_t *cnt , struct mutex *lock ) 
{ int atomic_value_after_dec ;

  {
  if (! (ldv_mutex_bandwidth_mutex_of_usb_hcd == 1)) {
    ldv_error();
  }
  atomic_value_after_dec = __VERIFIER_nondet_int();
  if (atomic_value_after_dec == 0) {
    ldv_mutex_bandwidth_mutex_of_usb_hcd = 2;
    return (1);
  }
  return (0);
}
}
int ldv_mutex_is_locked_bandwidth_mutex_of_usb_hcd(struct mutex *lock ) 
{ int nondetermined ;

  {
  if (ldv_mutex_bandwidth_mutex_of_usb_hcd == 1) {
    nondetermined = __VERIFIER_nondet_int();
    if (nondetermined) {
      return (0);
    } else {
      return (1);
    }
  } else {
    return (1);
  }
}
}
void ldv_mutex_unlock_bandwidth_mutex_of_usb_hcd(struct mutex *lock ) 
{ 

  {
  if (! (ldv_mutex_bandwidth_mutex_of_usb_hcd == 2)) {
    ldv_error();
  }
  ldv_mutex_bandwidth_mutex_of_usb_hcd = 1;
  return;
}
}
static int ldv_mutex_i_mutex_of_inode  ;
int ldv_mutex_lock_interruptible_i_mutex_of_inode(struct mutex *lock ) 
{ int nondetermined ;

  {
  if (! (ldv_mutex_i_mutex_of_inode == 1)) {
    ldv_error();
  }
  nondetermined = __VERIFIER_nondet_int();
  if (nondetermined) {
    ldv_mutex_i_mutex_of_inode = 2;
    return (0);
  } else {
    return (-4);
  }
}
}
int ldv_mutex_lock_killable_i_mutex_of_inode(struct mutex *lock ) 
{ int nondetermined ;

  {
  if (! (ldv_mutex_i_mutex_of_inode == 1)) {
    ldv_error();
  }
  nondetermined = __VERIFIER_nondet_int();
  if (nondetermined) {
    ldv_mutex_i_mutex_of_inode = 2;
    return (0);
  } else {
    return (-4);
  }
}
}
void ldv_mutex_lock_i_mutex_of_inode(struct mutex *lock ) 
{ 

  {
  if (! (ldv_mutex_i_mutex_of_inode == 1)) {
    ldv_error();
  }
  ldv_mutex_i_mutex_of_inode = 2;
  return;
}
}
int ldv_mutex_trylock_i_mutex_of_inode(struct mutex *lock ) 
{ int is_mutex_held_by_another_thread ;

  {
  if (! (ldv_mutex_i_mutex_of_inode == 1)) {
    ldv_error();
  }
  is_mutex_held_by_another_thread = __VERIFIER_nondet_int();
  if (is_mutex_held_by_another_thread) {
    return (0);
  } else {
    ldv_mutex_i_mutex_of_inode = 2;
    return (1);
  }
}
}
int ldv_atomic_dec_and_mutex_lock_i_mutex_of_inode(atomic_t *cnt , struct mutex *lock ) 
{ int atomic_value_after_dec ;

  {
  if (! (ldv_mutex_i_mutex_of_inode == 1)) {
    ldv_error();
  }
  atomic_value_after_dec = __VERIFIER_nondet_int();
  if (atomic_value_after_dec == 0) {
    ldv_mutex_i_mutex_of_inode = 2;
    return (1);
  }
  return (0);
}
}
int ldv_mutex_is_locked_i_mutex_of_inode(struct mutex *lock ) 
{ int nondetermined ;

  {
  if (ldv_mutex_i_mutex_of_inode == 1) {
    nondetermined = __VERIFIER_nondet_int();
    if (nondetermined) {
      return (0);
    } else {
      return (1);
    }
  } else {
    return (1);
  }
}
}
void ldv_mutex_unlock_i_mutex_of_inode(struct mutex *lock ) 
{ 

  {
  if (! (ldv_mutex_i_mutex_of_inode == 2)) {
    ldv_error();
  }
  ldv_mutex_i_mutex_of_inode = 1;
  return;
}
}
static int ldv_mutex_lock  ;
int ldv_mutex_lock_interruptible_lock(struct mutex *lock ) 
{ int nondetermined ;

  {
  if (! (ldv_mutex_lock == 1)) {
    ldv_error();
  }
  nondetermined = __VERIFIER_nondet_int();
  if (nondetermined) {
    ldv_mutex_lock = 2;
    return (0);
  } else {
    return (-4);
  }
}
}
int ldv_mutex_lock_killable_lock(struct mutex *lock ) 
{ int nondetermined ;

  {
  if (! (ldv_mutex_lock == 1)) {
    ldv_error();
  }
  nondetermined = __VERIFIER_nondet_int();
  if (nondetermined) {
    ldv_mutex_lock = 2;
    return (0);
  } else {
    return (-4);
  }
}
}
void ldv_mutex_lock_lock(struct mutex *lock ) 
{ 

  {
  if (! (ldv_mutex_lock == 1)) {
    ldv_error();
  }
  ldv_mutex_lock = 2;
  return;
}
}
int ldv_mutex_trylock_lock(struct mutex *lock ) 
{ int is_mutex_held_by_another_thread ;

  {
  if (! (ldv_mutex_lock == 1)) {
    ldv_error();
  }
  is_mutex_held_by_another_thread = __VERIFIER_nondet_int();
  if (is_mutex_held_by_another_thread) {
    return (0);
  } else {
    ldv_mutex_lock = 2;
    return (1);
  }
}
}
int ldv_atomic_dec_and_mutex_lock_lock(atomic_t *cnt , struct mutex *lock ) 
{ int atomic_value_after_dec ;

  {
  if (! (ldv_mutex_lock == 1)) {
    ldv_error();
  }
  atomic_value_after_dec = __VERIFIER_nondet_int();
  if (atomic_value_after_dec == 0) {
    ldv_mutex_lock = 2;
    return (1);
  }
  return (0);
}
}
int ldv_mutex_is_locked_lock(struct mutex *lock ) 
{ int nondetermined ;

  {
  if (ldv_mutex_lock == 1) {
    nondetermined = __VERIFIER_nondet_int();
    if (nondetermined) {
      return (0);
    } else {
      return (1);
    }
  } else {
    return (1);
  }
}
}
void ldv_mutex_unlock_lock(struct mutex *lock ) 
{ 

  {
  if (! (ldv_mutex_lock == 2)) {
    ldv_error();
  }
  ldv_mutex_lock = 1;
  return;
}
}
static int ldv_mutex_mutex_of_device  ;
int ldv_mutex_lock_interruptible_mutex_of_device(struct mutex *lock ) 
{ int nondetermined ;

  {
  if (! (ldv_mutex_mutex_of_device == 1)) {
    ldv_error();
  }
  nondetermined = __VERIFIER_nondet_int();
  if (nondetermined) {
    ldv_mutex_mutex_of_device = 2;
    return (0);
  } else {
    return (-4);
  }
}
}
int ldv_mutex_lock_killable_mutex_of_device(struct mutex *lock ) 
{ int nondetermined ;

  {
  if (! (ldv_mutex_mutex_of_device == 1)) {
    ldv_error();
  }
  nondetermined = __VERIFIER_nondet_int();
  if (nondetermined) {
    ldv_mutex_mutex_of_device = 2;
    return (0);
  } else {
    return (-4);
  }
}
}
void ldv_mutex_lock_mutex_of_device(struct mutex *lock ) 
{ 

  {
  if (! (ldv_mutex_mutex_of_device == 1)) {
    ldv_error();
  }
  ldv_mutex_mutex_of_device = 2;
  return;
}
}
int ldv_mutex_trylock_mutex_of_device(struct mutex *lock ) 
{ int is_mutex_held_by_another_thread ;

  {
  if (! (ldv_mutex_mutex_of_device == 1)) {
    ldv_error();
  }
  is_mutex_held_by_another_thread = __VERIFIER_nondet_int();
  if (is_mutex_held_by_another_thread) {
    return (0);
  } else {
    ldv_mutex_mutex_of_device = 2;
    return (1);
  }
}
}
int ldv_atomic_dec_and_mutex_lock_mutex_of_device(atomic_t *cnt , struct mutex *lock ) 
{ int atomic_value_after_dec ;

  {
  if (! (ldv_mutex_mutex_of_device == 1)) {
    ldv_error();
  }
  atomic_value_after_dec = __VERIFIER_nondet_int();
  if (atomic_value_after_dec == 0) {
    ldv_mutex_mutex_of_device = 2;
    return (1);
  }
  return (0);
}
}
int ldv_mutex_is_locked_mutex_of_device(struct mutex *lock ) 
{ int nondetermined ;

  {
  if (ldv_mutex_mutex_of_device == 1) {
    nondetermined = __VERIFIER_nondet_int();
    if (nondetermined) {
      return (0);
    } else {
      return (1);
    }
  } else {
    return (1);
  }
}
}
void ldv_mutex_unlock_mutex_of_device(struct mutex *lock ) 
{ 

  {
  if (! (ldv_mutex_mutex_of_device == 2)) {
    ldv_error();
  }
  ldv_mutex_mutex_of_device = 1;
  return;
}
}
static int ldv_mutex_status_mutex_of_usb_hub  ;
int ldv_mutex_lock_interruptible_status_mutex_of_usb_hub(struct mutex *lock ) 
{ int nondetermined ;

  {
  if (! (ldv_mutex_status_mutex_of_usb_hub == 1)) {
    ldv_error();
  }
  nondetermined = __VERIFIER_nondet_int();
  if (nondetermined) {
    ldv_mutex_status_mutex_of_usb_hub = 2;
    return (0);
  } else {
    return (-4);
  }
}
}
int ldv_mutex_lock_killable_status_mutex_of_usb_hub(struct mutex *lock ) 
{ int nondetermined ;

  {
  if (! (ldv_mutex_status_mutex_of_usb_hub == 1)) {
    ldv_error();
  }
  nondetermined = __VERIFIER_nondet_int();
  if (nondetermined) {
    ldv_mutex_status_mutex_of_usb_hub = 2;
    return (0);
  } else {
    return (-4);
  }
}
}
void ldv_mutex_lock_status_mutex_of_usb_hub(struct mutex *lock ) 
{ 

  {
  if (! (ldv_mutex_status_mutex_of_usb_hub == 1)) {
    ldv_error();
  }
  ldv_mutex_status_mutex_of_usb_hub = 2;
  return;
}
}
int ldv_mutex_trylock_status_mutex_of_usb_hub(struct mutex *lock ) 
{ int is_mutex_held_by_another_thread ;

  {
  if (! (ldv_mutex_status_mutex_of_usb_hub == 1)) {
    ldv_error();
  }
  is_mutex_held_by_another_thread = __VERIFIER_nondet_int();
  if (is_mutex_held_by_another_thread) {
    return (0);
  } else {
    ldv_mutex_status_mutex_of_usb_hub = 2;
    return (1);
  }
}
}
int ldv_atomic_dec_and_mutex_lock_status_mutex_of_usb_hub(atomic_t *cnt , struct mutex *lock ) 
{ int atomic_value_after_dec ;

  {
  if (! (ldv_mutex_status_mutex_of_usb_hub == 1)) {
    ldv_error();
  }
  atomic_value_after_dec = __VERIFIER_nondet_int();
  if (atomic_value_after_dec == 0) {
    ldv_mutex_status_mutex_of_usb_hub = 2;
    return (1);
  }
  return (0);
}
}
int ldv_mutex_is_locked_status_mutex_of_usb_hub(struct mutex *lock ) 
{ int nondetermined ;

  {
  if (ldv_mutex_status_mutex_of_usb_hub == 1) {
    nondetermined = __VERIFIER_nondet_int();
    if (nondetermined) {
      return (0);
    } else {
      return (1);
    }
  } else {
    return (1);
  }
}
}
void ldv_mutex_unlock_status_mutex_of_usb_hub(struct mutex *lock ) 
{ 

  {
  if (! (ldv_mutex_status_mutex_of_usb_hub == 2)) {
    ldv_error();
  }
  ldv_mutex_status_mutex_of_usb_hub = 1;
  return;
}
}
static int ldv_mutex_usb_address0_mutex  ;
int ldv_mutex_lock_interruptible_usb_address0_mutex(struct mutex *lock ) 
{ int nondetermined ;

  {
  if (! (ldv_mutex_usb_address0_mutex == 1)) {
    ldv_error();
  }
  nondetermined = __VERIFIER_nondet_int();
  if (nondetermined) {
    ldv_mutex_usb_address0_mutex = 2;
    return (0);
  } else {
    return (-4);
  }
}
}
int ldv_mutex_lock_killable_usb_address0_mutex(struct mutex *lock ) 
{ int nondetermined ;

  {
  if (! (ldv_mutex_usb_address0_mutex == 1)) {
    ldv_error();
  }
  nondetermined = __VERIFIER_nondet_int();
  if (nondetermined) {
    ldv_mutex_usb_address0_mutex = 2;
    return (0);
  } else {
    return (-4);
  }
}
}
void ldv_mutex_lock_usb_address0_mutex(struct mutex *lock ) 
{ 

  {
  if (! (ldv_mutex_usb_address0_mutex == 1)) {
    ldv_error();
  }
  ldv_mutex_usb_address0_mutex = 2;
  return;
}
}
int ldv_mutex_trylock_usb_address0_mutex(struct mutex *lock ) 
{ int is_mutex_held_by_another_thread ;

  {
  if (! (ldv_mutex_usb_address0_mutex == 1)) {
    ldv_error();
  }
  is_mutex_held_by_another_thread = __VERIFIER_nondet_int();
  if (is_mutex_held_by_another_thread) {
    return (0);
  } else {
    ldv_mutex_usb_address0_mutex = 2;
    return (1);
  }
}
}
int ldv_atomic_dec_and_mutex_lock_usb_address0_mutex(atomic_t *cnt , struct mutex *lock ) 
{ int atomic_value_after_dec ;

  {
  if (! (ldv_mutex_usb_address0_mutex == 1)) {
    ldv_error();
  }
  atomic_value_after_dec = __VERIFIER_nondet_int();
  if (atomic_value_after_dec == 0) {
    ldv_mutex_usb_address0_mutex = 2;
    return (1);
  }
  return (0);
}
}
int ldv_mutex_is_locked_usb_address0_mutex(struct mutex *lock ) 
{ int nondetermined ;

  {
  if (ldv_mutex_usb_address0_mutex == 1) {
    nondetermined = __VERIFIER_nondet_int();
    if (nondetermined) {
      return (0);
    } else {
      return (1);
    }
  } else {
    return (1);
  }
}
}
void ldv_mutex_unlock_usb_address0_mutex(struct mutex *lock ) 
{ 

  {
  if (! (ldv_mutex_usb_address0_mutex == 2)) {
    ldv_error();
  }
  ldv_mutex_usb_address0_mutex = 1;
  return;
}
}
static int ldv_mutex_usb_bus_list_lock  ;
int ldv_mutex_lock_interruptible_usb_bus_list_lock(struct mutex *lock ) 
{ int nondetermined ;

  {
  if (! (ldv_mutex_usb_bus_list_lock == 1)) {
    ldv_error();
  }
  nondetermined = __VERIFIER_nondet_int();
  if (nondetermined) {
    ldv_mutex_usb_bus_list_lock = 2;
    return (0);
  } else {
    return (-4);
  }
}
}
int ldv_mutex_lock_killable_usb_bus_list_lock(struct mutex *lock ) 
{ int nondetermined ;

  {
  if (! (ldv_mutex_usb_bus_list_lock == 1)) {
    ldv_error();
  }
  nondetermined = __VERIFIER_nondet_int();
  if (nondetermined) {
    ldv_mutex_usb_bus_list_lock = 2;
    return (0);
  } else {
    return (-4);
  }
}
}
void ldv_mutex_lock_usb_bus_list_lock(struct mutex *lock ) 
{ 

  {
  if (! (ldv_mutex_usb_bus_list_lock == 1)) {
    ldv_error();
  }
  ldv_mutex_usb_bus_list_lock = 2;
  return;
}
}
int ldv_mutex_trylock_usb_bus_list_lock(struct mutex *lock ) 
{ int is_mutex_held_by_another_thread ;

  {
  if (! (ldv_mutex_usb_bus_list_lock == 1)) {
    ldv_error();
  }
  is_mutex_held_by_another_thread = __VERIFIER_nondet_int();
  if (is_mutex_held_by_another_thread) {
    return (0);
  } else {
    ldv_mutex_usb_bus_list_lock = 2;
    return (1);
  }
}
}
int ldv_atomic_dec_and_mutex_lock_usb_bus_list_lock(atomic_t *cnt , struct mutex *lock ) 
{ int atomic_value_after_dec ;

  {
  if (! (ldv_mutex_usb_bus_list_lock == 1)) {
    ldv_error();
  }
  atomic_value_after_dec = __VERIFIER_nondet_int();
  if (atomic_value_after_dec == 0) {
    ldv_mutex_usb_bus_list_lock = 2;
    return (1);
  }
  return (0);
}
}
int ldv_mutex_is_locked_usb_bus_list_lock(struct mutex *lock ) 
{ int nondetermined ;

  {
  if (ldv_mutex_usb_bus_list_lock == 1) {
    nondetermined = __VERIFIER_nondet_int();
    if (nondetermined) {
      return (0);
    } else {
      return (1);
    }
  } else {
    return (1);
  }
}
}
void ldv_mutex_unlock_usb_bus_list_lock(struct mutex *lock ) 
{ 

  {
  if (! (ldv_mutex_usb_bus_list_lock == 2)) {
    ldv_error();
  }
  ldv_mutex_usb_bus_list_lock = 1;
  return;
}
}
static int ldv_mutex_usbfs_mutex  ;
int ldv_mutex_lock_interruptible_usbfs_mutex(struct mutex *lock ) 
{ int nondetermined ;

  {
  if (! (ldv_mutex_usbfs_mutex == 1)) {
    ldv_error();
  }
  nondetermined = __VERIFIER_nondet_int();
  if (nondetermined) {
    ldv_mutex_usbfs_mutex = 2;
    return (0);
  } else {
    return (-4);
  }
}
}
int ldv_mutex_lock_killable_usbfs_mutex(struct mutex *lock ) 
{ int nondetermined ;

  {
  if (! (ldv_mutex_usbfs_mutex == 1)) {
    ldv_error();
  }
  nondetermined = __VERIFIER_nondet_int();
  if (nondetermined) {
    ldv_mutex_usbfs_mutex = 2;
    return (0);
  } else {
    return (-4);
  }
}
}
void ldv_mutex_lock_usbfs_mutex(struct mutex *lock ) 
{ 

  {
  if (! (ldv_mutex_usbfs_mutex == 1)) {
    ldv_error();
  }
  ldv_mutex_usbfs_mutex = 2;
  return;
}
}
int ldv_mutex_trylock_usbfs_mutex(struct mutex *lock ) 
{ int is_mutex_held_by_another_thread ;

  {
  if (! (ldv_mutex_usbfs_mutex == 1)) {
    ldv_error();
  }
  is_mutex_held_by_another_thread = __VERIFIER_nondet_int();
  if (is_mutex_held_by_another_thread) {
    return (0);
  } else {
    ldv_mutex_usbfs_mutex = 2;
    return (1);
  }
}
}
int ldv_atomic_dec_and_mutex_lock_usbfs_mutex(atomic_t *cnt , struct mutex *lock ) 
{ int atomic_value_after_dec ;

  {
  if (! (ldv_mutex_usbfs_mutex == 1)) {
    ldv_error();
  }
  atomic_value_after_dec = __VERIFIER_nondet_int();
  if (atomic_value_after_dec == 0) {
    ldv_mutex_usbfs_mutex = 2;
    return (1);
  }
  return (0);
}
}
int ldv_mutex_is_locked_usbfs_mutex(struct mutex *lock ) 
{ int nondetermined ;

  {
  if (ldv_mutex_usbfs_mutex == 1) {
    nondetermined = __VERIFIER_nondet_int();
    if (nondetermined) {
      return (0);
    } else {
      return (1);
    }
  } else {
    return (1);
  }
}
}
void ldv_mutex_unlock_usbfs_mutex(struct mutex *lock ) 
{ 

  {
  if (! (ldv_mutex_usbfs_mutex == 2)) {
    ldv_error();
  }
  ldv_mutex_usbfs_mutex = 1;
  return;
}
}
void ldv_initialize(void) 
{ 

  {
  ldv_mutex_bandwidth_mutex_of_usb_hcd = 1;
  ldv_mutex_i_mutex_of_inode = 1;
  ldv_mutex_lock = 1;
  ldv_mutex_mutex_of_device = 1;
  ldv_mutex_status_mutex_of_usb_hub = 1;
  ldv_mutex_usb_address0_mutex = 1;
  ldv_mutex_usb_bus_list_lock = 1;
  ldv_mutex_usbfs_mutex = 1;
  return;
}
}
void ldv_check_final_state(void) 
{ 

  {
  if (! (ldv_mutex_bandwidth_mutex_of_usb_hcd == 1)) {
    ldv_error();
  }
  if (! (ldv_mutex_i_mutex_of_inode == 1)) {
    ldv_error();
  }
  if (! (ldv_mutex_lock == 1)) {
    ldv_error();
  }
  if (! (ldv_mutex_mutex_of_device == 1)) {
    ldv_error();
  }
  if (! (ldv_mutex_status_mutex_of_usb_hub == 1)) {
    ldv_error();
  }
  if (! (ldv_mutex_usb_address0_mutex == 1)) {
    ldv_error();
  }
  if (! (ldv_mutex_usb_bus_list_lock == 1)) {
    ldv_error();
  }
  if (! (ldv_mutex_usbfs_mutex == 1)) {
    ldv_error();
  }
  return;
}
}
