extern void __VERIFIER_error() __attribute__ ((__noreturn__)); /* Generated by CIL v. 1.3.7 */
/* print_CIL_Input is true */

typedef unsigned char __u8;
typedef unsigned short __u16;
typedef unsigned int __u32;
typedef unsigned long long __u64;
typedef unsigned char u8;
typedef short s16;
typedef unsigned short u16;
typedef unsigned int u32;
typedef long long s64;
typedef unsigned long long u64;
typedef long __kernel_long_t;
typedef unsigned long __kernel_ulong_t;
typedef __kernel_ulong_t __kernel_size_t;
typedef __kernel_long_t __kernel_ssize_t;
typedef long long __kernel_loff_t;
typedef __u32 __kernel_dev_t;
typedef __kernel_dev_t dev_t;
typedef unsigned short umode_t;
typedef _Bool bool;
typedef __kernel_loff_t loff_t;
typedef __kernel_size_t size_t;
typedef __kernel_ssize_t ssize_t;
typedef unsigned char u_char;
typedef unsigned long u_long;
typedef __u8 uint8_t;
typedef __u32 uint32_t;
typedef __u64 uint64_t;
typedef unsigned int gfp_t;
typedef u64 phys_addr_t;
typedef phys_addr_t resource_size_t;
struct __anonstruct_atomic_t_6 {
   int counter ;
};
typedef struct __anonstruct_atomic_t_6 atomic_t;
struct __anonstruct_atomic64_t_7 {
   long counter ;
};
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
struct module;
struct module;
struct module;
typedef void (*ctor_fn_t)(void);
struct device;
struct device;
struct device;
struct completion;
struct completion;
struct completion;
struct page;
struct page;
struct page;
struct task_struct;
struct task_struct;
struct task_struct;
struct file;
struct file;
struct file;
struct arch_spinlock;
struct arch_spinlock;
struct arch_spinlock;
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
struct static_key;
struct static_key;
struct static_key;
struct kmem_cache;
struct kmem_cache;
typedef atomic64_t atomic_long_t;
typedef u16 __ticket_t;
typedef u32 __ticketpair_t;
struct __raw_tickets {
   __ticket_t head ;
   __ticket_t tail ;
};
union __anonunion_ldv_5907_29 {
   __ticketpair_t head_tail ;
   struct __raw_tickets tickets ;
};
struct arch_spinlock {
   union __anonunion_ldv_5907_29 ldv_5907 ;
};
typedef struct arch_spinlock arch_spinlock_t;
struct lockdep_map;
struct lockdep_map;
struct lockdep_map;
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
struct lockdep_subclass_key {
   char __one_byte ;
};
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
typedef struct raw_spinlock raw_spinlock_t;
struct __anonstruct_ldv_6122_33 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
union __anonunion_ldv_6123_32 {
   struct raw_spinlock rlock ;
   struct __anonstruct_ldv_6122_33 ldv_6122 ;
};
struct spinlock {
   union __anonunion_ldv_6123_32 ldv_6123 ;
};
typedef struct spinlock spinlock_t;
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
typedef struct __wait_queue_head wait_queue_head_t;
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct task_struct *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
struct notifier_block;
struct notifier_block;
struct notifier_block;
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char const   *name ;
   unsigned long flags ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
union ktime {
   s64 tv64 ;
};
typedef union ktime ktime_t;
struct tvec_base;
struct tvec_base;
struct tvec_base;
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   struct tvec_base *base ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};
struct work_struct;
struct work_struct;
struct work_struct;
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
struct pm_message {
   int event ;
};
typedef struct pm_message pm_message_t;
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_late)(struct device * ) ;
   int (*resume_early)(struct device * ) ;
   int (*freeze_late)(struct device * ) ;
   int (*thaw_early)(struct device * ) ;
   int (*poweroff_late)(struct device * ) ;
   int (*restore_early)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
} ;
struct wakeup_source;
struct wakeup_source;
struct wakeup_source;
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
};
struct dev_pm_qos_request;
struct dev_pm_qos_request;
struct pm_qos_constraints;
struct pm_qos_constraints;
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char async_suspend : 1 ;
   bool is_prepared ;
   bool is_suspended ;
   bool ignore_children ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned char disable_depth : 3 ;
   unsigned char idle_notification : 1 ;
   unsigned char request_pending : 1 ;
   unsigned char deferred_resume : 1 ;
   unsigned char run_wake : 1 ;
   unsigned char runtime_auto : 1 ;
   unsigned char no_callbacks : 1 ;
   unsigned char irq_safe : 1 ;
   unsigned char use_autosuspend : 1 ;
   unsigned char timer_autosuspends : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
   ktime_t suspend_time ;
   s64 max_time_suspended_ns ;
   struct dev_pm_qos_request *pq_req ;
   struct pm_subsys_data *subsys_data ;
   struct pm_qos_constraints *constraints ;
};
struct dev_pm_domain {
   struct dev_pm_ops ops ;
};
struct vm_area_struct;
struct vm_area_struct;
struct vm_area_struct;
typedef __u64 Elf64_Addr;
typedef __u16 Elf64_Half;
typedef __u32 Elf64_Word;
typedef __u64 Elf64_Xword;
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
typedef struct elf64_sym Elf64_Sym;
struct sock;
struct sock;
struct sock;
struct kobject;
struct kobject;
struct kobject;
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
} ;
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   void *(*grab_current_ns)(void) ;
   void const   *(*netlink_ns)(struct sock * ) ;
   void const   *(*initial_ns)(void) ;
   void (*drop_ns)(void * ) ;
};
struct attribute {
   char const   *name ;
   umode_t mode ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
struct attribute_group {
   char const   *name ;
   umode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                   loff_t  , size_t  ) ;
   ssize_t (*write)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                    loff_t  , size_t  ) ;
   int (*mmap)(struct file * , struct kobject * , struct bin_attribute * , struct vm_area_struct * ) ;
};
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
   void const   *(*namespace)(struct kobject * , struct attribute  const  * ) ;
};
struct sysfs_dirent;
struct sysfs_dirent;
struct sysfs_dirent;
struct kref {
   atomic_t refcount ;
};
struct kset;
struct kset;
struct kobj_type;
struct kobj_type;
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops  const  *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations  const  *(*child_ns_type)(struct kobject * ) ;
   void const   *(*namespace)(struct kobject * ) ;
};
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
struct kset_uevent_ops {
   int (* const  filter)(struct kset * , struct kobject * ) ;
   char const   *(* const  name)(struct kset * , struct kobject * ) ;
   int (* const  uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops  const  *uevent_ops ;
};
struct kernel_param;
struct kernel_param;
struct kernel_param;
struct kernel_param_ops {
   int (*set)(char const   * , struct kernel_param  const  * ) ;
   int (*get)(char * , struct kernel_param  const  * ) ;
   void (*free)(void * ) ;
};
struct kparam_string;
struct kparam_string;
struct kparam_array;
struct kparam_array;
union __anonunion_ldv_13363_134 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
struct kernel_param {
   char const   *name ;
   struct kernel_param_ops  const  *ops ;
   u16 perm ;
   s16 level ;
   union __anonunion_ldv_13363_134 ldv_13363 ;
};
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops  const  *ops ;
   void *elem ;
};
struct static_key {
   atomic_t enabled ;
};
struct tracepoint;
struct tracepoint;
struct tracepoint;
struct tracepoint_func {
   void *func ;
   void *data ;
};
struct tracepoint {
   char const   *name ;
   struct static_key key ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
struct mod_arch_specific {

};
struct module_param_attrs;
struct module_param_attrs;
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module_kobject * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module_kobject * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
struct exception_table_entry;
struct exception_table_entry;
struct exception_table_entry;
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
struct module_ref {
   unsigned long incs ;
   unsigned long decs ;
};
struct module_sect_attrs;
struct module_sect_attrs;
struct module_notes_attrs;
struct module_notes_attrs;
struct ftrace_event_call;
struct ftrace_event_call;
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   struct tracepoint * const  *tracepoints_ptrs ;
   unsigned int num_trace_bprintk_fmt ;
   char const   **trace_bprintk_fmt_start ;
   struct ftrace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct list_head source_list ;
   struct list_head target_list ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
struct kmem_cache_cpu {
   void **freelist ;
   unsigned long tid ;
   struct page *page ;
   struct page *partial ;
   int node ;
   unsigned int stat[26U] ;
};
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
struct kmem_cache_order_objects {
   unsigned long x ;
};
struct kmem_cache {
   struct kmem_cache_cpu *cpu_slab ;
   unsigned long flags ;
   unsigned long min_partial ;
   int size ;
   int objsize ;
   int offset ;
   int cpu_partial ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   int reserved ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1024U] ;
};
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
struct klist_node;
struct klist_node;
struct klist_node;
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
struct dma_map_ops;
struct dma_map_ops;
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
struct device_private;
struct device_private;
struct device_private;
struct device_driver;
struct device_driver;
struct device_driver;
struct driver_private;
struct driver_private;
struct driver_private;
struct class;
struct class;
struct class;
struct subsys_private;
struct subsys_private;
struct subsys_private;
struct bus_type;
struct bus_type;
struct bus_type;
struct device_node;
struct device_node;
struct device_node;
struct iommu_ops;
struct iommu_ops;
struct iommu_ops;
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
struct device_attribute;
struct device_attribute;
struct driver_attribute;
struct driver_attribute;
struct bus_type {
   char const   *name ;
   char const   *dev_name ;
   struct device *dev_root ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
};
struct device_type;
struct device_type;
struct of_device_id;
struct of_device_id;
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   struct of_device_id  const  *of_match_table ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
struct class_attribute;
struct class_attribute;
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct bin_attribute *dev_bin_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct kobj_ns_type_operations  const  *ns_type ;
   void const   *(*namespace)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct subsys_private *p ;
};
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , struct class_attribute * , char * ) ;
   ssize_t (*store)(struct class * , struct class_attribute * , char const   * , size_t  ) ;
   void const   *(*namespace)(struct class * , struct class_attribute  const  * ) ;
};
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
struct dma_coherent_mem;
struct dma_coherent_mem;
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type  const  *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
};
struct wakeup_source {
   char const   *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long hit_count ;
   unsigned char active : 1 ;
};
struct otp_info {
   __u32 start ;
   __u32 length ;
   __u32 locked ;
};
struct nand_oobfree {
   __u32 offset ;
   __u32 length ;
};
struct mtd_ecc_stats {
   __u32 corrected ;
   __u32 failed ;
   __u32 badblocks ;
   __u32 bbtblocks ;
};
struct mtd_info;
struct mtd_info;
struct erase_info {
   struct mtd_info *mtd ;
   uint64_t addr ;
   uint64_t len ;
   uint64_t fail_addr ;
   u_long time ;
   u_long retries ;
   unsigned int dev ;
   unsigned int cell ;
   void (*callback)(struct erase_info * ) ;
   u_long priv ;
   u_char state ;
   struct erase_info *next ;
};
struct mtd_erase_region_info {
   uint64_t offset ;
   uint32_t erasesize ;
   uint32_t numblocks ;
   unsigned long *lockmap ;
};
struct mtd_oob_ops {
   unsigned int mode ;
   size_t len ;
   size_t retlen ;
   size_t ooblen ;
   size_t oobretlen ;
   uint32_t ooboffs ;
   uint8_t *datbuf ;
   uint8_t *oobbuf ;
};
struct nand_ecclayout {
   __u32 eccbytes ;
   __u32 eccpos[448U] ;
   __u32 oobavail ;
   struct nand_oobfree oobfree[32U] ;
};
struct backing_dev_info;
struct backing_dev_info;
struct mtd_info {
   u_char type ;
   uint32_t flags ;
   uint64_t size ;
   uint32_t erasesize ;
   uint32_t writesize ;
   uint32_t writebufsize ;
   uint32_t oobsize ;
   uint32_t oobavail ;
   unsigned int erasesize_shift ;
   unsigned int writesize_shift ;
   unsigned int erasesize_mask ;
   unsigned int writesize_mask ;
   char const   *name ;
   int index ;
   struct nand_ecclayout *ecclayout ;
   unsigned int ecc_strength ;
   int numeraseregions ;
   struct mtd_erase_region_info *eraseregions ;
   int (*_erase)(struct mtd_info * , struct erase_info * ) ;
   int (*_point)(struct mtd_info * , loff_t  , size_t  , size_t * , void ** , resource_size_t * ) ;
   int (*_unpoint)(struct mtd_info * , loff_t  , size_t  ) ;
   unsigned long (*_get_unmapped_area)(struct mtd_info * , unsigned long  , unsigned long  ,
                                       unsigned long  ) ;
   int (*_read)(struct mtd_info * , loff_t  , size_t  , size_t * , u_char * ) ;
   int (*_write)(struct mtd_info * , loff_t  , size_t  , size_t * , u_char const   * ) ;
   int (*_panic_write)(struct mtd_info * , loff_t  , size_t  , size_t * , u_char const   * ) ;
   int (*_read_oob)(struct mtd_info * , loff_t  , struct mtd_oob_ops * ) ;
   int (*_write_oob)(struct mtd_info * , loff_t  , struct mtd_oob_ops * ) ;
   int (*_get_fact_prot_info)(struct mtd_info * , struct otp_info * , size_t  ) ;
   int (*_read_fact_prot_reg)(struct mtd_info * , loff_t  , size_t  , size_t * , u_char * ) ;
   int (*_get_user_prot_info)(struct mtd_info * , struct otp_info * , size_t  ) ;
   int (*_read_user_prot_reg)(struct mtd_info * , loff_t  , size_t  , size_t * , u_char * ) ;
   int (*_write_user_prot_reg)(struct mtd_info * , loff_t  , size_t  , size_t * ,
                               u_char * ) ;
   int (*_lock_user_prot_reg)(struct mtd_info * , loff_t  , size_t  ) ;
   int (*_writev)(struct mtd_info * , struct kvec  const  * , unsigned long  , loff_t  ,
                  size_t * ) ;
   void (*_sync)(struct mtd_info * ) ;
   int (*_lock)(struct mtd_info * , loff_t  , uint64_t  ) ;
   int (*_unlock)(struct mtd_info * , loff_t  , uint64_t  ) ;
   int (*_is_locked)(struct mtd_info * , loff_t  , uint64_t  ) ;
   int (*_block_isbad)(struct mtd_info * , loff_t  ) ;
   int (*_block_markbad)(struct mtd_info * , loff_t  ) ;
   int (*_suspend)(struct mtd_info * ) ;
   void (*_resume)(struct mtd_info * ) ;
   int (*_get_device)(struct mtd_info * ) ;
   void (*_put_device)(struct mtd_info * ) ;
   struct backing_dev_info *backing_dev_info ;
   struct notifier_block reboot_notifier ;
   struct mtd_ecc_stats ecc_stats ;
   int subpage_sft ;
   void *priv ;
   struct module *owner ;
   struct device dev ;
   int usecount ;
};
struct mtd_partition;
struct mtd_partition;
struct mtd_partition;
struct mtd_part_parser_data;
struct mtd_part_parser_data;
struct mtd_part_parser_data;
union __anonunion_map_word_135 {
   unsigned long x[4U] ;
};
typedef union __anonunion_map_word_135 map_word;
struct mtd_chip_driver;
struct mtd_chip_driver;
struct map_info {
   char const   *name ;
   unsigned long size ;
   resource_size_t phys ;
   void *virt ;
   void *cached ;
   int swap ;
   int bankwidth ;
   map_word (*read)(struct map_info * , unsigned long  ) ;
   void (*copy_from)(struct map_info * , void * , unsigned long  , ssize_t  ) ;
   void (*write)(struct map_info * , map_word  , unsigned long  ) ;
   void (*copy_to)(struct map_info * , unsigned long  , void const   * , ssize_t  ) ;
   void (*inval_cache)(struct map_info * , unsigned long  , ssize_t  ) ;
   void (*set_vpp)(struct map_info * , int  ) ;
   unsigned long pfow_base ;
   unsigned long map_priv_1 ;
   unsigned long map_priv_2 ;
   void *fldrv_priv ;
   struct mtd_chip_driver *fldrv ;
};
struct mtd_chip_driver {
   struct mtd_info *(*probe)(struct map_info * ) ;
   void (*destroy)(struct mtd_info * ) ;
   struct module *module ;
   char *name ;
   struct list_head list ;
};
struct mtd_partition {
   char *name ;
   uint64_t size ;
   uint64_t offset ;
   uint32_t mask_flags ;
   struct nand_ecclayout *ecclayout ;
};
struct mtd_part_parser_data {
   unsigned long origin ;
   struct device_node *of_node ;
};
/* compiler builtin: 
   void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;  */
void ldv_spin_lock(void) ;
void ldv_spin_unlock(void) ;
int ldv_spin_trylock(void) ;
extern int printk(char const   *  , ...) ;
extern void _raw_spin_lock(raw_spinlock_t * ) ;
extern void _raw_spin_unlock(raw_spinlock_t * ) ;
 static void ldv_spin_lock_1(spinlock_t *lock ) 
{ struct raw_spinlock *__cil_tmp2 ;

  {
  __cil_tmp2 = (struct raw_spinlock *)lock;
  _raw_spin_lock(__cil_tmp2);
  return;
}
}
 static void spin_lock(spinlock_t *lock ) ;
 static void ldv_spin_unlock_5(spinlock_t *lock ) 
{ struct raw_spinlock *__cil_tmp2 ;

  {
  __cil_tmp2 = (struct raw_spinlock *)lock;
  _raw_spin_unlock(__cil_tmp2);
  return;
}
}
 static void spin_unlock(spinlock_t *lock ) ;
extern struct resource ioport_resource ;
extern struct resource *__request_region(struct resource * , resource_size_t  , resource_size_t  ,
                                         char const   * , int  ) ;
extern void __release_region(struct resource * , resource_size_t  , resource_size_t  ) ;
 static unsigned char readb(void const volatile   *addr ) 
{ unsigned char ret ;
  unsigned char volatile   *__cil_tmp3 ;

  {
  __cil_tmp3 = (unsigned char volatile   *)addr;
  __asm__  volatile   ("movb %1,%0": "=q" (ret): "m" (*__cil_tmp3): "memory");
  return (ret);
}
}
 static void writeb(unsigned char val , void volatile   *addr ) 
{ unsigned char volatile   *__cil_tmp3 ;

  {
  __cil_tmp3 = (unsigned char volatile   *)addr;
  __asm__  volatile   ("movb %0,%1": : "q" (val), "m" (*__cil_tmp3): "memory");
  return;
}
}
extern void *ioremap_nocache(resource_size_t  , unsigned long  ) ;
 static void *ioremap(resource_size_t offset , unsigned long size ) 
{ void *tmp ;

  {
  tmp = ioremap_nocache(offset, size);
  return (tmp);
}
}
extern void iounmap(void volatile   * ) ;
 static void memcpy_fromio(void *dst , void const volatile   *src , size_t count ) 
{ size_t __len ;
  void *__ret ;
  void const   *__cil_tmp6 ;

  {
  __len = count;
  __cil_tmp6 = (void const   *)src;
  __ret = __builtin_memcpy(dst, __cil_tmp6, __len);
  return;
}
}
 static void memcpy_toio(void volatile   *dst , void const   *src , size_t count ) 
{ size_t __len ;
  void *__ret ;
  void *__cil_tmp6 ;

  {
  __len = count;
  __cil_tmp6 = (void *)dst;
  __ret = __builtin_memcpy(__cil_tmp6, src, __len);
  return;
}
}
 static void outw(unsigned short value , int port ) 
{ 

  {
  __asm__  volatile   ("outw %w0, %w1": : "a" (value), "Nd" (port));
  return;
}
}
extern struct module __this_module ;
extern void *kmem_cache_alloc(struct kmem_cache * , gfp_t  ) ;
void *ldv_kmem_cache_alloc_16(struct kmem_cache *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
void ldv_check_alloc_flags(gfp_t flags ) ;
void ldv_check_alloc_nonatomic(void) ;
struct page *ldv_check_alloc_flags_and_return_some_page(gfp_t flags ) ;
extern int mtd_device_parse_register(struct mtd_info * , char const   ** , struct mtd_part_parser_data * ,
                                     struct mtd_partition  const  * , int  ) ;
extern int mtd_device_unregister(struct mtd_info * ) ;
extern struct mtd_info *do_map_probe(char const   * , struct map_info * ) ;
extern void map_destroy(struct mtd_info * ) ;
static int volatile   page_in_window  =    (int volatile   )-1;
static void *iomapadr  ;
static spinlock_t sbc_gxx_spin  =    {{{{{0U}}, 3735899821U, 4294967295U, (void *)0xffffffffffffffffUL, {(struct lock_class_key *)0,
                                                                       {(struct lock_class *)0,
                                                                        (struct lock_class *)0},
                                                                       "sbc_gxx_spin",
                                                                       0, 0UL}}}};
static struct mtd_partition partition_info[3U]  = {      {(char *)"SBC-GXx flash boot partition",
      786432ULL, 0ULL, 0U, (struct nand_ecclayout *)0}, 
        {(char *)"SBC-GXx flash data partition", 1310720ULL, 786432ULL, 0U, (struct nand_ecclayout *)0}, 
        {(char *)"SBC-GXx flash application partition",
      0ULL, 2097152ULL, 0U, (struct nand_ecclayout *)0}};
 static void sbc_gxx_page(struct map_info *map , unsigned long ofs ) 
{ unsigned long page ;
  unsigned long __cil_tmp4 ;
  unsigned short __cil_tmp5 ;
  unsigned int __cil_tmp6 ;
  unsigned int __cil_tmp7 ;
  int __cil_tmp8 ;
  unsigned short __cil_tmp9 ;

  {
  page = ofs >> 14;
  __cil_tmp4 = (unsigned long )page_in_window;
  if (__cil_tmp4 != page) {
    __cil_tmp5 = (unsigned short )page;
    __cil_tmp6 = (unsigned int )__cil_tmp5;
    __cil_tmp7 = __cil_tmp6 | 32768U;
    __cil_tmp8 = (int )__cil_tmp7;
    __cil_tmp9 = (unsigned short )__cil_tmp8;
    outw(__cil_tmp9, 600);
    page_in_window = (int volatile   )page;
  }
  return;
}
}
static map_word sbc_gxx_read8(struct map_info *map , unsigned long ofs ) 
{ map_word ret ;
  unsigned char tmp ;
  unsigned long __cil_tmp5 ;
  void *__cil_tmp6 ;
  void const volatile   *__cil_tmp7 ;
  unsigned long __cil_tmp8 ;
  unsigned long __cil_tmp9 ;
  unsigned long __cil_tmp10 ;
  map_word *__cil_tmp11 ;

  {
  spin_lock(& sbc_gxx_spin);
  sbc_gxx_page(map, ofs);
  __cil_tmp5 = ofs & 16383UL;
  __cil_tmp6 = iomapadr + __cil_tmp5;
  __cil_tmp7 = (void const volatile   *)__cil_tmp6;
  tmp = readb(__cil_tmp7);
  __cil_tmp8 = 0UL;
  __cil_tmp9 = __cil_tmp8;
  __cil_tmp10 = (unsigned long )(& ret) + __cil_tmp9;
  *((unsigned long *)__cil_tmp10) = (unsigned long )tmp;
  spin_unlock(& sbc_gxx_spin);
  __cil_tmp11 = & ret;
  return (*__cil_tmp11);
}
}
static void sbc_gxx_copy_from(struct map_info *map , void *to , unsigned long from ,
                              ssize_t len ) 
{ unsigned long thislen ;
  unsigned long __cil_tmp6 ;
  unsigned long __cil_tmp7 ;
  unsigned long __cil_tmp8 ;
  unsigned long __cil_tmp9 ;
  unsigned long __cil_tmp10 ;
  void *__cil_tmp11 ;
  void const volatile   *__cil_tmp12 ;
  unsigned long __cil_tmp13 ;
  unsigned long __cil_tmp14 ;

  {
  goto ldv_15629;
  ldv_15628: 
  thislen = (unsigned long )len;
  __cil_tmp6 = from & 16383UL;
  __cil_tmp7 = 16384UL - __cil_tmp6;
  __cil_tmp8 = (unsigned long )len;
  if (__cil_tmp8 > __cil_tmp7) {
    __cil_tmp9 = from & 16383UL;
    thislen = 16384UL - __cil_tmp9;
  }
  spin_lock(& sbc_gxx_spin);
  sbc_gxx_page(map, from);
  __cil_tmp10 = from & 16383UL;
  __cil_tmp11 = iomapadr + __cil_tmp10;
  __cil_tmp12 = (void const volatile   *)__cil_tmp11;
  memcpy_fromio(to, __cil_tmp12, thislen);
  spin_unlock(& sbc_gxx_spin);
  to += thislen;
  from += thislen;
  __cil_tmp13 = (unsigned long )len;
  __cil_tmp14 = __cil_tmp13 - thislen;
  len = (ssize_t )__cil_tmp14;
  ldv_15629: ;
  if (len != 0L) {
    goto ldv_15628;
  }
  ldv_15630: ;
  return;
}
}
static void sbc_gxx_write8(struct map_info *map , map_word d , unsigned long adr ) 
{ unsigned long __cil_tmp4 ;
  unsigned long __cil_tmp5 ;
  unsigned long __cil_tmp6 ;
  unsigned long __cil_tmp7 ;
  unsigned char __cil_tmp8 ;
  int __cil_tmp9 ;
  unsigned char __cil_tmp10 ;
  unsigned long __cil_tmp11 ;
  void *__cil_tmp12 ;
  void volatile   *__cil_tmp13 ;

  {
  spin_lock(& sbc_gxx_spin);
  sbc_gxx_page(map, adr);
  __cil_tmp4 = 0UL;
  __cil_tmp5 = __cil_tmp4;
  __cil_tmp6 = (unsigned long )(& d) + __cil_tmp5;
  __cil_tmp7 = *((unsigned long *)__cil_tmp6);
  __cil_tmp8 = (unsigned char )__cil_tmp7;
  __cil_tmp9 = (int )__cil_tmp8;
  __cil_tmp10 = (unsigned char )__cil_tmp9;
  __cil_tmp11 = adr & 16383UL;
  __cil_tmp12 = iomapadr + __cil_tmp11;
  __cil_tmp13 = (void volatile   *)__cil_tmp12;
  writeb(__cil_tmp10, __cil_tmp13);
  spin_unlock(& sbc_gxx_spin);
  return;
}
}
static void sbc_gxx_copy_to(struct map_info *map , unsigned long to , void const   *from ,
                            ssize_t len ) 
{ unsigned long thislen ;
  unsigned long __cil_tmp6 ;
  unsigned long __cil_tmp7 ;
  unsigned long __cil_tmp8 ;
  unsigned long __cil_tmp9 ;
  unsigned long __cil_tmp10 ;
  void *__cil_tmp11 ;
  void volatile   *__cil_tmp12 ;
  unsigned long __cil_tmp13 ;
  unsigned long __cil_tmp14 ;

  {
  goto ldv_15644;
  ldv_15643: 
  thislen = (unsigned long )len;
  __cil_tmp6 = to & 16383UL;
  __cil_tmp7 = 16384UL - __cil_tmp6;
  __cil_tmp8 = (unsigned long )len;
  if (__cil_tmp8 > __cil_tmp7) {
    __cil_tmp9 = to & 16383UL;
    thislen = 16384UL - __cil_tmp9;
  }
  spin_lock(& sbc_gxx_spin);
  sbc_gxx_page(map, to);
  __cil_tmp10 = to & 16383UL;
  __cil_tmp11 = iomapadr + __cil_tmp10;
  __cil_tmp12 = (void volatile   *)__cil_tmp11;
  memcpy_toio(__cil_tmp12, from, thislen);
  spin_unlock(& sbc_gxx_spin);
  to += thislen;
  from += thislen;
  __cil_tmp13 = (unsigned long )len;
  __cil_tmp14 = __cil_tmp13 - thislen;
  len = (ssize_t )__cil_tmp14;
  ldv_15644: ;
  if (len != 0L) {
    goto ldv_15643;
  }
  ldv_15645: ;
  return;
}
}
static struct map_info sbc_gxx_map  = 
     {"SBC-GXx flash", 16777216UL, 0xffffffffffffffffULL, (void *)0, (void *)0, 0, 1,
    & sbc_gxx_read8, & sbc_gxx_copy_from, & sbc_gxx_write8, & sbc_gxx_copy_to, (void (*)(struct map_info * ,
                                                                                         unsigned long  ,
                                                                                         ssize_t  ))0,
    (void (*)(struct map_info * , int  ))0, 0UL, 0UL, 0UL, (void *)0, (struct mtd_chip_driver *)0};
static struct mtd_info *all_mtd  ;
static void cleanup_sbc_gxx(void) 
{ struct mtd_info *__cil_tmp1 ;
  unsigned long __cil_tmp2 ;
  unsigned long __cil_tmp3 ;
  void volatile   *__cil_tmp4 ;

  {
  __cil_tmp1 = (struct mtd_info *)0;
  __cil_tmp2 = (unsigned long )__cil_tmp1;
  __cil_tmp3 = (unsigned long )all_mtd;
  if (__cil_tmp3 != __cil_tmp2) {
    mtd_device_unregister(all_mtd);
    map_destroy(all_mtd);
  }
  __cil_tmp4 = (void volatile   *)iomapadr;
  iounmap(__cil_tmp4);
  __release_region(& ioport_resource, 600ULL, 2ULL);
  return;
}
}
static int init_sbc_gxx(void) 
{ struct resource *tmp ;
  void *__cil_tmp2 ;
  unsigned long __cil_tmp3 ;
  unsigned long __cil_tmp4 ;
  struct map_info *__cil_tmp5 ;
  char const   *__cil_tmp6 ;
  struct resource *__cil_tmp7 ;
  unsigned long __cil_tmp8 ;
  unsigned long __cil_tmp9 ;
  struct map_info *__cil_tmp10 ;
  char const   *__cil_tmp11 ;
  void volatile   *__cil_tmp12 ;
  struct map_info *__cil_tmp13 ;
  char const   *__cil_tmp14 ;
  struct mtd_info *__cil_tmp15 ;
  unsigned long __cil_tmp16 ;
  unsigned long __cil_tmp17 ;
  unsigned long __cil_tmp18 ;
  unsigned long __cil_tmp19 ;
  char const   **__cil_tmp20 ;
  struct mtd_part_parser_data *__cil_tmp21 ;
  struct mtd_partition  const  *__cil_tmp22 ;

  {
  iomapadr = ioremap(901120ULL, 16384UL);
  __cil_tmp2 = (void *)0;
  __cil_tmp3 = (unsigned long )__cil_tmp2;
  __cil_tmp4 = (unsigned long )iomapadr;
  if (__cil_tmp4 == __cil_tmp3) {
    __cil_tmp5 = & sbc_gxx_map;
    __cil_tmp6 = *((char const   **)__cil_tmp5);
    printk("<3>%s: failed to ioremap memory region\n", __cil_tmp6);
    return (-5);
  }
  tmp = __request_region(& ioport_resource, 600ULL, 2ULL, "SBC-GXx flash", 0);
  __cil_tmp7 = (struct resource *)0;
  __cil_tmp8 = (unsigned long )__cil_tmp7;
  __cil_tmp9 = (unsigned long )tmp;
  if (__cil_tmp9 == __cil_tmp8) {
    __cil_tmp10 = & sbc_gxx_map;
    __cil_tmp11 = *((char const   **)__cil_tmp10);
    printk("<3>%s: IO ports 0x%x-0x%x in use\n", __cil_tmp11, 600, 601);
    __cil_tmp12 = (void volatile   *)iomapadr;
    iounmap(__cil_tmp12);
    return (-11);
  }
  __cil_tmp13 = & sbc_gxx_map;
  __cil_tmp14 = *((char const   **)__cil_tmp13);
  printk("<6>%s: IO:0x%x-0x%x MEM:0x%x-0x%x\n", __cil_tmp14, 600, 601, 901120, 917503);
  all_mtd = do_map_probe("cfi_probe", & sbc_gxx_map);
  __cil_tmp15 = (struct mtd_info *)0;
  __cil_tmp16 = (unsigned long )__cil_tmp15;
  __cil_tmp17 = (unsigned long )all_mtd;
  if (__cil_tmp17 == __cil_tmp16) {
    cleanup_sbc_gxx();
    return (-6);
  }
  __cil_tmp18 = (unsigned long )all_mtd;
  __cil_tmp19 = __cil_tmp18 + 368UL;
  *((struct module **)__cil_tmp19) = & __this_module;
  __cil_tmp20 = (char const   **)0;
  __cil_tmp21 = (struct mtd_part_parser_data *)0;
  __cil_tmp22 = (struct mtd_partition  const  *)(& partition_info);
  mtd_device_parse_register(all_mtd, __cil_tmp20, __cil_tmp21, __cil_tmp22, 3);
  return (0);
}
}
extern void ldv_check_final_state(void) ;
extern void ldv_initialize(void) ;
extern int __VERIFIER_nondet_int(void) ;
int LDV_IN_INTERRUPT  ;
int main(void) 
{ struct map_info *var_group1 ;
  unsigned long var_sbc_gxx_read8_1_p1 ;
  void *var_sbc_gxx_copy_from_2_p1 ;
  unsigned long var_sbc_gxx_copy_from_2_p2 ;
  ssize_t var_sbc_gxx_copy_from_2_p3 ;
  map_word var_sbc_gxx_write8_3_p1 ;
  unsigned long var_sbc_gxx_write8_3_p2 ;
  unsigned long var_sbc_gxx_copy_to_4_p1 ;
  void const   *var_sbc_gxx_copy_to_4_p2 ;
  ssize_t var_sbc_gxx_copy_to_4_p3 ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  LDV_IN_INTERRUPT = 1;
  ldv_initialize();
  tmp = init_sbc_gxx();
  if (tmp != 0) {
    goto ldv_final;
  }
  goto ldv_15697;
  ldv_15696: 
  tmp___0 = __VERIFIER_nondet_int();
  if (tmp___0 == 0) {
    goto case_0;
  } else
  if (tmp___0 == 1) {
    goto case_1;
  } else
  if (tmp___0 == 2) {
    goto case_2;
  } else
  if (tmp___0 == 3) {
    goto case_3;
  } else {
    goto switch_default;
    if (0) {
      case_0: 
      sbc_gxx_read8(var_group1, var_sbc_gxx_read8_1_p1);
      goto ldv_15691;
      case_1: 
      sbc_gxx_copy_from(var_group1, var_sbc_gxx_copy_from_2_p1, var_sbc_gxx_copy_from_2_p2,
                        var_sbc_gxx_copy_from_2_p3);
      goto ldv_15691;
      case_2: 
      sbc_gxx_write8(var_group1, var_sbc_gxx_write8_3_p1, var_sbc_gxx_write8_3_p2);
      goto ldv_15691;
      case_3: 
      sbc_gxx_copy_to(var_group1, var_sbc_gxx_copy_to_4_p1, var_sbc_gxx_copy_to_4_p2,
                      var_sbc_gxx_copy_to_4_p3);
      goto ldv_15691;
      switch_default: ;
      goto ldv_15691;
    } else {

    }
  }
  ldv_15691: ;
  ldv_15697: 
  tmp___1 = __VERIFIER_nondet_int();
  if (tmp___1 != 0) {
    goto ldv_15696;
  }
  ldv_15698: 
  cleanup_sbc_gxx();
  ldv_final: 
  ldv_check_final_state();
  return;
}
}
void ldv_blast_assert(void) 
{ 

  {
  ERROR: __VERIFIER_error(); ;
  goto ERROR;
}
}
int ldv_spin  =    0;
void ldv_check_alloc_flags(gfp_t flags ) 
{ 

  {
  if (ldv_spin != 0) {
    if (flags != 32U) {
      ldv_blast_assert();
    }
  }
  return;
}
}
extern struct page *ldv_some_page(void) ;
struct page *ldv_check_alloc_flags_and_return_some_page(gfp_t flags ) 
{ struct page *tmp ;

  {
  if (ldv_spin != 0) {
    if (flags != 32U) {
      ldv_blast_assert();
    }
  }
  tmp = ldv_some_page();
  return (tmp);
}
}
void ldv_check_alloc_nonatomic(void) 
{ 

  {
  if (ldv_spin != 0) {
    ldv_blast_assert();
  }
  return;
}
}
void ldv_spin_lock(void) 
{ 

  {
  ldv_spin = 1;
  return;
}
}
void ldv_spin_unlock(void) 
{ 

  {
  ldv_spin = 0;
  return;
}
}
int ldv_spin_trylock(void) 
{ int is_lock ;

  {
  is_lock = __VERIFIER_nondet_int();
  if (is_lock != 0) {
    return (0);
  } else {
    ldv_spin = 1;
    return (1);
  }
}
}
 static void spin_lock(spinlock_t *lock ) 
{ 

  {
  ldv_spin_lock();
  ldv_spin_lock_1(lock);
  return;
}
}
 static void spin_unlock(spinlock_t *lock ) 
{ 

  {
  ldv_spin_unlock();
  ldv_spin_unlock_5(lock);
  return;
}
}
void *ldv_kmem_cache_alloc_16(struct kmem_cache *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 

  {
  ldv_check_alloc_flags(ldv_func_arg2);
  kmem_cache_alloc(ldv_func_arg1, ldv_func_arg2);
  return ((void *)0);
}
}
